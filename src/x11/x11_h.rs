/* automatically generated by rust-bindgen */

pub const XlibSpecificationRelease : :: std :: os :: raw :: c_uint = 6 ; pub const _SYS_TYPES_H : :: std :: os :: raw :: c_uint = 1 ; pub const _FEATURES_H : :: std :: os :: raw :: c_uint = 1 ; pub const _DEFAULT_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ISOC11 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ISOC99 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ISOC95 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX_IMPLICITLY : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_C_SOURCE : :: std :: os :: raw :: c_uint = 200809 ; pub const __USE_POSIX : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX2 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX199309 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX199506 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_XOPEN2K : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_XOPEN2K8 : :: std :: os :: raw :: c_uint = 1 ; pub const _ATFILE_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_MISC : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ATFILE : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_FORTIFY_LEVEL : :: std :: os :: raw :: c_uint = 0 ; pub const __GLIBC_USE_DEPRECATED_GETS : :: std :: os :: raw :: c_uint = 0 ; pub const _STDC_PREDEF_H : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_IEC_559__ : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_IEC_559_COMPLEX__ : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_ISO_10646__ : :: std :: os :: raw :: c_uint = 201706 ; pub const __STDC_NO_THREADS__ : :: std :: os :: raw :: c_uint = 1 ; pub const __GNU_LIBRARY__ : :: std :: os :: raw :: c_uint = 6 ; pub const __GLIBC__ : :: std :: os :: raw :: c_uint = 2 ; pub const __GLIBC_MINOR__ : :: std :: os :: raw :: c_uint = 26 ; pub const _SYS_CDEFS_H : :: std :: os :: raw :: c_uint = 1 ; pub const __glibc_c99_flexarr_available : :: std :: os :: raw :: c_uint = 1 ; pub const __WORDSIZE : :: std :: os :: raw :: c_uint = 64 ; pub const __WORDSIZE_TIME64_COMPAT32 : :: std :: os :: raw :: c_uint = 1 ; pub const __SYSCALL_WORDSIZE : :: std :: os :: raw :: c_uint = 64 ; pub const __HAVE_GENERIC_SELECTION : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_TYPES_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_TYPESIZES_H : :: std :: os :: raw :: c_uint = 1 ; pub const __OFF_T_MATCHES_OFF64_T : :: std :: os :: raw :: c_uint = 1 ; pub const __INO_T_MATCHES_INO64_T : :: std :: os :: raw :: c_uint = 1 ; pub const __RLIM_T_MATCHES_RLIM64_T : :: std :: os :: raw :: c_uint = 1 ; pub const __FD_SETSIZE : :: std :: os :: raw :: c_uint = 1024 ; pub const __clock_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __clockid_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __time_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __timer_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_STDINT_INTN_H : :: std :: os :: raw :: c_uint = 1 ; pub const __BIT_TYPES_DEFINED__ : :: std :: os :: raw :: c_uint = 1 ; pub const _ENDIAN_H : :: std :: os :: raw :: c_uint = 1 ; pub const __LITTLE_ENDIAN : :: std :: os :: raw :: c_uint = 1234 ; pub const __BIG_ENDIAN : :: std :: os :: raw :: c_uint = 4321 ; pub const __PDP_ENDIAN : :: std :: os :: raw :: c_uint = 3412 ; pub const __BYTE_ORDER : :: std :: os :: raw :: c_uint = 1234 ; pub const __FLOAT_WORD_ORDER : :: std :: os :: raw :: c_uint = 1234 ; pub const LITTLE_ENDIAN : :: std :: os :: raw :: c_uint = 1234 ; pub const BIG_ENDIAN : :: std :: os :: raw :: c_uint = 4321 ; pub const PDP_ENDIAN : :: std :: os :: raw :: c_uint = 3412 ; pub const BYTE_ORDER : :: std :: os :: raw :: c_uint = 1234 ; pub const _BITS_BYTESWAP_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_UINTN_IDENTITY_H : :: std :: os :: raw :: c_uint = 1 ; pub const _SYS_SELECT_H : :: std :: os :: raw :: c_uint = 1 ; pub const __FD_ZERO_STOS : & 'static [ u8 ; 6usize ] = b"stosq\0" ; pub const __sigset_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __timeval_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __timespec_defined : :: std :: os :: raw :: c_uint = 1 ; pub const FD_SETSIZE : :: std :: os :: raw :: c_uint = 1024 ; pub const _SYS_SYSMACROS_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_SYSMACROS_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_PTHREADTYPES_COMMON_H : :: std :: os :: raw :: c_uint = 1 ; pub const _THREAD_SHARED_TYPES_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_PTHREADTYPES_ARCH_H : :: std :: os :: raw :: c_uint = 1 ; pub const __SIZEOF_PTHREAD_MUTEX_T : :: std :: os :: raw :: c_uint = 40 ; pub const __SIZEOF_PTHREAD_ATTR_T : :: std :: os :: raw :: c_uint = 56 ; pub const __SIZEOF_PTHREAD_RWLOCK_T : :: std :: os :: raw :: c_uint = 56 ; pub const __SIZEOF_PTHREAD_BARRIER_T : :: std :: os :: raw :: c_uint = 32 ; pub const __SIZEOF_PTHREAD_MUTEXATTR_T : :: std :: os :: raw :: c_uint = 4 ; pub const __SIZEOF_PTHREAD_COND_T : :: std :: os :: raw :: c_uint = 48 ; pub const __SIZEOF_PTHREAD_CONDATTR_T : :: std :: os :: raw :: c_uint = 4 ; pub const __SIZEOF_PTHREAD_RWLOCKATTR_T : :: std :: os :: raw :: c_uint = 8 ; pub const __SIZEOF_PTHREAD_BARRIERATTR_T : :: std :: os :: raw :: c_uint = 4 ; pub const __PTHREAD_MUTEX_LOCK_ELISION : :: std :: os :: raw :: c_uint = 1 ; pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED : :: std :: os :: raw :: c_uint = 1 ; pub const __PTHREAD_MUTEX_HAVE_PREV : :: std :: os :: raw :: c_uint = 1 ; pub const __have_pthread_attr_t : :: std :: os :: raw :: c_uint = 1 ; pub const X_PROTOCOL : :: std :: os :: raw :: c_uint = 11 ; pub const X_PROTOCOL_REVISION : :: std :: os :: raw :: c_uint = 0 ; pub const None : :: std :: os :: raw :: c_uint = 0 ; pub const ParentRelative : :: std :: os :: raw :: c_uint = 1 ; pub const CopyFromParent : :: std :: os :: raw :: c_uint = 0 ; pub const PointerWindow : :: std :: os :: raw :: c_uint = 0 ; pub const InputFocus : :: std :: os :: raw :: c_uint = 1 ; pub const PointerRoot : :: std :: os :: raw :: c_uint = 1 ; pub const AnyPropertyType : :: std :: os :: raw :: c_uint = 0 ; pub const AnyKey : :: std :: os :: raw :: c_uint = 0 ; pub const AnyButton : :: std :: os :: raw :: c_uint = 0 ; pub const AllTemporary : :: std :: os :: raw :: c_uint = 0 ; pub const CurrentTime : :: std :: os :: raw :: c_uint = 0 ; pub const NoSymbol : :: std :: os :: raw :: c_uint = 0 ; pub const NoEventMask : :: std :: os :: raw :: c_uint = 0 ; pub const KeyPressMask : :: std :: os :: raw :: c_uint = 1 ; pub const KeyReleaseMask : :: std :: os :: raw :: c_uint = 2 ; pub const ButtonPressMask : :: std :: os :: raw :: c_uint = 4 ; pub const ButtonReleaseMask : :: std :: os :: raw :: c_uint = 8 ; pub const EnterWindowMask : :: std :: os :: raw :: c_uint = 16 ; pub const LeaveWindowMask : :: std :: os :: raw :: c_uint = 32 ; pub const PointerMotionMask : :: std :: os :: raw :: c_uint = 64 ; pub const PointerMotionHintMask : :: std :: os :: raw :: c_uint = 128 ; pub const Button1MotionMask : :: std :: os :: raw :: c_uint = 256 ; pub const Button2MotionMask : :: std :: os :: raw :: c_uint = 512 ; pub const Button3MotionMask : :: std :: os :: raw :: c_uint = 1024 ; pub const Button4MotionMask : :: std :: os :: raw :: c_uint = 2048 ; pub const Button5MotionMask : :: std :: os :: raw :: c_uint = 4096 ; pub const ButtonMotionMask : :: std :: os :: raw :: c_uint = 8192 ; pub const KeymapStateMask : :: std :: os :: raw :: c_uint = 16384 ; pub const ExposureMask : :: std :: os :: raw :: c_uint = 32768 ; pub const VisibilityChangeMask : :: std :: os :: raw :: c_uint = 65536 ; pub const StructureNotifyMask : :: std :: os :: raw :: c_uint = 131072 ; pub const ResizeRedirectMask : :: std :: os :: raw :: c_uint = 262144 ; pub const SubstructureNotifyMask : :: std :: os :: raw :: c_uint = 524288 ; pub const SubstructureRedirectMask : :: std :: os :: raw :: c_uint = 1048576 ; pub const FocusChangeMask : :: std :: os :: raw :: c_uint = 2097152 ; pub const PropertyChangeMask : :: std :: os :: raw :: c_uint = 4194304 ; pub const ColormapChangeMask : :: std :: os :: raw :: c_uint = 8388608 ; pub const OwnerGrabButtonMask : :: std :: os :: raw :: c_uint = 16777216 ; pub const KeyPress : :: std :: os :: raw :: c_uint = 2 ; pub const KeyRelease : :: std :: os :: raw :: c_uint = 3 ; pub const ButtonPress : :: std :: os :: raw :: c_uint = 4 ; pub const ButtonRelease : :: std :: os :: raw :: c_uint = 5 ; pub const MotionNotify : :: std :: os :: raw :: c_uint = 6 ; pub const EnterNotify : :: std :: os :: raw :: c_uint = 7 ; pub const LeaveNotify : :: std :: os :: raw :: c_uint = 8 ; pub const FocusIn : :: std :: os :: raw :: c_uint = 9 ; pub const FocusOut : :: std :: os :: raw :: c_uint = 10 ; pub const KeymapNotify : :: std :: os :: raw :: c_uint = 11 ; pub const Expose : :: std :: os :: raw :: c_uint = 12 ; pub const GraphicsExpose : :: std :: os :: raw :: c_uint = 13 ; pub const NoExpose : :: std :: os :: raw :: c_uint = 14 ; pub const VisibilityNotify : :: std :: os :: raw :: c_uint = 15 ; pub const CreateNotify : :: std :: os :: raw :: c_uint = 16 ; pub const DestroyNotify : :: std :: os :: raw :: c_uint = 17 ; pub const UnmapNotify : :: std :: os :: raw :: c_uint = 18 ; pub const MapNotify : :: std :: os :: raw :: c_uint = 19 ; pub const MapRequest : :: std :: os :: raw :: c_uint = 20 ; pub const ReparentNotify : :: std :: os :: raw :: c_uint = 21 ; pub const ConfigureNotify : :: std :: os :: raw :: c_uint = 22 ; pub const ConfigureRequest : :: std :: os :: raw :: c_uint = 23 ; pub const GravityNotify : :: std :: os :: raw :: c_uint = 24 ; pub const ResizeRequest : :: std :: os :: raw :: c_uint = 25 ; pub const CirculateNotify : :: std :: os :: raw :: c_uint = 26 ; pub const CirculateRequest : :: std :: os :: raw :: c_uint = 27 ; pub const PropertyNotify : :: std :: os :: raw :: c_uint = 28 ; pub const SelectionClear : :: std :: os :: raw :: c_uint = 29 ; pub const SelectionRequest : :: std :: os :: raw :: c_uint = 30 ; pub const SelectionNotify : :: std :: os :: raw :: c_uint = 31 ; pub const ColormapNotify : :: std :: os :: raw :: c_uint = 32 ; pub const ClientMessage : :: std :: os :: raw :: c_uint = 33 ; pub const MappingNotify : :: std :: os :: raw :: c_uint = 34 ; pub const GenericEvent : :: std :: os :: raw :: c_uint = 35 ; pub const LASTEvent : :: std :: os :: raw :: c_uint = 36 ; pub const ShiftMask : :: std :: os :: raw :: c_uint = 1 ; pub const LockMask : :: std :: os :: raw :: c_uint = 2 ; pub const ControlMask : :: std :: os :: raw :: c_uint = 4 ; pub const Mod1Mask : :: std :: os :: raw :: c_uint = 8 ; pub const Mod2Mask : :: std :: os :: raw :: c_uint = 16 ; pub const Mod3Mask : :: std :: os :: raw :: c_uint = 32 ; pub const Mod4Mask : :: std :: os :: raw :: c_uint = 64 ; pub const Mod5Mask : :: std :: os :: raw :: c_uint = 128 ; pub const ShiftMapIndex : :: std :: os :: raw :: c_uint = 0 ; pub const LockMapIndex : :: std :: os :: raw :: c_uint = 1 ; pub const ControlMapIndex : :: std :: os :: raw :: c_uint = 2 ; pub const Mod1MapIndex : :: std :: os :: raw :: c_uint = 3 ; pub const Mod2MapIndex : :: std :: os :: raw :: c_uint = 4 ; pub const Mod3MapIndex : :: std :: os :: raw :: c_uint = 5 ; pub const Mod4MapIndex : :: std :: os :: raw :: c_uint = 6 ; pub const Mod5MapIndex : :: std :: os :: raw :: c_uint = 7 ; pub const Button1Mask : :: std :: os :: raw :: c_uint = 256 ; pub const Button2Mask : :: std :: os :: raw :: c_uint = 512 ; pub const Button3Mask : :: std :: os :: raw :: c_uint = 1024 ; pub const Button4Mask : :: std :: os :: raw :: c_uint = 2048 ; pub const Button5Mask : :: std :: os :: raw :: c_uint = 4096 ; pub const AnyModifier : :: std :: os :: raw :: c_uint = 32768 ; pub const Button1 : :: std :: os :: raw :: c_uint = 1 ; pub const Button2 : :: std :: os :: raw :: c_uint = 2 ; pub const Button3 : :: std :: os :: raw :: c_uint = 3 ; pub const Button4 : :: std :: os :: raw :: c_uint = 4 ; pub const Button5 : :: std :: os :: raw :: c_uint = 5 ; pub const NotifyNormal : :: std :: os :: raw :: c_uint = 0 ; pub const NotifyGrab : :: std :: os :: raw :: c_uint = 1 ; pub const NotifyUngrab : :: std :: os :: raw :: c_uint = 2 ; pub const NotifyWhileGrabbed : :: std :: os :: raw :: c_uint = 3 ; pub const NotifyHint : :: std :: os :: raw :: c_uint = 1 ; pub const NotifyAncestor : :: std :: os :: raw :: c_uint = 0 ; pub const NotifyVirtual : :: std :: os :: raw :: c_uint = 1 ; pub const NotifyInferior : :: std :: os :: raw :: c_uint = 2 ; pub const NotifyNonlinear : :: std :: os :: raw :: c_uint = 3 ; pub const NotifyNonlinearVirtual : :: std :: os :: raw :: c_uint = 4 ; pub const NotifyPointer : :: std :: os :: raw :: c_uint = 5 ; pub const NotifyPointerRoot : :: std :: os :: raw :: c_uint = 6 ; pub const NotifyDetailNone : :: std :: os :: raw :: c_uint = 7 ; pub const VisibilityUnobscured : :: std :: os :: raw :: c_uint = 0 ; pub const VisibilityPartiallyObscured : :: std :: os :: raw :: c_uint = 1 ; pub const VisibilityFullyObscured : :: std :: os :: raw :: c_uint = 2 ; pub const PlaceOnTop : :: std :: os :: raw :: c_uint = 0 ; pub const PlaceOnBottom : :: std :: os :: raw :: c_uint = 1 ; pub const FamilyInternet : :: std :: os :: raw :: c_uint = 0 ; pub const FamilyDECnet : :: std :: os :: raw :: c_uint = 1 ; pub const FamilyChaos : :: std :: os :: raw :: c_uint = 2 ; pub const FamilyInternet6 : :: std :: os :: raw :: c_uint = 6 ; pub const FamilyServerInterpreted : :: std :: os :: raw :: c_uint = 5 ; pub const PropertyNewValue : :: std :: os :: raw :: c_uint = 0 ; pub const PropertyDelete : :: std :: os :: raw :: c_uint = 1 ; pub const ColormapUninstalled : :: std :: os :: raw :: c_uint = 0 ; pub const ColormapInstalled : :: std :: os :: raw :: c_uint = 1 ; pub const GrabModeSync : :: std :: os :: raw :: c_uint = 0 ; pub const GrabModeAsync : :: std :: os :: raw :: c_uint = 1 ; pub const GrabSuccess : :: std :: os :: raw :: c_uint = 0 ; pub const AlreadyGrabbed : :: std :: os :: raw :: c_uint = 1 ; pub const GrabInvalidTime : :: std :: os :: raw :: c_uint = 2 ; pub const GrabNotViewable : :: std :: os :: raw :: c_uint = 3 ; pub const GrabFrozen : :: std :: os :: raw :: c_uint = 4 ; pub const AsyncPointer : :: std :: os :: raw :: c_uint = 0 ; pub const SyncPointer : :: std :: os :: raw :: c_uint = 1 ; pub const ReplayPointer : :: std :: os :: raw :: c_uint = 2 ; pub const AsyncKeyboard : :: std :: os :: raw :: c_uint = 3 ; pub const SyncKeyboard : :: std :: os :: raw :: c_uint = 4 ; pub const ReplayKeyboard : :: std :: os :: raw :: c_uint = 5 ; pub const AsyncBoth : :: std :: os :: raw :: c_uint = 6 ; pub const SyncBoth : :: std :: os :: raw :: c_uint = 7 ; pub const RevertToParent : :: std :: os :: raw :: c_uint = 2 ; pub const Success : :: std :: os :: raw :: c_uint = 0 ; pub const BadRequest : :: std :: os :: raw :: c_uint = 1 ; pub const BadValue : :: std :: os :: raw :: c_uint = 2 ; pub const BadWindow : :: std :: os :: raw :: c_uint = 3 ; pub const BadPixmap : :: std :: os :: raw :: c_uint = 4 ; pub const BadAtom : :: std :: os :: raw :: c_uint = 5 ; pub const BadCursor : :: std :: os :: raw :: c_uint = 6 ; pub const BadFont : :: std :: os :: raw :: c_uint = 7 ; pub const BadMatch : :: std :: os :: raw :: c_uint = 8 ; pub const BadDrawable : :: std :: os :: raw :: c_uint = 9 ; pub const BadAccess : :: std :: os :: raw :: c_uint = 10 ; pub const BadAlloc : :: std :: os :: raw :: c_uint = 11 ; pub const BadColor : :: std :: os :: raw :: c_uint = 12 ; pub const BadGC : :: std :: os :: raw :: c_uint = 13 ; pub const BadIDChoice : :: std :: os :: raw :: c_uint = 14 ; pub const BadName : :: std :: os :: raw :: c_uint = 15 ; pub const BadLength : :: std :: os :: raw :: c_uint = 16 ; pub const BadImplementation : :: std :: os :: raw :: c_uint = 17 ; pub const FirstExtensionError : :: std :: os :: raw :: c_uint = 128 ; pub const LastExtensionError : :: std :: os :: raw :: c_uint = 255 ; pub const InputOutput : :: std :: os :: raw :: c_uint = 1 ; pub const InputOnly : :: std :: os :: raw :: c_uint = 2 ; pub const CWBackPixmap : :: std :: os :: raw :: c_uint = 1 ; pub const CWBackPixel : :: std :: os :: raw :: c_uint = 2 ; pub const CWBorderPixmap : :: std :: os :: raw :: c_uint = 4 ; pub const CWBorderPixel : :: std :: os :: raw :: c_uint = 8 ; pub const CWBitGravity : :: std :: os :: raw :: c_uint = 16 ; pub const CWWinGravity : :: std :: os :: raw :: c_uint = 32 ; pub const CWBackingStore : :: std :: os :: raw :: c_uint = 64 ; pub const CWBackingPlanes : :: std :: os :: raw :: c_uint = 128 ; pub const CWBackingPixel : :: std :: os :: raw :: c_uint = 256 ; pub const CWOverrideRedirect : :: std :: os :: raw :: c_uint = 512 ; pub const CWSaveUnder : :: std :: os :: raw :: c_uint = 1024 ; pub const CWEventMask : :: std :: os :: raw :: c_uint = 2048 ; pub const CWDontPropagate : :: std :: os :: raw :: c_uint = 4096 ; pub const CWColormap : :: std :: os :: raw :: c_uint = 8192 ; pub const CWCursor : :: std :: os :: raw :: c_uint = 16384 ; pub const CWX : :: std :: os :: raw :: c_uint = 1 ; pub const CWY : :: std :: os :: raw :: c_uint = 2 ; pub const CWWidth : :: std :: os :: raw :: c_uint = 4 ; pub const CWHeight : :: std :: os :: raw :: c_uint = 8 ; pub const CWBorderWidth : :: std :: os :: raw :: c_uint = 16 ; pub const CWSibling : :: std :: os :: raw :: c_uint = 32 ; pub const CWStackMode : :: std :: os :: raw :: c_uint = 64 ; pub const ForgetGravity : :: std :: os :: raw :: c_uint = 0 ; pub const NorthWestGravity : :: std :: os :: raw :: c_uint = 1 ; pub const NorthGravity : :: std :: os :: raw :: c_uint = 2 ; pub const NorthEastGravity : :: std :: os :: raw :: c_uint = 3 ; pub const WestGravity : :: std :: os :: raw :: c_uint = 4 ; pub const CenterGravity : :: std :: os :: raw :: c_uint = 5 ; pub const EastGravity : :: std :: os :: raw :: c_uint = 6 ; pub const SouthWestGravity : :: std :: os :: raw :: c_uint = 7 ; pub const SouthGravity : :: std :: os :: raw :: c_uint = 8 ; pub const SouthEastGravity : :: std :: os :: raw :: c_uint = 9 ; pub const StaticGravity : :: std :: os :: raw :: c_uint = 10 ; pub const UnmapGravity : :: std :: os :: raw :: c_uint = 0 ; pub const NotUseful : :: std :: os :: raw :: c_uint = 0 ; pub const WhenMapped : :: std :: os :: raw :: c_uint = 1 ; pub const Always : :: std :: os :: raw :: c_uint = 2 ; pub const IsUnmapped : :: std :: os :: raw :: c_uint = 0 ; pub const IsUnviewable : :: std :: os :: raw :: c_uint = 1 ; pub const IsViewable : :: std :: os :: raw :: c_uint = 2 ; pub const SetModeInsert : :: std :: os :: raw :: c_uint = 0 ; pub const SetModeDelete : :: std :: os :: raw :: c_uint = 1 ; pub const DestroyAll : :: std :: os :: raw :: c_uint = 0 ; pub const RetainPermanent : :: std :: os :: raw :: c_uint = 1 ; pub const RetainTemporary : :: std :: os :: raw :: c_uint = 2 ; pub const Above : :: std :: os :: raw :: c_uint = 0 ; pub const Below : :: std :: os :: raw :: c_uint = 1 ; pub const TopIf : :: std :: os :: raw :: c_uint = 2 ; pub const BottomIf : :: std :: os :: raw :: c_uint = 3 ; pub const Opposite : :: std :: os :: raw :: c_uint = 4 ; pub const RaiseLowest : :: std :: os :: raw :: c_uint = 0 ; pub const LowerHighest : :: std :: os :: raw :: c_uint = 1 ; pub const PropModeReplace : :: std :: os :: raw :: c_uint = 0 ; pub const PropModePrepend : :: std :: os :: raw :: c_uint = 1 ; pub const PropModeAppend : :: std :: os :: raw :: c_uint = 2 ; pub const GXclear : :: std :: os :: raw :: c_uint = 0 ; pub const GXand : :: std :: os :: raw :: c_uint = 1 ; pub const GXandReverse : :: std :: os :: raw :: c_uint = 2 ; pub const GXcopy : :: std :: os :: raw :: c_uint = 3 ; pub const GXandInverted : :: std :: os :: raw :: c_uint = 4 ; pub const GXnoop : :: std :: os :: raw :: c_uint = 5 ; pub const GXxor : :: std :: os :: raw :: c_uint = 6 ; pub const GXor : :: std :: os :: raw :: c_uint = 7 ; pub const GXnor : :: std :: os :: raw :: c_uint = 8 ; pub const GXequiv : :: std :: os :: raw :: c_uint = 9 ; pub const GXinvert : :: std :: os :: raw :: c_uint = 10 ; pub const GXorReverse : :: std :: os :: raw :: c_uint = 11 ; pub const GXcopyInverted : :: std :: os :: raw :: c_uint = 12 ; pub const GXorInverted : :: std :: os :: raw :: c_uint = 13 ; pub const GXnand : :: std :: os :: raw :: c_uint = 14 ; pub const GXset : :: std :: os :: raw :: c_uint = 15 ; pub const LineSolid : :: std :: os :: raw :: c_uint = 0 ; pub const LineOnOffDash : :: std :: os :: raw :: c_uint = 1 ; pub const LineDoubleDash : :: std :: os :: raw :: c_uint = 2 ; pub const CapNotLast : :: std :: os :: raw :: c_uint = 0 ; pub const CapButt : :: std :: os :: raw :: c_uint = 1 ; pub const CapRound : :: std :: os :: raw :: c_uint = 2 ; pub const CapProjecting : :: std :: os :: raw :: c_uint = 3 ; pub const JoinMiter : :: std :: os :: raw :: c_uint = 0 ; pub const JoinRound : :: std :: os :: raw :: c_uint = 1 ; pub const JoinBevel : :: std :: os :: raw :: c_uint = 2 ; pub const FillSolid : :: std :: os :: raw :: c_uint = 0 ; pub const FillTiled : :: std :: os :: raw :: c_uint = 1 ; pub const FillStippled : :: std :: os :: raw :: c_uint = 2 ; pub const FillOpaqueStippled : :: std :: os :: raw :: c_uint = 3 ; pub const EvenOddRule : :: std :: os :: raw :: c_uint = 0 ; pub const WindingRule : :: std :: os :: raw :: c_uint = 1 ; pub const ClipByChildren : :: std :: os :: raw :: c_uint = 0 ; pub const IncludeInferiors : :: std :: os :: raw :: c_uint = 1 ; pub const Unsorted : :: std :: os :: raw :: c_uint = 0 ; pub const YSorted : :: std :: os :: raw :: c_uint = 1 ; pub const YXSorted : :: std :: os :: raw :: c_uint = 2 ; pub const YXBanded : :: std :: os :: raw :: c_uint = 3 ; pub const CoordModeOrigin : :: std :: os :: raw :: c_uint = 0 ; pub const CoordModePrevious : :: std :: os :: raw :: c_uint = 1 ; pub const Complex : :: std :: os :: raw :: c_uint = 0 ; pub const Nonconvex : :: std :: os :: raw :: c_uint = 1 ; pub const Convex : :: std :: os :: raw :: c_uint = 2 ; pub const ArcChord : :: std :: os :: raw :: c_uint = 0 ; pub const ArcPieSlice : :: std :: os :: raw :: c_uint = 1 ; pub const GCFunction : :: std :: os :: raw :: c_uint = 1 ; pub const GCPlaneMask : :: std :: os :: raw :: c_uint = 2 ; pub const GCForeground : :: std :: os :: raw :: c_uint = 4 ; pub const GCBackground : :: std :: os :: raw :: c_uint = 8 ; pub const GCLineWidth : :: std :: os :: raw :: c_uint = 16 ; pub const GCLineStyle : :: std :: os :: raw :: c_uint = 32 ; pub const GCCapStyle : :: std :: os :: raw :: c_uint = 64 ; pub const GCJoinStyle : :: std :: os :: raw :: c_uint = 128 ; pub const GCFillStyle : :: std :: os :: raw :: c_uint = 256 ; pub const GCFillRule : :: std :: os :: raw :: c_uint = 512 ; pub const GCTile : :: std :: os :: raw :: c_uint = 1024 ; pub const GCStipple : :: std :: os :: raw :: c_uint = 2048 ; pub const GCTileStipXOrigin : :: std :: os :: raw :: c_uint = 4096 ; pub const GCTileStipYOrigin : :: std :: os :: raw :: c_uint = 8192 ; pub const GCFont : :: std :: os :: raw :: c_uint = 16384 ; pub const GCSubwindowMode : :: std :: os :: raw :: c_uint = 32768 ; pub const GCGraphicsExposures : :: std :: os :: raw :: c_uint = 65536 ; pub const GCClipXOrigin : :: std :: os :: raw :: c_uint = 131072 ; pub const GCClipYOrigin : :: std :: os :: raw :: c_uint = 262144 ; pub const GCClipMask : :: std :: os :: raw :: c_uint = 524288 ; pub const GCDashOffset : :: std :: os :: raw :: c_uint = 1048576 ; pub const GCDashList : :: std :: os :: raw :: c_uint = 2097152 ; pub const GCArcMode : :: std :: os :: raw :: c_uint = 4194304 ; pub const GCLastBit : :: std :: os :: raw :: c_uint = 22 ; pub const FontLeftToRight : :: std :: os :: raw :: c_uint = 0 ; pub const FontRightToLeft : :: std :: os :: raw :: c_uint = 1 ; pub const FontChange : :: std :: os :: raw :: c_uint = 255 ; pub const XYBitmap : :: std :: os :: raw :: c_uint = 0 ; pub const XYPixmap : :: std :: os :: raw :: c_uint = 1 ; pub const ZPixmap : :: std :: os :: raw :: c_uint = 2 ; pub const AllocNone : :: std :: os :: raw :: c_uint = 0 ; pub const AllocAll : :: std :: os :: raw :: c_uint = 1 ; pub const DoRed : :: std :: os :: raw :: c_uint = 1 ; pub const DoGreen : :: std :: os :: raw :: c_uint = 2 ; pub const DoBlue : :: std :: os :: raw :: c_uint = 4 ; pub const CursorShape : :: std :: os :: raw :: c_uint = 0 ; pub const TileShape : :: std :: os :: raw :: c_uint = 1 ; pub const StippleShape : :: std :: os :: raw :: c_uint = 2 ; pub const AutoRepeatModeOff : :: std :: os :: raw :: c_uint = 0 ; pub const AutoRepeatModeOn : :: std :: os :: raw :: c_uint = 1 ; pub const AutoRepeatModeDefault : :: std :: os :: raw :: c_uint = 2 ; pub const LedModeOff : :: std :: os :: raw :: c_uint = 0 ; pub const LedModeOn : :: std :: os :: raw :: c_uint = 1 ; pub const KBKeyClickPercent : :: std :: os :: raw :: c_uint = 1 ; pub const KBBellPercent : :: std :: os :: raw :: c_uint = 2 ; pub const KBBellPitch : :: std :: os :: raw :: c_uint = 4 ; pub const KBBellDuration : :: std :: os :: raw :: c_uint = 8 ; pub const KBLed : :: std :: os :: raw :: c_uint = 16 ; pub const KBLedMode : :: std :: os :: raw :: c_uint = 32 ; pub const KBKey : :: std :: os :: raw :: c_uint = 64 ; pub const KBAutoRepeatMode : :: std :: os :: raw :: c_uint = 128 ; pub const MappingSuccess : :: std :: os :: raw :: c_uint = 0 ; pub const MappingBusy : :: std :: os :: raw :: c_uint = 1 ; pub const MappingFailed : :: std :: os :: raw :: c_uint = 2 ; pub const MappingModifier : :: std :: os :: raw :: c_uint = 0 ; pub const MappingKeyboard : :: std :: os :: raw :: c_uint = 1 ; pub const MappingPointer : :: std :: os :: raw :: c_uint = 2 ; pub const DontPreferBlanking : :: std :: os :: raw :: c_uint = 0 ; pub const PreferBlanking : :: std :: os :: raw :: c_uint = 1 ; pub const DefaultBlanking : :: std :: os :: raw :: c_uint = 2 ; pub const DisableScreenSaver : :: std :: os :: raw :: c_uint = 0 ; pub const DisableScreenInterval : :: std :: os :: raw :: c_uint = 0 ; pub const DontAllowExposures : :: std :: os :: raw :: c_uint = 0 ; pub const AllowExposures : :: std :: os :: raw :: c_uint = 1 ; pub const DefaultExposures : :: std :: os :: raw :: c_uint = 2 ; pub const ScreenSaverReset : :: std :: os :: raw :: c_uint = 0 ; pub const ScreenSaverActive : :: std :: os :: raw :: c_uint = 1 ; pub const HostInsert : :: std :: os :: raw :: c_uint = 0 ; pub const HostDelete : :: std :: os :: raw :: c_uint = 1 ; pub const EnableAccess : :: std :: os :: raw :: c_uint = 1 ; pub const DisableAccess : :: std :: os :: raw :: c_uint = 0 ; pub const StaticGray : :: std :: os :: raw :: c_uint = 0 ; pub const GrayScale : :: std :: os :: raw :: c_uint = 1 ; pub const StaticColor : :: std :: os :: raw :: c_uint = 2 ; pub const PseudoColor : :: std :: os :: raw :: c_uint = 3 ; pub const TrueColor : :: std :: os :: raw :: c_uint = 4 ; pub const DirectColor : :: std :: os :: raw :: c_uint = 5 ; pub const LSBFirst : :: std :: os :: raw :: c_uint = 0 ; pub const MSBFirst : :: std :: os :: raw :: c_uint = 1 ; pub const NeedFunctionPrototypes : :: std :: os :: raw :: c_uint = 1 ; pub const NeedVarargsPrototypes : :: std :: os :: raw :: c_uint = 1 ; pub const NeedNestedPrototypes : :: std :: os :: raw :: c_uint = 1 ; pub const FUNCPROTO : :: std :: os :: raw :: c_uint = 15 ; pub const NeedWidePrototypes : :: std :: os :: raw :: c_uint = 0 ; pub const X_HAVE_UTF8_STRING : :: std :: os :: raw :: c_uint = 1 ; pub const True : :: std :: os :: raw :: c_uint = 1 ; pub const False : :: std :: os :: raw :: c_uint = 0 ; pub const QueuedAlready : :: std :: os :: raw :: c_uint = 0 ; pub const QueuedAfterReading : :: std :: os :: raw :: c_uint = 1 ; pub const QueuedAfterFlush : :: std :: os :: raw :: c_uint = 2 ; pub const XNRequiredCharSet : & 'static [ u8 ; 16usize ] = b"requiredCharSet\0" ; pub const XNQueryOrientation : & 'static [ u8 ; 17usize ] = b"queryOrientation\0" ; pub const XNBaseFontName : & 'static [ u8 ; 13usize ] = b"baseFontName\0" ; pub const XNOMAutomatic : & 'static [ u8 ; 12usize ] = b"omAutomatic\0" ; pub const XNMissingCharSet : & 'static [ u8 ; 15usize ] = b"missingCharSet\0" ; pub const XNDefaultString : & 'static [ u8 ; 14usize ] = b"defaultString\0" ; pub const XNOrientation : & 'static [ u8 ; 12usize ] = b"orientation\0" ; pub const XNDirectionalDependentDrawing : & 'static [ u8 ; 28usize ] = b"directionalDependentDrawing\0" ; pub const XNContextualDrawing : & 'static [ u8 ; 18usize ] = b"contextualDrawing\0" ; pub const XNFontInfo : & 'static [ u8 ; 9usize ] = b"fontInfo\0" ; pub const XIMPreeditArea : :: std :: os :: raw :: c_uint = 1 ; pub const XIMPreeditCallbacks : :: std :: os :: raw :: c_uint = 2 ; pub const XIMPreeditPosition : :: std :: os :: raw :: c_uint = 4 ; pub const XIMPreeditNothing : :: std :: os :: raw :: c_uint = 8 ; pub const XIMPreeditNone : :: std :: os :: raw :: c_uint = 16 ; pub const XIMStatusArea : :: std :: os :: raw :: c_uint = 256 ; pub const XIMStatusCallbacks : :: std :: os :: raw :: c_uint = 512 ; pub const XIMStatusNothing : :: std :: os :: raw :: c_uint = 1024 ; pub const XIMStatusNone : :: std :: os :: raw :: c_uint = 2048 ; pub const XNVaNestedList : & 'static [ u8 ; 15usize ] = b"XNVaNestedList\0" ; pub const XNQueryInputStyle : & 'static [ u8 ; 16usize ] = b"queryInputStyle\0" ; pub const XNClientWindow : & 'static [ u8 ; 13usize ] = b"clientWindow\0" ; pub const XNInputStyle : & 'static [ u8 ; 11usize ] = b"inputStyle\0" ; pub const XNFocusWindow : & 'static [ u8 ; 12usize ] = b"focusWindow\0" ; pub const XNResourceName : & 'static [ u8 ; 13usize ] = b"resourceName\0" ; pub const XNResourceClass : & 'static [ u8 ; 14usize ] = b"resourceClass\0" ; pub const XNGeometryCallback : & 'static [ u8 ; 17usize ] = b"geometryCallback\0" ; pub const XNDestroyCallback : & 'static [ u8 ; 16usize ] = b"destroyCallback\0" ; pub const XNFilterEvents : & 'static [ u8 ; 13usize ] = b"filterEvents\0" ; pub const XNPreeditStartCallback : & 'static [ u8 ; 21usize ] = b"preeditStartCallback\0" ; pub const XNPreeditDoneCallback : & 'static [ u8 ; 20usize ] = b"preeditDoneCallback\0" ; pub const XNPreeditDrawCallback : & 'static [ u8 ; 20usize ] = b"preeditDrawCallback\0" ; pub const XNPreeditCaretCallback : & 'static [ u8 ; 21usize ] = b"preeditCaretCallback\0" ; pub const XNPreeditStateNotifyCallback : & 'static [ u8 ; 27usize ] = b"preeditStateNotifyCallback\0" ; pub const XNPreeditAttributes : & 'static [ u8 ; 18usize ] = b"preeditAttributes\0" ; pub const XNStatusStartCallback : & 'static [ u8 ; 20usize ] = b"statusStartCallback\0" ; pub const XNStatusDoneCallback : & 'static [ u8 ; 19usize ] = b"statusDoneCallback\0" ; pub const XNStatusDrawCallback : & 'static [ u8 ; 19usize ] = b"statusDrawCallback\0" ; pub const XNStatusAttributes : & 'static [ u8 ; 17usize ] = b"statusAttributes\0" ; pub const XNArea : & 'static [ u8 ; 5usize ] = b"area\0" ; pub const XNAreaNeeded : & 'static [ u8 ; 11usize ] = b"areaNeeded\0" ; pub const XNSpotLocation : & 'static [ u8 ; 13usize ] = b"spotLocation\0" ; pub const XNColormap : & 'static [ u8 ; 9usize ] = b"colorMap\0" ; pub const XNStdColormap : & 'static [ u8 ; 12usize ] = b"stdColorMap\0" ; pub const XNForeground : & 'static [ u8 ; 11usize ] = b"foreground\0" ; pub const XNBackground : & 'static [ u8 ; 11usize ] = b"background\0" ; pub const XNBackgroundPixmap : & 'static [ u8 ; 17usize ] = b"backgroundPixmap\0" ; pub const XNFontSet : & 'static [ u8 ; 8usize ] = b"fontSet\0" ; pub const XNLineSpace : & 'static [ u8 ; 10usize ] = b"lineSpace\0" ; pub const XNCursor : & 'static [ u8 ; 7usize ] = b"cursor\0" ; pub const XNQueryIMValuesList : & 'static [ u8 ; 18usize ] = b"queryIMValuesList\0" ; pub const XNQueryICValuesList : & 'static [ u8 ; 18usize ] = b"queryICValuesList\0" ; pub const XNVisiblePosition : & 'static [ u8 ; 16usize ] = b"visiblePosition\0" ; pub const XNR6PreeditCallback : & 'static [ u8 ; 18usize ] = b"r6PreeditCallback\0" ; pub const XNStringConversionCallback : & 'static [ u8 ; 25usize ] = b"stringConversionCallback\0" ; pub const XNStringConversion : & 'static [ u8 ; 17usize ] = b"stringConversion\0" ; pub const XNResetState : & 'static [ u8 ; 11usize ] = b"resetState\0" ; pub const XNHotKey : & 'static [ u8 ; 7usize ] = b"hotKey\0" ; pub const XNHotKeyState : & 'static [ u8 ; 12usize ] = b"hotKeyState\0" ; pub const XNPreeditState : & 'static [ u8 ; 13usize ] = b"preeditState\0" ; pub const XNSeparatorofNestedList : & 'static [ u8 ; 22usize ] = b"separatorofNestedList\0" ; pub const XBufferOverflow : :: std :: os :: raw :: c_int = -1 ; pub const XLookupNone : :: std :: os :: raw :: c_uint = 1 ; pub const XLookupChars : :: std :: os :: raw :: c_uint = 2 ; pub const XLookupKeySym : :: std :: os :: raw :: c_uint = 3 ; pub const XLookupBoth : :: std :: os :: raw :: c_uint = 4 ; pub const XIMReverse : :: std :: os :: raw :: c_uint = 1 ; pub const XIMUnderline : :: std :: os :: raw :: c_uint = 2 ; pub const XIMHighlight : :: std :: os :: raw :: c_uint = 4 ; pub const XIMPrimary : :: std :: os :: raw :: c_uint = 32 ; pub const XIMSecondary : :: std :: os :: raw :: c_uint = 64 ; pub const XIMTertiary : :: std :: os :: raw :: c_uint = 128 ; pub const XIMVisibleToForward : :: std :: os :: raw :: c_uint = 256 ; pub const XIMVisibleToBackword : :: std :: os :: raw :: c_uint = 512 ; pub const XIMVisibleToCenter : :: std :: os :: raw :: c_uint = 1024 ; pub const XIMPreeditUnKnown : :: std :: os :: raw :: c_uint = 0 ; pub const XIMPreeditEnable : :: std :: os :: raw :: c_uint = 1 ; pub const XIMPreeditDisable : :: std :: os :: raw :: c_uint = 2 ; pub const XIMInitialState : :: std :: os :: raw :: c_uint = 1 ; pub const XIMPreserveState : :: std :: os :: raw :: c_uint = 2 ; pub const XIMStringConversionLeftEdge : :: std :: os :: raw :: c_uint = 1 ; pub const XIMStringConversionRightEdge : :: std :: os :: raw :: c_uint = 2 ; pub const XIMStringConversionTopEdge : :: std :: os :: raw :: c_uint = 4 ; pub const XIMStringConversionBottomEdge : :: std :: os :: raw :: c_uint = 8 ; pub const XIMStringConversionConcealed : :: std :: os :: raw :: c_uint = 16 ; pub const XIMStringConversionWrapped : :: std :: os :: raw :: c_uint = 32 ; pub const XIMStringConversionBuffer : :: std :: os :: raw :: c_uint = 1 ; pub const XIMStringConversionLine : :: std :: os :: raw :: c_uint = 2 ; pub const XIMStringConversionWord : :: std :: os :: raw :: c_uint = 3 ; pub const XIMStringConversionChar : :: std :: os :: raw :: c_uint = 4 ; pub const XIMStringConversionSubstitution : :: std :: os :: raw :: c_uint = 1 ; pub const XIMStringConversionRetrieval : :: std :: os :: raw :: c_uint = 2 ; pub const XIMHotKeyStateON : :: std :: os :: raw :: c_uint = 1 ; pub const XIMHotKeyStateOFF : :: std :: os :: raw :: c_uint = 2 ; pub type __u_char = :: std :: os :: raw :: c_uchar ; pub type __u_short = :: std :: os :: raw :: c_ushort ; pub type __u_int = :: std :: os :: raw :: c_uint ; pub type __u_long = :: std :: os :: raw :: c_ulong ; pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_long ; pub type __uint64_t = :: std :: os :: raw :: c_ulong ; pub type __quad_t = :: std :: os :: raw :: c_long ; pub type __u_quad_t = :: std :: os :: raw :: c_ulong ; pub type __intmax_t = :: std :: os :: raw :: c_long ; pub type __uintmax_t = :: std :: os :: raw :: c_ulong ; pub type __dev_t = :: std :: os :: raw :: c_ulong ; pub type __uid_t = :: std :: os :: raw :: c_uint ; pub type __gid_t = :: std :: os :: raw :: c_uint ; pub type __ino_t = :: std :: os :: raw :: c_ulong ; pub type __ino64_t = :: std :: os :: raw :: c_ulong ; pub type __mode_t = :: std :: os :: raw :: c_uint ; pub type __nlink_t = :: std :: os :: raw :: c_ulong ; pub type __off_t = :: std :: os :: raw :: c_long ; pub type __off64_t = :: std :: os :: raw :: c_long ; pub type __pid_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct __fsid_t { pub __val : [ :: std :: os :: raw :: c_int ; 2usize ] , } # [ test ] fn bindgen_test_layout___fsid_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __fsid_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __fsid_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __fsid_t ) ) . __val as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __fsid_t ) , "::" , stringify ! ( __val ) ) ) ; } impl Clone for __fsid_t { fn clone ( & self ) -> Self { * self } } pub type __clock_t = :: std :: os :: raw :: c_long ; pub type __rlim_t = :: std :: os :: raw :: c_ulong ; pub type __rlim64_t = :: std :: os :: raw :: c_ulong ; pub type __id_t = :: std :: os :: raw :: c_uint ; pub type __time_t = :: std :: os :: raw :: c_long ; pub type __useconds_t = :: std :: os :: raw :: c_uint ; pub type __suseconds_t = :: std :: os :: raw :: c_long ; pub type __daddr_t = :: std :: os :: raw :: c_int ; pub type __key_t = :: std :: os :: raw :: c_int ; pub type __clockid_t = :: std :: os :: raw :: c_int ; pub type __timer_t = * mut :: std :: os :: raw :: c_void ; pub type __blksize_t = :: std :: os :: raw :: c_long ; pub type __blkcnt_t = :: std :: os :: raw :: c_long ; pub type __blkcnt64_t = :: std :: os :: raw :: c_long ; pub type __fsblkcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsblkcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsword_t = :: std :: os :: raw :: c_long ; pub type __ssize_t = :: std :: os :: raw :: c_long ; pub type __syscall_slong_t = :: std :: os :: raw :: c_long ; pub type __syscall_ulong_t = :: std :: os :: raw :: c_ulong ; pub type __loff_t = __off64_t ; pub type __qaddr_t = * mut __quad_t ; pub type __caddr_t = * mut :: std :: os :: raw :: c_char ; pub type __intptr_t = :: std :: os :: raw :: c_long ; pub type __socklen_t = :: std :: os :: raw :: c_uint ; pub type __sig_atomic_t = :: std :: os :: raw :: c_int ; pub type u_char = __u_char ; pub type u_short = __u_short ; pub type u_int = __u_int ; pub type u_long = __u_long ; pub type quad_t = __quad_t ; pub type u_quad_t = __u_quad_t ; pub type fsid_t = __fsid_t ; pub type loff_t = __loff_t ; pub type ino_t = __ino_t ; pub type dev_t = __dev_t ; pub type gid_t = __gid_t ; pub type mode_t = __mode_t ; pub type nlink_t = __nlink_t ; pub type uid_t = __uid_t ; pub type off_t = __off_t ; pub type pid_t = __pid_t ; pub type id_t = __id_t ; pub type daddr_t = __daddr_t ; pub type caddr_t = __caddr_t ; pub type key_t = __key_t ; pub type clock_t = __clock_t ; pub type clockid_t = __clockid_t ; pub type time_t = __time_t ; pub type timer_t = __timer_t ; pub type ulong = :: std :: os :: raw :: c_ulong ; pub type ushort = :: std :: os :: raw :: c_ushort ; pub type uint = :: std :: os :: raw :: c_uint ; pub type u_int8_t = :: std :: os :: raw :: c_uchar ; pub type u_int16_t = :: std :: os :: raw :: c_ushort ; pub type u_int32_t = :: std :: os :: raw :: c_uint ; pub type u_int64_t = :: std :: os :: raw :: c_ulong ; pub type register_t = :: std :: os :: raw :: c_long ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct __sigset_t { pub __val : [ :: std :: os :: raw :: c_ulong ; 16usize ] , } # [ test ] fn bindgen_test_layout___sigset_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __sigset_t > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( __sigset_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __sigset_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __sigset_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __sigset_t ) ) . __val as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __sigset_t ) , "::" , stringify ! ( __val ) ) ) ; } impl Clone for __sigset_t { fn clone ( & self ) -> Self { * self } } pub type sigset_t = __sigset_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct timeval { pub tv_sec : __time_t , pub tv_usec : __suseconds_t , } # [ test ] fn bindgen_test_layout_timeval ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timeval > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( timeval ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < timeval > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( timeval ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timeval ) ) . tv_sec as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( timeval ) , "::" , stringify ! ( tv_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timeval ) ) . tv_usec as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( timeval ) , "::" , stringify ! ( tv_usec ) ) ) ; } impl Clone for timeval { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct timespec { pub tv_sec : __time_t , pub tv_nsec : __syscall_slong_t , } # [ test ] fn bindgen_test_layout_timespec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timespec > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( timespec ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < timespec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( timespec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timespec ) ) . tv_sec as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( timespec ) , "::" , stringify ! ( tv_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timespec ) ) . tv_nsec as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( timespec ) , "::" , stringify ! ( tv_nsec ) ) ) ; } impl Clone for timespec { fn clone ( & self ) -> Self { * self } } pub type suseconds_t = __suseconds_t ; pub type __fd_mask = :: std :: os :: raw :: c_long ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct fd_set { pub __fds_bits : [ __fd_mask ; 16usize ] , } # [ test ] fn bindgen_test_layout_fd_set ( ) { assert_eq ! ( :: std :: mem :: size_of :: < fd_set > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( fd_set ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < fd_set > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( fd_set ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const fd_set ) ) . __fds_bits as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( fd_set ) , "::" , stringify ! ( __fds_bits ) ) ) ; } impl Clone for fd_set { fn clone ( & self ) -> Self { * self } } pub type fd_mask = __fd_mask ; extern "C" {
 pub fn select ( __nfds : :: std :: os :: raw :: c_int , __readfds : * mut fd_set , __writefds : * mut fd_set , __exceptfds : * mut fd_set , __timeout : * mut timeval , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn pselect ( __nfds : :: std :: os :: raw :: c_int , __readfds : * mut fd_set , __writefds : * mut fd_set , __exceptfds : * mut fd_set , __timeout : * const timespec , __sigmask : * const __sigset_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn gnu_dev_major ( __dev : __dev_t , ) -> :: std :: os :: raw :: c_uint ; 
} extern "C" {
 pub fn gnu_dev_minor ( __dev : __dev_t , ) -> :: std :: os :: raw :: c_uint ; 
} extern "C" {
 pub fn gnu_dev_makedev ( __major : :: std :: os :: raw :: c_uint , __minor : :: std :: os :: raw :: c_uint , ) -> __dev_t ; 
} pub type blksize_t = __blksize_t ; pub type blkcnt_t = __blkcnt_t ; pub type fsblkcnt_t = __fsblkcnt_t ; pub type fsfilcnt_t = __fsfilcnt_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct __pthread_rwlock_arch_t { pub __readers : :: std :: os :: raw :: c_uint , pub __writers : :: std :: os :: raw :: c_uint , pub __wrphase_futex : :: std :: os :: raw :: c_uint , pub __writers_futex : :: std :: os :: raw :: c_uint , pub __pad3 : :: std :: os :: raw :: c_uint , pub __pad4 : :: std :: os :: raw :: c_uint , pub __cur_writer : :: std :: os :: raw :: c_int , pub __shared : :: std :: os :: raw :: c_int , pub __rwelision : :: std :: os :: raw :: c_schar , pub __pad1 : [ :: std :: os :: raw :: c_uchar ; 7usize ] , pub __pad2 : :: std :: os :: raw :: c_ulong , pub __flags : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout___pthread_rwlock_arch_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_rwlock_arch_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( __pthread_rwlock_arch_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_rwlock_arch_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_rwlock_arch_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __readers as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __readers ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __writers as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __writers ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __wrphase_futex as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __wrphase_futex ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __writers_futex as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __writers_futex ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __pad3 as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __pad4 as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __cur_writer as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __cur_writer ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __shared as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __shared ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __rwelision as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __rwelision ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __pad1 as * const _ as usize } , 33usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __pad2 as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __flags as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __flags ) ) ) ; } impl Clone for __pthread_rwlock_arch_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct __pthread_internal_list { pub __prev : * mut __pthread_internal_list , pub __next : * mut __pthread_internal_list , } # [ test ] fn bindgen_test_layout___pthread_internal_list ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_internal_list > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( __pthread_internal_list ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_internal_list > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_internal_list ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_internal_list ) ) . __prev as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_internal_list ) , "::" , stringify ! ( __prev ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_internal_list ) ) . __next as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_internal_list ) , "::" , stringify ! ( __next ) ) ) ; } impl Clone for __pthread_internal_list { fn clone ( & self ) -> Self { * self } } pub type __pthread_list_t = __pthread_internal_list ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct __pthread_mutex_s { pub __lock : :: std :: os :: raw :: c_int , pub __count : :: std :: os :: raw :: c_uint , pub __owner : :: std :: os :: raw :: c_int , pub __nusers : :: std :: os :: raw :: c_uint , pub __kind : :: std :: os :: raw :: c_int , pub __spins : :: std :: os :: raw :: c_short , pub __elision : :: std :: os :: raw :: c_short , pub __list : __pthread_list_t , } # [ test ] fn bindgen_test_layout___pthread_mutex_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_mutex_s > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( __pthread_mutex_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_mutex_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_mutex_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __lock as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __lock ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __count as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __count ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __owner as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __owner ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __nusers as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __nusers ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __kind as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __kind ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __spins as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __spins ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __elision as * const _ as usize } , 22usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __elision ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __list as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __list ) ) ) ; } impl Clone for __pthread_mutex_s { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub struct __pthread_cond_s { pub __bindgen_anon_1 : __pthread_cond_s__bindgen_ty_1 , pub __bindgen_anon_2 : __pthread_cond_s__bindgen_ty_2 , pub __g_refs : [ :: std :: os :: raw :: c_uint ; 2usize ] , pub __g_size : [ :: std :: os :: raw :: c_uint ; 2usize ] , pub __g1_orig_size : :: std :: os :: raw :: c_uint , pub __wrefs : :: std :: os :: raw :: c_uint , pub __g_signals : [ :: std :: os :: raw :: c_uint ; 2usize ] , } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union __pthread_cond_s__bindgen_ty_1 { pub __wseq : :: std :: os :: raw :: c_ulonglong , pub __wseq32 : __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 , _bindgen_union_align : u64 , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 { pub __low : :: std :: os :: raw :: c_uint , pub __high : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) ) . __low as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( __low ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) ) . __high as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( __high ) ) ) ; } impl Clone for __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_1 ) ) . __wseq as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) , "::" , stringify ! ( __wseq ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_1 ) ) . __wseq32 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) , "::" , stringify ! ( __wseq32 ) ) ) ; } impl Clone for __pthread_cond_s__bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union __pthread_cond_s__bindgen_ty_2 { pub __g1_start : :: std :: os :: raw :: c_ulonglong , pub __g1_start32 : __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 , _bindgen_union_align : u64 , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 { pub __low : :: std :: os :: raw :: c_uint , pub __high : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) ) . __low as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) , "::" , stringify ! ( __low ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) ) . __high as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) , "::" , stringify ! ( __high ) ) ) ; } impl Clone for __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_2 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_2 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_2 ) ) . __g1_start as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) , "::" , stringify ! ( __g1_start ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_2 ) ) . __g1_start32 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) , "::" , stringify ! ( __g1_start32 ) ) ) ; } impl Clone for __pthread_cond_s__bindgen_ty_2 { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout___pthread_cond_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s ) ) . __g_refs as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g_refs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s ) ) . __g_size as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s ) ) . __g1_orig_size as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g1_orig_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s ) ) . __wrefs as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __wrefs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s ) ) . __g_signals as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g_signals ) ) ) ; } impl Clone for __pthread_cond_s { fn clone ( & self ) -> Self { * self } } pub type pthread_t = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_mutexattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 4usize ] , pub __align : :: std :: os :: raw :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_mutexattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_mutexattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_mutexattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_mutexattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_mutexattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutexattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutexattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_mutexattr_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_condattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 4usize ] , pub __align : :: std :: os :: raw :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_condattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_condattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_condattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_condattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_condattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_condattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_condattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_condattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_condattr_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_condattr_t { fn clone ( & self ) -> Self { * self } } pub type pthread_key_t = :: std :: os :: raw :: c_uint ; pub type pthread_once_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_attr_t { pub __size : [ :: std :: os :: raw :: c_char ; 56usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 7usize ] , } # [ test ] fn bindgen_test_layout_pthread_attr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_attr_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( pthread_attr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_attr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_attr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_attr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_attr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_attr_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_mutex_t { pub __data : __pthread_mutex_s , pub __size : [ :: std :: os :: raw :: c_char ; 40usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 5usize ] , } # [ test ] fn bindgen_test_layout_pthread_mutex_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_mutex_t > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( pthread_mutex_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_mutex_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_mutex_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_mutex_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_cond_t { pub __data : __pthread_cond_s , pub __size : [ :: std :: os :: raw :: c_char ; 48usize ] , pub __align : :: std :: os :: raw :: c_longlong , _bindgen_union_align : [ u64 ; 6usize ] , } # [ test ] fn bindgen_test_layout_pthread_cond_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_cond_t > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( pthread_cond_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_cond_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_cond_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_cond_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_rwlock_t { pub __data : __pthread_rwlock_arch_t , pub __size : [ :: std :: os :: raw :: c_char ; 56usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 7usize ] , } # [ test ] fn bindgen_test_layout_pthread_rwlock_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_rwlock_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( pthread_rwlock_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_rwlock_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_rwlock_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_rwlock_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_rwlockattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 8usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_pthread_rwlockattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_rwlockattr_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( pthread_rwlockattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_rwlockattr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_rwlockattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlockattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlockattr_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_rwlockattr_t { fn clone ( & self ) -> Self { * self } } pub type pthread_spinlock_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_barrier_t { pub __size : [ :: std :: os :: raw :: c_char ; 32usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 4usize ] , } # [ test ] fn bindgen_test_layout_pthread_barrier_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_barrier_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( pthread_barrier_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_barrier_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_barrier_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrier_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrier_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrier_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrier_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_barrier_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_barrierattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 4usize ] , pub __align : :: std :: os :: raw :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_barrierattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_barrierattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_barrierattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_barrierattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_barrierattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrierattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrierattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrierattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrierattr_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_barrierattr_t { fn clone ( & self ) -> Self { * self } } pub type XID = :: std :: os :: raw :: c_ulong ; pub type Mask = :: std :: os :: raw :: c_ulong ; pub type Atom = :: std :: os :: raw :: c_ulong ; pub type VisualID = :: std :: os :: raw :: c_ulong ; pub type Time = :: std :: os :: raw :: c_ulong ; pub type Window = XID ; pub type Drawable = XID ; pub type Font = XID ; pub type Pixmap = XID ; pub type Cursor = XID ; pub type Colormap = XID ; pub type GContext = XID ; pub type KeySym = XID ; pub type KeyCode = :: std :: os :: raw :: c_uchar ; pub type wchar_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct max_align_t { pub __clang_max_align_nonce1 : :: std :: os :: raw :: c_longlong , pub __bindgen_padding_0 : u64 , pub __clang_max_align_nonce2 : f64 , } # [ test ] fn bindgen_test_layout_max_align_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < max_align_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( max_align_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const max_align_t ) ) . __clang_max_align_nonce1 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( max_align_t ) , "::" , stringify ! ( __clang_max_align_nonce1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const max_align_t ) ) . __clang_max_align_nonce2 as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( max_align_t ) , "::" , stringify ! ( __clang_max_align_nonce2 ) ) ) ; } impl Clone for max_align_t { fn clone ( & self ) -> Self { * self } } extern "C" {
 pub fn _Xmblen ( str : * mut :: std :: os :: raw :: c_char , len : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} pub type XPointer = * mut :: std :: os :: raw :: c_char ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XExtData { pub number : :: std :: os :: raw :: c_int , pub next : * mut _XExtData , pub free_private : :: std :: option :: Option < unsafe extern "C" fn ( extension : * mut _XExtData ) -> :: std :: os :: raw :: c_int > , pub private_data : XPointer , } # [ test ] fn bindgen_test_layout__XExtData ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XExtData > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _XExtData ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XExtData > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XExtData ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XExtData ) ) . number as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XExtData ) , "::" , stringify ! ( number ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XExtData ) ) . next as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XExtData ) , "::" , stringify ! ( next ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XExtData ) ) . free_private as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _XExtData ) , "::" , stringify ! ( free_private ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XExtData ) ) . private_data as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _XExtData ) , "::" , stringify ! ( private_data ) ) ) ; } impl Clone for _XExtData { fn clone ( & self ) -> Self { * self } } pub type XExtData = _XExtData ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XExtCodes { pub extension : :: std :: os :: raw :: c_int , pub major_opcode : :: std :: os :: raw :: c_int , pub first_event : :: std :: os :: raw :: c_int , pub first_error : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XExtCodes ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XExtCodes > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XExtCodes ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XExtCodes > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( XExtCodes ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExtCodes ) ) . extension as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XExtCodes ) , "::" , stringify ! ( extension ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExtCodes ) ) . major_opcode as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XExtCodes ) , "::" , stringify ! ( major_opcode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExtCodes ) ) . first_event as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XExtCodes ) , "::" , stringify ! ( first_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExtCodes ) ) . first_error as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XExtCodes ) , "::" , stringify ! ( first_error ) ) ) ; } impl Clone for XExtCodes { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XPixmapFormatValues { pub depth : :: std :: os :: raw :: c_int , pub bits_per_pixel : :: std :: os :: raw :: c_int , pub scanline_pad : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XPixmapFormatValues ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XPixmapFormatValues > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( XPixmapFormatValues ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XPixmapFormatValues > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( XPixmapFormatValues ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPixmapFormatValues ) ) . depth as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XPixmapFormatValues ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPixmapFormatValues ) ) . bits_per_pixel as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XPixmapFormatValues ) , "::" , stringify ! ( bits_per_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPixmapFormatValues ) ) . scanline_pad as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XPixmapFormatValues ) , "::" , stringify ! ( scanline_pad ) ) ) ; } impl Clone for XPixmapFormatValues { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XGCValues { pub function : :: std :: os :: raw :: c_int , pub plane_mask : :: std :: os :: raw :: c_ulong , pub foreground : :: std :: os :: raw :: c_ulong , pub background : :: std :: os :: raw :: c_ulong , pub line_width : :: std :: os :: raw :: c_int , pub line_style : :: std :: os :: raw :: c_int , pub cap_style : :: std :: os :: raw :: c_int , pub join_style : :: std :: os :: raw :: c_int , pub fill_style : :: std :: os :: raw :: c_int , pub fill_rule : :: std :: os :: raw :: c_int , pub arc_mode : :: std :: os :: raw :: c_int , pub tile : Pixmap , pub stipple : Pixmap , pub ts_x_origin : :: std :: os :: raw :: c_int , pub ts_y_origin : :: std :: os :: raw :: c_int , pub font : Font , pub subwindow_mode : :: std :: os :: raw :: c_int , pub graphics_exposures : :: std :: os :: raw :: c_int , pub clip_x_origin : :: std :: os :: raw :: c_int , pub clip_y_origin : :: std :: os :: raw :: c_int , pub clip_mask : Pixmap , pub dash_offset : :: std :: os :: raw :: c_int , pub dashes : :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_XGCValues ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XGCValues > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( XGCValues ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XGCValues > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XGCValues ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . function as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( function ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . plane_mask as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( plane_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . foreground as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( foreground ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . background as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( background ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . line_width as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( line_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . line_style as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( line_style ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . cap_style as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( cap_style ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . join_style as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( join_style ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . fill_style as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( fill_style ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . fill_rule as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( fill_rule ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . arc_mode as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( arc_mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . tile as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( tile ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . stipple as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( stipple ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . ts_x_origin as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( ts_x_origin ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . ts_y_origin as * const _ as usize } , 84usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( ts_y_origin ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . font as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( font ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . subwindow_mode as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( subwindow_mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . graphics_exposures as * const _ as usize } , 100usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( graphics_exposures ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . clip_x_origin as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( clip_x_origin ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . clip_y_origin as * const _ as usize } , 108usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( clip_y_origin ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . clip_mask as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( clip_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . dash_offset as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( dash_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . dashes as * const _ as usize } , 124usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( dashes ) ) ) ; } impl Clone for XGCValues { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XGC { _unused : [ u8 ; 0 ] } pub type GC = * mut _XGC ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct Visual { pub ext_data : * mut XExtData , pub visualid : VisualID , pub class : :: std :: os :: raw :: c_int , pub red_mask : :: std :: os :: raw :: c_ulong , pub green_mask : :: std :: os :: raw :: c_ulong , pub blue_mask : :: std :: os :: raw :: c_ulong , pub bits_per_rgb : :: std :: os :: raw :: c_int , pub map_entries : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_Visual ( ) { assert_eq ! ( :: std :: mem :: size_of :: < Visual > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( Visual ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < Visual > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( Visual ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . ext_data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( ext_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . visualid as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( visualid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . class as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( class ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . red_mask as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( red_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . green_mask as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( green_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . blue_mask as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( blue_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . bits_per_rgb as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( bits_per_rgb ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . map_entries as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( map_entries ) ) ) ; } impl Clone for Visual { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct Depth { pub depth : :: std :: os :: raw :: c_int , pub nvisuals : :: std :: os :: raw :: c_int , pub visuals : * mut Visual , } # [ test ] fn bindgen_test_layout_Depth ( ) { assert_eq ! ( :: std :: mem :: size_of :: < Depth > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( Depth ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < Depth > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( Depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Depth ) ) . depth as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( Depth ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Depth ) ) . nvisuals as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( Depth ) , "::" , stringify ! ( nvisuals ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Depth ) ) . visuals as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( Depth ) , "::" , stringify ! ( visuals ) ) ) ; } impl Clone for Depth { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XDisplay { _unused : [ u8 ; 0 ] } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct Screen { pub ext_data : * mut XExtData , pub display : * mut _XDisplay , pub root : Window , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub mwidth : :: std :: os :: raw :: c_int , pub mheight : :: std :: os :: raw :: c_int , pub ndepths : :: std :: os :: raw :: c_int , pub depths : * mut Depth , pub root_depth : :: std :: os :: raw :: c_int , pub root_visual : * mut Visual , pub default_gc : GC , pub cmap : Colormap , pub white_pixel : :: std :: os :: raw :: c_ulong , pub black_pixel : :: std :: os :: raw :: c_ulong , pub max_maps : :: std :: os :: raw :: c_int , pub min_maps : :: std :: os :: raw :: c_int , pub backing_store : :: std :: os :: raw :: c_int , pub save_unders : :: std :: os :: raw :: c_int , pub root_input_mask : :: std :: os :: raw :: c_long , } # [ test ] fn bindgen_test_layout_Screen ( ) { assert_eq ! ( :: std :: mem :: size_of :: < Screen > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( Screen ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < Screen > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( Screen ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . ext_data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( ext_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . display as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . root as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . width as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . height as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . mwidth as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( mwidth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . mheight as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( mheight ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . ndepths as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( ndepths ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . depths as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( depths ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . root_depth as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( root_depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . root_visual as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( root_visual ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . default_gc as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( default_gc ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . cmap as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( cmap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . white_pixel as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( white_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . black_pixel as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( black_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . max_maps as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( max_maps ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . min_maps as * const _ as usize } , 108usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( min_maps ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . backing_store as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( backing_store ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . save_unders as * const _ as usize } , 116usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( save_unders ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . root_input_mask as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( root_input_mask ) ) ) ; } impl Clone for Screen { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct ScreenFormat { pub ext_data : * mut XExtData , pub depth : :: std :: os :: raw :: c_int , pub bits_per_pixel : :: std :: os :: raw :: c_int , pub scanline_pad : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_ScreenFormat ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ScreenFormat > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( ScreenFormat ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ScreenFormat > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ScreenFormat ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ScreenFormat ) ) . ext_data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( ScreenFormat ) , "::" , stringify ! ( ext_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ScreenFormat ) ) . depth as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( ScreenFormat ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ScreenFormat ) ) . bits_per_pixel as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( ScreenFormat ) , "::" , stringify ! ( bits_per_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ScreenFormat ) ) . scanline_pad as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( ScreenFormat ) , "::" , stringify ! ( scanline_pad ) ) ) ; } impl Clone for ScreenFormat { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XSetWindowAttributes { pub background_pixmap : Pixmap , pub background_pixel : :: std :: os :: raw :: c_ulong , pub border_pixmap : Pixmap , pub border_pixel : :: std :: os :: raw :: c_ulong , pub bit_gravity : :: std :: os :: raw :: c_int , pub win_gravity : :: std :: os :: raw :: c_int , pub backing_store : :: std :: os :: raw :: c_int , pub backing_planes : :: std :: os :: raw :: c_ulong , pub backing_pixel : :: std :: os :: raw :: c_ulong , pub save_under : :: std :: os :: raw :: c_int , pub event_mask : :: std :: os :: raw :: c_long , pub do_not_propagate_mask : :: std :: os :: raw :: c_long , pub override_redirect : :: std :: os :: raw :: c_int , pub colormap : Colormap , pub cursor : Cursor , } # [ test ] fn bindgen_test_layout_XSetWindowAttributes ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XSetWindowAttributes > ( ) , 112usize , concat ! ( "Size of: " , stringify ! ( XSetWindowAttributes ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XSetWindowAttributes > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XSetWindowAttributes ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . background_pixmap as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( background_pixmap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . background_pixel as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( background_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . border_pixmap as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( border_pixmap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . border_pixel as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( border_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . bit_gravity as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( bit_gravity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . win_gravity as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( win_gravity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . backing_store as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( backing_store ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . backing_planes as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( backing_planes ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . backing_pixel as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( backing_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . save_under as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( save_under ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . event_mask as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( event_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . do_not_propagate_mask as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( do_not_propagate_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . override_redirect as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( override_redirect ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . colormap as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( colormap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . cursor as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( cursor ) ) ) ; } impl Clone for XSetWindowAttributes { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XWindowAttributes { pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub border_width : :: std :: os :: raw :: c_int , pub depth : :: std :: os :: raw :: c_int , pub visual : * mut Visual , pub root : Window , pub class : :: std :: os :: raw :: c_int , pub bit_gravity : :: std :: os :: raw :: c_int , pub win_gravity : :: std :: os :: raw :: c_int , pub backing_store : :: std :: os :: raw :: c_int , pub backing_planes : :: std :: os :: raw :: c_ulong , pub backing_pixel : :: std :: os :: raw :: c_ulong , pub save_under : :: std :: os :: raw :: c_int , pub colormap : Colormap , pub map_installed : :: std :: os :: raw :: c_int , pub map_state : :: std :: os :: raw :: c_int , pub all_event_masks : :: std :: os :: raw :: c_long , pub your_event_mask : :: std :: os :: raw :: c_long , pub do_not_propagate_mask : :: std :: os :: raw :: c_long , pub override_redirect : :: std :: os :: raw :: c_int , pub screen : * mut Screen , } # [ test ] fn bindgen_test_layout_XWindowAttributes ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XWindowAttributes > ( ) , 136usize , concat ! ( "Size of: " , stringify ! ( XWindowAttributes ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XWindowAttributes > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XWindowAttributes ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . y as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . width as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . height as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . border_width as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( border_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . depth as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . visual as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( visual ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . root as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . class as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( class ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . bit_gravity as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( bit_gravity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . win_gravity as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( win_gravity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . backing_store as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( backing_store ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . backing_planes as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( backing_planes ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . backing_pixel as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( backing_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . save_under as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( save_under ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . colormap as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( colormap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . map_installed as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( map_installed ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . map_state as * const _ as usize } , 92usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( map_state ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . all_event_masks as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( all_event_masks ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . your_event_mask as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( your_event_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . do_not_propagate_mask as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( do_not_propagate_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . override_redirect as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( override_redirect ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . screen as * const _ as usize } , 128usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( screen ) ) ) ; } impl Clone for XWindowAttributes { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XHostAddress { pub family : :: std :: os :: raw :: c_int , pub length : :: std :: os :: raw :: c_int , pub address : * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_XHostAddress ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XHostAddress > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XHostAddress ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XHostAddress > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XHostAddress ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XHostAddress ) ) . family as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XHostAddress ) , "::" , stringify ! ( family ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XHostAddress ) ) . length as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XHostAddress ) , "::" , stringify ! ( length ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XHostAddress ) ) . address as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XHostAddress ) , "::" , stringify ! ( address ) ) ) ; } impl Clone for XHostAddress { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XServerInterpretedAddress { pub typelength : :: std :: os :: raw :: c_int , pub valuelength : :: std :: os :: raw :: c_int , pub type_ : * mut :: std :: os :: raw :: c_char , pub value : * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_XServerInterpretedAddress ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XServerInterpretedAddress > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( XServerInterpretedAddress ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XServerInterpretedAddress > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XServerInterpretedAddress ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XServerInterpretedAddress ) ) . typelength as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XServerInterpretedAddress ) , "::" , stringify ! ( typelength ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XServerInterpretedAddress ) ) . valuelength as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XServerInterpretedAddress ) , "::" , stringify ! ( valuelength ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XServerInterpretedAddress ) ) . type_ as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XServerInterpretedAddress ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XServerInterpretedAddress ) ) . value as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XServerInterpretedAddress ) , "::" , stringify ! ( value ) ) ) ; } impl Clone for XServerInterpretedAddress { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XImage { pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub xoffset : :: std :: os :: raw :: c_int , pub format : :: std :: os :: raw :: c_int , pub data : * mut :: std :: os :: raw :: c_char , pub byte_order : :: std :: os :: raw :: c_int , pub bitmap_unit : :: std :: os :: raw :: c_int , pub bitmap_bit_order : :: std :: os :: raw :: c_int , pub bitmap_pad : :: std :: os :: raw :: c_int , pub depth : :: std :: os :: raw :: c_int , pub bytes_per_line : :: std :: os :: raw :: c_int , pub bits_per_pixel : :: std :: os :: raw :: c_int , pub red_mask : :: std :: os :: raw :: c_ulong , pub green_mask : :: std :: os :: raw :: c_ulong , pub blue_mask : :: std :: os :: raw :: c_ulong , pub obdata : XPointer , pub f : _XImage_funcs , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XImage_funcs { pub create_image : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XDisplay , arg2 : * mut Visual , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_char , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_uint , arg9 : :: std :: os :: raw :: c_int , arg10 : :: std :: os :: raw :: c_int ) -> * mut _XImage > , pub destroy_image : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XImage ) -> :: std :: os :: raw :: c_int > , pub get_pixel : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XImage , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_ulong > , pub put_pixel : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XImage , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_ulong ) -> :: std :: os :: raw :: c_int > , pub sub_image : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XImage , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint ) -> * mut _XImage > , pub add_pixel : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XImage , arg2 : :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_int > , } # [ test ] fn bindgen_test_layout__XImage_funcs ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XImage_funcs > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( _XImage_funcs ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XImage_funcs > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XImage_funcs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage_funcs ) ) . create_image as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage_funcs ) , "::" , stringify ! ( create_image ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage_funcs ) ) . destroy_image as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage_funcs ) , "::" , stringify ! ( destroy_image ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage_funcs ) ) . get_pixel as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage_funcs ) , "::" , stringify ! ( get_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage_funcs ) ) . put_pixel as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage_funcs ) , "::" , stringify ! ( put_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage_funcs ) ) . sub_image as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage_funcs ) , "::" , stringify ! ( sub_image ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage_funcs ) ) . add_pixel as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage_funcs ) , "::" , stringify ! ( add_pixel ) ) ) ; } impl Clone for _XImage_funcs { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout__XImage ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XImage > ( ) , 136usize , concat ! ( "Size of: " , stringify ! ( _XImage ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XImage > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XImage ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . width as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . height as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . xoffset as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( xoffset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . format as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( format ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . data as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . byte_order as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( byte_order ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . bitmap_unit as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( bitmap_unit ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . bitmap_bit_order as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( bitmap_bit_order ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . bitmap_pad as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( bitmap_pad ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . depth as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . bytes_per_line as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( bytes_per_line ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . bits_per_pixel as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( bits_per_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . red_mask as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( red_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . green_mask as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( green_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . blue_mask as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( blue_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . obdata as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( obdata ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . f as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( f ) ) ) ; } impl Clone for _XImage { fn clone ( & self ) -> Self { * self } } pub type XImage = _XImage ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XWindowChanges { pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub border_width : :: std :: os :: raw :: c_int , pub sibling : Window , pub stack_mode : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XWindowChanges ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XWindowChanges > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( XWindowChanges ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XWindowChanges > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XWindowChanges ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowChanges ) ) . x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowChanges ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowChanges ) ) . y as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowChanges ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowChanges ) ) . width as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowChanges ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowChanges ) ) . height as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowChanges ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowChanges ) ) . border_width as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowChanges ) , "::" , stringify ! ( border_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowChanges ) ) . sibling as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowChanges ) , "::" , stringify ! ( sibling ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowChanges ) ) . stack_mode as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowChanges ) , "::" , stringify ! ( stack_mode ) ) ) ; } impl Clone for XWindowChanges { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XColor { pub pixel : :: std :: os :: raw :: c_ulong , pub red : :: std :: os :: raw :: c_ushort , pub green : :: std :: os :: raw :: c_ushort , pub blue : :: std :: os :: raw :: c_ushort , pub flags : :: std :: os :: raw :: c_char , pub pad : :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_XColor ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XColor > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XColor ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XColor > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XColor ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColor ) ) . pixel as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XColor ) , "::" , stringify ! ( pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColor ) ) . red as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XColor ) , "::" , stringify ! ( red ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColor ) ) . green as * const _ as usize } , 10usize , concat ! ( "Alignment of field: " , stringify ! ( XColor ) , "::" , stringify ! ( green ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColor ) ) . blue as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XColor ) , "::" , stringify ! ( blue ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColor ) ) . flags as * const _ as usize } , 14usize , concat ! ( "Alignment of field: " , stringify ! ( XColor ) , "::" , stringify ! ( flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColor ) ) . pad as * const _ as usize } , 15usize , concat ! ( "Alignment of field: " , stringify ! ( XColor ) , "::" , stringify ! ( pad ) ) ) ; } impl Clone for XColor { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XSegment { pub x1 : :: std :: os :: raw :: c_short , pub y1 : :: std :: os :: raw :: c_short , pub x2 : :: std :: os :: raw :: c_short , pub y2 : :: std :: os :: raw :: c_short , } # [ test ] fn bindgen_test_layout_XSegment ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XSegment > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( XSegment ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XSegment > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( XSegment ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSegment ) ) . x1 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XSegment ) , "::" , stringify ! ( x1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSegment ) ) . y1 as * const _ as usize } , 2usize , concat ! ( "Alignment of field: " , stringify ! ( XSegment ) , "::" , stringify ! ( y1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSegment ) ) . x2 as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XSegment ) , "::" , stringify ! ( x2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSegment ) ) . y2 as * const _ as usize } , 6usize , concat ! ( "Alignment of field: " , stringify ! ( XSegment ) , "::" , stringify ! ( y2 ) ) ) ; } impl Clone for XSegment { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XPoint { pub x : :: std :: os :: raw :: c_short , pub y : :: std :: os :: raw :: c_short , } # [ test ] fn bindgen_test_layout_XPoint ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XPoint > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( XPoint ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XPoint > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( XPoint ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPoint ) ) . x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XPoint ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPoint ) ) . y as * const _ as usize } , 2usize , concat ! ( "Alignment of field: " , stringify ! ( XPoint ) , "::" , stringify ! ( y ) ) ) ; } impl Clone for XPoint { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XRectangle { pub x : :: std :: os :: raw :: c_short , pub y : :: std :: os :: raw :: c_short , pub width : :: std :: os :: raw :: c_ushort , pub height : :: std :: os :: raw :: c_ushort , } # [ test ] fn bindgen_test_layout_XRectangle ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XRectangle > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( XRectangle ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XRectangle > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( XRectangle ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XRectangle ) ) . x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XRectangle ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XRectangle ) ) . y as * const _ as usize } , 2usize , concat ! ( "Alignment of field: " , stringify ! ( XRectangle ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XRectangle ) ) . width as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XRectangle ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XRectangle ) ) . height as * const _ as usize } , 6usize , concat ! ( "Alignment of field: " , stringify ! ( XRectangle ) , "::" , stringify ! ( height ) ) ) ; } impl Clone for XRectangle { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XArc { pub x : :: std :: os :: raw :: c_short , pub y : :: std :: os :: raw :: c_short , pub width : :: std :: os :: raw :: c_ushort , pub height : :: std :: os :: raw :: c_ushort , pub angle1 : :: std :: os :: raw :: c_short , pub angle2 : :: std :: os :: raw :: c_short , } # [ test ] fn bindgen_test_layout_XArc ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XArc > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( XArc ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XArc > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( XArc ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XArc ) ) . x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XArc ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XArc ) ) . y as * const _ as usize } , 2usize , concat ! ( "Alignment of field: " , stringify ! ( XArc ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XArc ) ) . width as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XArc ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XArc ) ) . height as * const _ as usize } , 6usize , concat ! ( "Alignment of field: " , stringify ! ( XArc ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XArc ) ) . angle1 as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XArc ) , "::" , stringify ! ( angle1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XArc ) ) . angle2 as * const _ as usize } , 10usize , concat ! ( "Alignment of field: " , stringify ! ( XArc ) , "::" , stringify ! ( angle2 ) ) ) ; } impl Clone for XArc { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XKeyboardControl { pub key_click_percent : :: std :: os :: raw :: c_int , pub bell_percent : :: std :: os :: raw :: c_int , pub bell_pitch : :: std :: os :: raw :: c_int , pub bell_duration : :: std :: os :: raw :: c_int , pub led : :: std :: os :: raw :: c_int , pub led_mode : :: std :: os :: raw :: c_int , pub key : :: std :: os :: raw :: c_int , pub auto_repeat_mode : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XKeyboardControl ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XKeyboardControl > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( XKeyboardControl ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XKeyboardControl > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( XKeyboardControl ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . key_click_percent as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( key_click_percent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . bell_percent as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( bell_percent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . bell_pitch as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( bell_pitch ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . bell_duration as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( bell_duration ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . led as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( led ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . led_mode as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( led_mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . key as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( key ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . auto_repeat_mode as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( auto_repeat_mode ) ) ) ; } impl Clone for XKeyboardControl { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XKeyboardState { pub key_click_percent : :: std :: os :: raw :: c_int , pub bell_percent : :: std :: os :: raw :: c_int , pub bell_pitch : :: std :: os :: raw :: c_uint , pub bell_duration : :: std :: os :: raw :: c_uint , pub led_mask : :: std :: os :: raw :: c_ulong , pub global_auto_repeat : :: std :: os :: raw :: c_int , pub auto_repeats : [ :: std :: os :: raw :: c_char ; 32usize ] , } # [ test ] fn bindgen_test_layout_XKeyboardState ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XKeyboardState > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( XKeyboardState ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XKeyboardState > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XKeyboardState ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardState ) ) . key_click_percent as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardState ) , "::" , stringify ! ( key_click_percent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardState ) ) . bell_percent as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardState ) , "::" , stringify ! ( bell_percent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardState ) ) . bell_pitch as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardState ) , "::" , stringify ! ( bell_pitch ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardState ) ) . bell_duration as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardState ) , "::" , stringify ! ( bell_duration ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardState ) ) . led_mask as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardState ) , "::" , stringify ! ( led_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardState ) ) . global_auto_repeat as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardState ) , "::" , stringify ! ( global_auto_repeat ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardState ) ) . auto_repeats as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardState ) , "::" , stringify ! ( auto_repeats ) ) ) ; } impl Clone for XKeyboardState { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XTimeCoord { pub time : Time , pub x : :: std :: os :: raw :: c_short , pub y : :: std :: os :: raw :: c_short , } # [ test ] fn bindgen_test_layout_XTimeCoord ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XTimeCoord > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XTimeCoord ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XTimeCoord > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XTimeCoord ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTimeCoord ) ) . time as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XTimeCoord ) , "::" , stringify ! ( time ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTimeCoord ) ) . x as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XTimeCoord ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTimeCoord ) ) . y as * const _ as usize } , 10usize , concat ! ( "Alignment of field: " , stringify ! ( XTimeCoord ) , "::" , stringify ! ( y ) ) ) ; } impl Clone for XTimeCoord { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XModifierKeymap { pub max_keypermod : :: std :: os :: raw :: c_int , pub modifiermap : * mut KeyCode , } # [ test ] fn bindgen_test_layout_XModifierKeymap ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XModifierKeymap > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XModifierKeymap ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XModifierKeymap > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XModifierKeymap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XModifierKeymap ) ) . max_keypermod as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XModifierKeymap ) , "::" , stringify ! ( max_keypermod ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XModifierKeymap ) ) . modifiermap as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XModifierKeymap ) , "::" , stringify ! ( modifiermap ) ) ) ; } impl Clone for XModifierKeymap { fn clone ( & self ) -> Self { * self } } pub type Display = _XDisplay ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XPrivate { _unused : [ u8 ; 0 ] } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XrmHashBucketRec { _unused : [ u8 ; 0 ] } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _bindgen_ty_1 { pub ext_data : * mut XExtData , pub private1 : * mut _XPrivate , pub fd : :: std :: os :: raw :: c_int , pub private2 : :: std :: os :: raw :: c_int , pub proto_major_version : :: std :: os :: raw :: c_int , pub proto_minor_version : :: std :: os :: raw :: c_int , pub vendor : * mut :: std :: os :: raw :: c_char , pub private3 : XID , pub private4 : XID , pub private5 : XID , pub private6 : :: std :: os :: raw :: c_int , pub resource_alloc : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XDisplay ) -> XID > , pub byte_order : :: std :: os :: raw :: c_int , pub bitmap_unit : :: std :: os :: raw :: c_int , pub bitmap_pad : :: std :: os :: raw :: c_int , pub bitmap_bit_order : :: std :: os :: raw :: c_int , pub nformats : :: std :: os :: raw :: c_int , pub pixmap_format : * mut ScreenFormat , pub private8 : :: std :: os :: raw :: c_int , pub release : :: std :: os :: raw :: c_int , pub private9 : * mut _XPrivate , pub private10 : * mut _XPrivate , pub qlen : :: std :: os :: raw :: c_int , pub last_request_read : :: std :: os :: raw :: c_ulong , pub request : :: std :: os :: raw :: c_ulong , pub private11 : XPointer , pub private12 : XPointer , pub private13 : XPointer , pub private14 : XPointer , pub max_request_size : :: std :: os :: raw :: c_uint , pub db : * mut _XrmHashBucketRec , pub private15 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XDisplay ) -> :: std :: os :: raw :: c_int > , pub display_name : * mut :: std :: os :: raw :: c_char , pub default_screen : :: std :: os :: raw :: c_int , pub nscreens : :: std :: os :: raw :: c_int , pub screens : * mut Screen , pub motion_buffer : :: std :: os :: raw :: c_ulong , pub private16 : :: std :: os :: raw :: c_ulong , pub min_keycode : :: std :: os :: raw :: c_int , pub max_keycode : :: std :: os :: raw :: c_int , pub private17 : XPointer , pub private18 : XPointer , pub private19 : :: std :: os :: raw :: c_int , pub xdefaults : * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _bindgen_ty_1 > ( ) , 296usize , concat ! ( "Size of: " , stringify ! ( _bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . ext_data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( ext_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private1 as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . fd as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( fd ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private2 as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . proto_major_version as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( proto_major_version ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . proto_minor_version as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( proto_minor_version ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . vendor as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( vendor ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private3 as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private4 as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private5 as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private6 as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . resource_alloc as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( resource_alloc ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . byte_order as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( byte_order ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . bitmap_unit as * const _ as usize } , 84usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( bitmap_unit ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . bitmap_pad as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( bitmap_pad ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . bitmap_bit_order as * const _ as usize } , 92usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( bitmap_bit_order ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . nformats as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( nformats ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . pixmap_format as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( pixmap_format ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private8 as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . release as * const _ as usize } , 116usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( release ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private9 as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private9 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private10 as * const _ as usize } , 128usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private10 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . qlen as * const _ as usize } , 136usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( qlen ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . last_request_read as * const _ as usize } , 144usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( last_request_read ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . request as * const _ as usize } , 152usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( request ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private11 as * const _ as usize } , 160usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private11 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private12 as * const _ as usize } , 168usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private12 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private13 as * const _ as usize } , 176usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private13 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private14 as * const _ as usize } , 184usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private14 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . max_request_size as * const _ as usize } , 192usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( max_request_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . db as * const _ as usize } , 200usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( db ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private15 as * const _ as usize } , 208usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private15 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . display_name as * const _ as usize } , 216usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( display_name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . default_screen as * const _ as usize } , 224usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( default_screen ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . nscreens as * const _ as usize } , 228usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( nscreens ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . screens as * const _ as usize } , 232usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( screens ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . motion_buffer as * const _ as usize } , 240usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( motion_buffer ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private16 as * const _ as usize } , 248usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private16 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . min_keycode as * const _ as usize } , 256usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( min_keycode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . max_keycode as * const _ as usize } , 260usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( max_keycode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private17 as * const _ as usize } , 264usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private17 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private18 as * const _ as usize } , 272usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private18 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private19 as * const _ as usize } , 280usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private19 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . xdefaults as * const _ as usize } , 288usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( xdefaults ) ) ) ; } impl Clone for _bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } pub type _XPrivDisplay = * mut _bindgen_ty_1 ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XKeyEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub root : Window , pub subwindow : Window , pub time : Time , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub x_root : :: std :: os :: raw :: c_int , pub y_root : :: std :: os :: raw :: c_int , pub state : :: std :: os :: raw :: c_uint , pub keycode : :: std :: os :: raw :: c_uint , pub same_screen : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XKeyEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XKeyEvent > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( XKeyEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XKeyEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XKeyEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . root as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . subwindow as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( subwindow ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . time as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( time ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . x as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . y as * const _ as usize } , 68usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . x_root as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( x_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . y_root as * const _ as usize } , 76usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( y_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . state as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( state ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . keycode as * const _ as usize } , 84usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( keycode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . same_screen as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( same_screen ) ) ) ; } impl Clone for XKeyEvent { fn clone ( & self ) -> Self { * self } } pub type XKeyPressedEvent = XKeyEvent ; pub type XKeyReleasedEvent = XKeyEvent ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XButtonEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub root : Window , pub subwindow : Window , pub time : Time , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub x_root : :: std :: os :: raw :: c_int , pub y_root : :: std :: os :: raw :: c_int , pub state : :: std :: os :: raw :: c_uint , pub button : :: std :: os :: raw :: c_uint , pub same_screen : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XButtonEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XButtonEvent > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( XButtonEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XButtonEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XButtonEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . root as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . subwindow as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( subwindow ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . time as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( time ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . x as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . y as * const _ as usize } , 68usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . x_root as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( x_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . y_root as * const _ as usize } , 76usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( y_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . state as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( state ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . button as * const _ as usize } , 84usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( button ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . same_screen as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( same_screen ) ) ) ; } impl Clone for XButtonEvent { fn clone ( & self ) -> Self { * self } } pub type XButtonPressedEvent = XButtonEvent ; pub type XButtonReleasedEvent = XButtonEvent ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XMotionEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub root : Window , pub subwindow : Window , pub time : Time , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub x_root : :: std :: os :: raw :: c_int , pub y_root : :: std :: os :: raw :: c_int , pub state : :: std :: os :: raw :: c_uint , pub is_hint : :: std :: os :: raw :: c_char , pub same_screen : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XMotionEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XMotionEvent > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( XMotionEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XMotionEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XMotionEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . root as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . subwindow as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( subwindow ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . time as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( time ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . x as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . y as * const _ as usize } , 68usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . x_root as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( x_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . y_root as * const _ as usize } , 76usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( y_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . state as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( state ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . is_hint as * const _ as usize } , 84usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( is_hint ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . same_screen as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( same_screen ) ) ) ; } impl Clone for XMotionEvent { fn clone ( & self ) -> Self { * self } } pub type XPointerMovedEvent = XMotionEvent ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XCrossingEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub root : Window , pub subwindow : Window , pub time : Time , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub x_root : :: std :: os :: raw :: c_int , pub y_root : :: std :: os :: raw :: c_int , pub mode : :: std :: os :: raw :: c_int , pub detail : :: std :: os :: raw :: c_int , pub same_screen : :: std :: os :: raw :: c_int , pub focus : :: std :: os :: raw :: c_int , pub state : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout_XCrossingEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XCrossingEvent > ( ) , 104usize , concat ! ( "Size of: " , stringify ! ( XCrossingEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XCrossingEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XCrossingEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . root as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . subwindow as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( subwindow ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . time as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( time ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . x as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . y as * const _ as usize } , 68usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . x_root as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( x_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . y_root as * const _ as usize } , 76usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( y_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . mode as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . detail as * const _ as usize } , 84usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( detail ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . same_screen as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( same_screen ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . focus as * const _ as usize } , 92usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( focus ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . state as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( state ) ) ) ; } impl Clone for XCrossingEvent { fn clone ( & self ) -> Self { * self } } pub type XEnterWindowEvent = XCrossingEvent ; pub type XLeaveWindowEvent = XCrossingEvent ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XFocusChangeEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub mode : :: std :: os :: raw :: c_int , pub detail : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XFocusChangeEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XFocusChangeEvent > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( XFocusChangeEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XFocusChangeEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XFocusChangeEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFocusChangeEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XFocusChangeEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFocusChangeEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XFocusChangeEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFocusChangeEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XFocusChangeEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFocusChangeEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XFocusChangeEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFocusChangeEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XFocusChangeEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFocusChangeEvent ) ) . mode as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XFocusChangeEvent ) , "::" , stringify ! ( mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFocusChangeEvent ) ) . detail as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XFocusChangeEvent ) , "::" , stringify ! ( detail ) ) ) ; } impl Clone for XFocusChangeEvent { fn clone ( & self ) -> Self { * self } } pub type XFocusInEvent = XFocusChangeEvent ; pub type XFocusOutEvent = XFocusChangeEvent ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XKeymapEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub key_vector : [ :: std :: os :: raw :: c_char ; 32usize ] , } # [ test ] fn bindgen_test_layout_XKeymapEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XKeymapEvent > ( ) , 72usize , concat ! ( "Size of: " , stringify ! ( XKeymapEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XKeymapEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XKeymapEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeymapEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XKeymapEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeymapEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XKeymapEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeymapEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XKeymapEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeymapEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XKeymapEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeymapEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XKeymapEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeymapEvent ) ) . key_vector as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XKeymapEvent ) , "::" , stringify ! ( key_vector ) ) ) ; } impl Clone for XKeymapEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XExposeEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub count : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XExposeEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XExposeEvent > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( XExposeEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XExposeEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XExposeEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . x as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . y as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . width as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . height as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . count as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( count ) ) ) ; } impl Clone for XExposeEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XGraphicsExposeEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub drawable : Drawable , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub count : :: std :: os :: raw :: c_int , pub major_code : :: std :: os :: raw :: c_int , pub minor_code : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XGraphicsExposeEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XGraphicsExposeEvent > ( ) , 72usize , concat ! ( "Size of: " , stringify ! ( XGraphicsExposeEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XGraphicsExposeEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XGraphicsExposeEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . drawable as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( drawable ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . x as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . y as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . width as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . height as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . count as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( count ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . major_code as * const _ as usize } , 60usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( major_code ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . minor_code as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( minor_code ) ) ) ; } impl Clone for XGraphicsExposeEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XNoExposeEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub drawable : Drawable , pub major_code : :: std :: os :: raw :: c_int , pub minor_code : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XNoExposeEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XNoExposeEvent > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( XNoExposeEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XNoExposeEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XNoExposeEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XNoExposeEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XNoExposeEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XNoExposeEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XNoExposeEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XNoExposeEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XNoExposeEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XNoExposeEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XNoExposeEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XNoExposeEvent ) ) . drawable as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XNoExposeEvent ) , "::" , stringify ! ( drawable ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XNoExposeEvent ) ) . major_code as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XNoExposeEvent ) , "::" , stringify ! ( major_code ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XNoExposeEvent ) ) . minor_code as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XNoExposeEvent ) , "::" , stringify ! ( minor_code ) ) ) ; } impl Clone for XNoExposeEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XVisibilityEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub state : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XVisibilityEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XVisibilityEvent > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( XVisibilityEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XVisibilityEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XVisibilityEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisibilityEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XVisibilityEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisibilityEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XVisibilityEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisibilityEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XVisibilityEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisibilityEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XVisibilityEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisibilityEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XVisibilityEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisibilityEvent ) ) . state as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XVisibilityEvent ) , "::" , stringify ! ( state ) ) ) ; } impl Clone for XVisibilityEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XCreateWindowEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub parent : Window , pub window : Window , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub border_width : :: std :: os :: raw :: c_int , pub override_redirect : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XCreateWindowEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XCreateWindowEvent > ( ) , 72usize , concat ! ( "Size of: " , stringify ! ( XCreateWindowEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XCreateWindowEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XCreateWindowEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . parent as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( parent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . x as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . y as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . width as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . height as * const _ as usize } , 60usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . border_width as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( border_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . override_redirect as * const _ as usize } , 68usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( override_redirect ) ) ) ; } impl Clone for XCreateWindowEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XDestroyWindowEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub event : Window , pub window : Window , } # [ test ] fn bindgen_test_layout_XDestroyWindowEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XDestroyWindowEvent > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( XDestroyWindowEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XDestroyWindowEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XDestroyWindowEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XDestroyWindowEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XDestroyWindowEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XDestroyWindowEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XDestroyWindowEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XDestroyWindowEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XDestroyWindowEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XDestroyWindowEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XDestroyWindowEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XDestroyWindowEvent ) ) . event as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XDestroyWindowEvent ) , "::" , stringify ! ( event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XDestroyWindowEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XDestroyWindowEvent ) , "::" , stringify ! ( window ) ) ) ; } impl Clone for XDestroyWindowEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XUnmapEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub event : Window , pub window : Window , pub from_configure : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XUnmapEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XUnmapEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XUnmapEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XUnmapEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XUnmapEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XUnmapEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XUnmapEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XUnmapEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XUnmapEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XUnmapEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XUnmapEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XUnmapEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XUnmapEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XUnmapEvent ) ) . event as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XUnmapEvent ) , "::" , stringify ! ( event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XUnmapEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XUnmapEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XUnmapEvent ) ) . from_configure as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XUnmapEvent ) , "::" , stringify ! ( from_configure ) ) ) ; } impl Clone for XUnmapEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XMapEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub event : Window , pub window : Window , pub override_redirect : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XMapEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XMapEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XMapEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XMapEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XMapEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XMapEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XMapEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XMapEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XMapEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapEvent ) ) . event as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XMapEvent ) , "::" , stringify ! ( event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XMapEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapEvent ) ) . override_redirect as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XMapEvent ) , "::" , stringify ! ( override_redirect ) ) ) ; } impl Clone for XMapEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XMapRequestEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub parent : Window , pub window : Window , } # [ test ] fn bindgen_test_layout_XMapRequestEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XMapRequestEvent > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( XMapRequestEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XMapRequestEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XMapRequestEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapRequestEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XMapRequestEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapRequestEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XMapRequestEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapRequestEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XMapRequestEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapRequestEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XMapRequestEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapRequestEvent ) ) . parent as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XMapRequestEvent ) , "::" , stringify ! ( parent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapRequestEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XMapRequestEvent ) , "::" , stringify ! ( window ) ) ) ; } impl Clone for XMapRequestEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XReparentEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub event : Window , pub window : Window , pub parent : Window , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub override_redirect : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XReparentEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XReparentEvent > ( ) , 72usize , concat ! ( "Size of: " , stringify ! ( XReparentEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XReparentEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XReparentEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . event as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . parent as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( parent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . x as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . y as * const _ as usize } , 60usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . override_redirect as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( override_redirect ) ) ) ; } impl Clone for XReparentEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XConfigureEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub event : Window , pub window : Window , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub border_width : :: std :: os :: raw :: c_int , pub above : Window , pub override_redirect : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XConfigureEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XConfigureEvent > ( ) , 88usize , concat ! ( "Size of: " , stringify ! ( XConfigureEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XConfigureEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XConfigureEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . event as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . x as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . y as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . width as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . height as * const _ as usize } , 60usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . border_width as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( border_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . above as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( above ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . override_redirect as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( override_redirect ) ) ) ; } impl Clone for XConfigureEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XGravityEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub event : Window , pub window : Window , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XGravityEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XGravityEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XGravityEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XGravityEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XGravityEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . event as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . x as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . y as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( y ) ) ) ; } impl Clone for XGravityEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XResizeRequestEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XResizeRequestEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XResizeRequestEvent > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( XResizeRequestEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XResizeRequestEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XResizeRequestEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XResizeRequestEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XResizeRequestEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XResizeRequestEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XResizeRequestEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XResizeRequestEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XResizeRequestEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XResizeRequestEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XResizeRequestEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XResizeRequestEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XResizeRequestEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XResizeRequestEvent ) ) . width as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XResizeRequestEvent ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XResizeRequestEvent ) ) . height as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XResizeRequestEvent ) , "::" , stringify ! ( height ) ) ) ; } impl Clone for XResizeRequestEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XConfigureRequestEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub parent : Window , pub window : Window , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub border_width : :: std :: os :: raw :: c_int , pub above : Window , pub detail : :: std :: os :: raw :: c_int , pub value_mask : :: std :: os :: raw :: c_ulong , } # [ test ] fn bindgen_test_layout_XConfigureRequestEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XConfigureRequestEvent > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( XConfigureRequestEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XConfigureRequestEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XConfigureRequestEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . parent as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( parent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . x as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . y as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . width as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . height as * const _ as usize } , 60usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . border_width as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( border_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . above as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( above ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . detail as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( detail ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . value_mask as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( value_mask ) ) ) ; } impl Clone for XConfigureRequestEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XCirculateEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub event : Window , pub window : Window , pub place : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XCirculateEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XCirculateEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XCirculateEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XCirculateEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XCirculateEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateEvent ) ) . event as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateEvent ) , "::" , stringify ! ( event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateEvent ) ) . place as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateEvent ) , "::" , stringify ! ( place ) ) ) ; } impl Clone for XCirculateEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XCirculateRequestEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub parent : Window , pub window : Window , pub place : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XCirculateRequestEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XCirculateRequestEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XCirculateRequestEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XCirculateRequestEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XCirculateRequestEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateRequestEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateRequestEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateRequestEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateRequestEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateRequestEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateRequestEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateRequestEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateRequestEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateRequestEvent ) ) . parent as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateRequestEvent ) , "::" , stringify ! ( parent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateRequestEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateRequestEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateRequestEvent ) ) . place as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateRequestEvent ) , "::" , stringify ! ( place ) ) ) ; } impl Clone for XCirculateRequestEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XPropertyEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub atom : Atom , pub time : Time , pub state : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XPropertyEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XPropertyEvent > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( XPropertyEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XPropertyEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XPropertyEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . atom as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( atom ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . time as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( time ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . state as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( state ) ) ) ; } impl Clone for XPropertyEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XSelectionClearEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub selection : Atom , pub time : Time , } # [ test ] fn bindgen_test_layout_XSelectionClearEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XSelectionClearEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XSelectionClearEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XSelectionClearEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XSelectionClearEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionClearEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionClearEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionClearEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionClearEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionClearEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionClearEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionClearEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionClearEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionClearEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionClearEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionClearEvent ) ) . selection as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionClearEvent ) , "::" , stringify ! ( selection ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionClearEvent ) ) . time as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionClearEvent ) , "::" , stringify ! ( time ) ) ) ; } impl Clone for XSelectionClearEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XSelectionRequestEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub owner : Window , pub requestor : Window , pub selection : Atom , pub target : Atom , pub property : Atom , pub time : Time , } # [ test ] fn bindgen_test_layout_XSelectionRequestEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XSelectionRequestEvent > ( ) , 80usize , concat ! ( "Size of: " , stringify ! ( XSelectionRequestEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XSelectionRequestEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XSelectionRequestEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . owner as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( owner ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . requestor as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( requestor ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . selection as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( selection ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . target as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( target ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . property as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( property ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . time as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( time ) ) ) ; } impl Clone for XSelectionRequestEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XSelectionEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub requestor : Window , pub selection : Atom , pub target : Atom , pub property : Atom , pub time : Time , } # [ test ] fn bindgen_test_layout_XSelectionEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XSelectionEvent > ( ) , 72usize , concat ! ( "Size of: " , stringify ! ( XSelectionEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XSelectionEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XSelectionEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . requestor as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( requestor ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . selection as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( selection ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . target as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( target ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . property as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( property ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . time as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( time ) ) ) ; } impl Clone for XSelectionEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XColormapEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub colormap : Colormap , pub new : :: std :: os :: raw :: c_int , pub state : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XColormapEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XColormapEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XColormapEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XColormapEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XColormapEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . colormap as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( colormap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . new as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( new ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . state as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( state ) ) ) ; } impl Clone for XColormapEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub struct XClientMessageEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub message_type : Atom , pub format : :: std :: os :: raw :: c_int , pub data : XClientMessageEvent__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union XClientMessageEvent__bindgen_ty_1 { pub b : [ :: std :: os :: raw :: c_char ; 20usize ] , pub s : [ :: std :: os :: raw :: c_short ; 10usize ] , pub l : [ :: std :: os :: raw :: c_long ; 5usize ] , _bindgen_union_align : [ u64 ; 5usize ] , } # [ test ] fn bindgen_test_layout_XClientMessageEvent__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XClientMessageEvent__bindgen_ty_1 > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( XClientMessageEvent__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XClientMessageEvent__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XClientMessageEvent__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent__bindgen_ty_1 ) ) . b as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent__bindgen_ty_1 ) , "::" , stringify ! ( b ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent__bindgen_ty_1 ) ) . s as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent__bindgen_ty_1 ) , "::" , stringify ! ( s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent__bindgen_ty_1 ) ) . l as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent__bindgen_ty_1 ) , "::" , stringify ! ( l ) ) ) ; } impl Clone for XClientMessageEvent__bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout_XClientMessageEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XClientMessageEvent > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( XClientMessageEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XClientMessageEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XClientMessageEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . message_type as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( message_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . format as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( format ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . data as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( data ) ) ) ; } impl Clone for XClientMessageEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XMappingEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub request : :: std :: os :: raw :: c_int , pub first_keycode : :: std :: os :: raw :: c_int , pub count : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XMappingEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XMappingEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XMappingEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XMappingEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XMappingEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . request as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( request ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . first_keycode as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( first_keycode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . count as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( count ) ) ) ; } impl Clone for XMappingEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XErrorEvent { pub type_ : :: std :: os :: raw :: c_int , pub display : * mut Display , pub resourceid : XID , pub serial : :: std :: os :: raw :: c_ulong , pub error_code : :: std :: os :: raw :: c_uchar , pub request_code : :: std :: os :: raw :: c_uchar , pub minor_code : :: std :: os :: raw :: c_uchar , } # [ test ] fn bindgen_test_layout_XErrorEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XErrorEvent > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( XErrorEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XErrorEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XErrorEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XErrorEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XErrorEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XErrorEvent ) ) . display as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XErrorEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XErrorEvent ) ) . resourceid as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XErrorEvent ) , "::" , stringify ! ( resourceid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XErrorEvent ) ) . serial as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XErrorEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XErrorEvent ) ) . error_code as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XErrorEvent ) , "::" , stringify ! ( error_code ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XErrorEvent ) ) . request_code as * const _ as usize } , 33usize , concat ! ( "Alignment of field: " , stringify ! ( XErrorEvent ) , "::" , stringify ! ( request_code ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XErrorEvent ) ) . minor_code as * const _ as usize } , 34usize , concat ! ( "Alignment of field: " , stringify ! ( XErrorEvent ) , "::" , stringify ! ( minor_code ) ) ) ; } impl Clone for XErrorEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XAnyEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , } # [ test ] fn bindgen_test_layout_XAnyEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XAnyEvent > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( XAnyEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XAnyEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XAnyEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XAnyEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XAnyEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XAnyEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XAnyEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XAnyEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XAnyEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XAnyEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XAnyEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XAnyEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XAnyEvent ) , "::" , stringify ! ( window ) ) ) ; } impl Clone for XAnyEvent { fn clone ( & self ) -> Self { * self } } 
 /// GenericEvent.  This event is the standard event for all newer extensions. 
 # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XGenericEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub extension : :: std :: os :: raw :: c_int , pub evtype : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XGenericEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XGenericEvent > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( XGenericEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XGenericEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XGenericEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEvent ) ) . extension as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEvent ) , "::" , stringify ! ( extension ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEvent ) ) . evtype as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEvent ) , "::" , stringify ! ( evtype ) ) ) ; } impl Clone for XGenericEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XGenericEventCookie { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub extension : :: std :: os :: raw :: c_int , pub evtype : :: std :: os :: raw :: c_int , pub cookie : :: std :: os :: raw :: c_uint , pub data : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_XGenericEventCookie ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XGenericEventCookie > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XGenericEventCookie ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XGenericEventCookie > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XGenericEventCookie ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . extension as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( extension ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . evtype as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( evtype ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . cookie as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( cookie ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . data as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( data ) ) ) ; } impl Clone for XGenericEventCookie { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union _XEvent { pub type_ : :: std :: os :: raw :: c_int , pub xany : XAnyEvent , pub xkey : XKeyEvent , pub xbutton : XButtonEvent , pub xmotion : XMotionEvent , pub xcrossing : XCrossingEvent , pub xfocus : XFocusChangeEvent , pub xexpose : XExposeEvent , pub xgraphicsexpose : XGraphicsExposeEvent , pub xnoexpose : XNoExposeEvent , pub xvisibility : XVisibilityEvent , pub xcreatewindow : XCreateWindowEvent , pub xdestroywindow : XDestroyWindowEvent , pub xunmap : XUnmapEvent , pub xmap : XMapEvent , pub xmaprequest : XMapRequestEvent , pub xreparent : XReparentEvent , pub xconfigure : XConfigureEvent , pub xgravity : XGravityEvent , pub xresizerequest : XResizeRequestEvent , pub xconfigurerequest : XConfigureRequestEvent , pub xcirculate : XCirculateEvent , pub xcirculaterequest : XCirculateRequestEvent , pub xproperty : XPropertyEvent , pub xselectionclear : XSelectionClearEvent , pub xselectionrequest : XSelectionRequestEvent , pub xselection : XSelectionEvent , pub xcolormap : XColormapEvent , pub xclient : XClientMessageEvent , pub xmapping : XMappingEvent , pub xerror : XErrorEvent , pub xkeymap : XKeymapEvent , pub xgeneric : XGenericEvent , pub xcookie : XGenericEventCookie , pub pad : [ :: std :: os :: raw :: c_long ; 24usize ] , _bindgen_union_align : [ u64 ; 24usize ] , } # [ test ] fn bindgen_test_layout__XEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XEvent > ( ) , 192usize , concat ! ( "Size of: " , stringify ! ( _XEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xany as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xany ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xkey as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xkey ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xbutton as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xbutton ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xmotion as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xmotion ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xcrossing as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xcrossing ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xfocus as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xfocus ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xexpose as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xexpose ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xgraphicsexpose as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xgraphicsexpose ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xnoexpose as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xnoexpose ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xvisibility as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xvisibility ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xcreatewindow as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xcreatewindow ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xdestroywindow as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xdestroywindow ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xunmap as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xunmap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xmap as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xmap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xmaprequest as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xmaprequest ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xreparent as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xreparent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xconfigure as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xconfigure ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xgravity as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xgravity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xresizerequest as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xresizerequest ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xconfigurerequest as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xconfigurerequest ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xcirculate as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xcirculate ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xcirculaterequest as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xcirculaterequest ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xproperty as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xproperty ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xselectionclear as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xselectionclear ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xselectionrequest as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xselectionrequest ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xselection as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xselection ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xcolormap as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xcolormap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xclient as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xclient ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xmapping as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xmapping ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xerror as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xerror ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xkeymap as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xkeymap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xgeneric as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xgeneric ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xcookie as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xcookie ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . pad as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( pad ) ) ) ; } impl Clone for _XEvent { fn clone ( & self ) -> Self { * self } } pub type XEvent = _XEvent ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XCharStruct { pub lbearing : :: std :: os :: raw :: c_short , pub rbearing : :: std :: os :: raw :: c_short , pub width : :: std :: os :: raw :: c_short , pub ascent : :: std :: os :: raw :: c_short , pub descent : :: std :: os :: raw :: c_short , pub attributes : :: std :: os :: raw :: c_ushort , } # [ test ] fn bindgen_test_layout_XCharStruct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XCharStruct > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( XCharStruct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XCharStruct > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( XCharStruct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCharStruct ) ) . lbearing as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XCharStruct ) , "::" , stringify ! ( lbearing ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCharStruct ) ) . rbearing as * const _ as usize } , 2usize , concat ! ( "Alignment of field: " , stringify ! ( XCharStruct ) , "::" , stringify ! ( rbearing ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCharStruct ) ) . width as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XCharStruct ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCharStruct ) ) . ascent as * const _ as usize } , 6usize , concat ! ( "Alignment of field: " , stringify ! ( XCharStruct ) , "::" , stringify ! ( ascent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCharStruct ) ) . descent as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XCharStruct ) , "::" , stringify ! ( descent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCharStruct ) ) . attributes as * const _ as usize } , 10usize , concat ! ( "Alignment of field: " , stringify ! ( XCharStruct ) , "::" , stringify ! ( attributes ) ) ) ; } impl Clone for XCharStruct { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XFontProp { pub name : Atom , pub card32 : :: std :: os :: raw :: c_ulong , } # [ test ] fn bindgen_test_layout_XFontProp ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XFontProp > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XFontProp ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XFontProp > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XFontProp ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontProp ) ) . name as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XFontProp ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontProp ) ) . card32 as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XFontProp ) , "::" , stringify ! ( card32 ) ) ) ; } impl Clone for XFontProp { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XFontStruct { pub ext_data : * mut XExtData , pub fid : Font , pub direction : :: std :: os :: raw :: c_uint , pub min_char_or_byte2 : :: std :: os :: raw :: c_uint , pub max_char_or_byte2 : :: std :: os :: raw :: c_uint , pub min_byte1 : :: std :: os :: raw :: c_uint , pub max_byte1 : :: std :: os :: raw :: c_uint , pub all_chars_exist : :: std :: os :: raw :: c_int , pub default_char : :: std :: os :: raw :: c_uint , pub n_properties : :: std :: os :: raw :: c_int , pub properties : * mut XFontProp , pub min_bounds : XCharStruct , pub max_bounds : XCharStruct , pub per_char : * mut XCharStruct , pub ascent : :: std :: os :: raw :: c_int , pub descent : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XFontStruct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XFontStruct > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( XFontStruct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XFontStruct > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XFontStruct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . ext_data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( ext_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . fid as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( fid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . direction as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( direction ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . min_char_or_byte2 as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( min_char_or_byte2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . max_char_or_byte2 as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( max_char_or_byte2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . min_byte1 as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( min_byte1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . max_byte1 as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( max_byte1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . all_chars_exist as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( all_chars_exist ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . default_char as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( default_char ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . n_properties as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( n_properties ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . properties as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( properties ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . min_bounds as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( min_bounds ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . max_bounds as * const _ as usize } , 68usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( max_bounds ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . per_char as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( per_char ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . ascent as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( ascent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . descent as * const _ as usize } , 92usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( descent ) ) ) ; } impl Clone for XFontStruct { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XTextItem { pub chars : * mut :: std :: os :: raw :: c_char , pub nchars : :: std :: os :: raw :: c_int , pub delta : :: std :: os :: raw :: c_int , pub font : Font , } # [ test ] fn bindgen_test_layout_XTextItem ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XTextItem > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( XTextItem ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XTextItem > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XTextItem ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem ) ) . chars as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem ) , "::" , stringify ! ( chars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem ) ) . nchars as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem ) , "::" , stringify ! ( nchars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem ) ) . delta as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem ) , "::" , stringify ! ( delta ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem ) ) . font as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem ) , "::" , stringify ! ( font ) ) ) ; } impl Clone for XTextItem { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XChar2b { pub byte1 : :: std :: os :: raw :: c_uchar , pub byte2 : :: std :: os :: raw :: c_uchar , } # [ test ] fn bindgen_test_layout_XChar2b ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XChar2b > ( ) , 2usize , concat ! ( "Size of: " , stringify ! ( XChar2b ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XChar2b > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( XChar2b ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XChar2b ) ) . byte1 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XChar2b ) , "::" , stringify ! ( byte1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XChar2b ) ) . byte2 as * const _ as usize } , 1usize , concat ! ( "Alignment of field: " , stringify ! ( XChar2b ) , "::" , stringify ! ( byte2 ) ) ) ; } impl Clone for XChar2b { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XTextItem16 { pub chars : * mut XChar2b , pub nchars : :: std :: os :: raw :: c_int , pub delta : :: std :: os :: raw :: c_int , pub font : Font , } # [ test ] fn bindgen_test_layout_XTextItem16 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XTextItem16 > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( XTextItem16 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XTextItem16 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XTextItem16 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem16 ) ) . chars as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem16 ) , "::" , stringify ! ( chars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem16 ) ) . nchars as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem16 ) , "::" , stringify ! ( nchars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem16 ) ) . delta as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem16 ) , "::" , stringify ! ( delta ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem16 ) ) . font as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem16 ) , "::" , stringify ! ( font ) ) ) ; } impl Clone for XTextItem16 { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union XEDataObject { pub display : * mut Display , pub gc : GC , pub visual : * mut Visual , pub screen : * mut Screen , pub pixmap_format : * mut ScreenFormat , pub font : * mut XFontStruct , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_XEDataObject ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XEDataObject > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( XEDataObject ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XEDataObject > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XEDataObject ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XEDataObject ) ) . display as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XEDataObject ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XEDataObject ) ) . gc as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XEDataObject ) , "::" , stringify ! ( gc ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XEDataObject ) ) . visual as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XEDataObject ) , "::" , stringify ! ( visual ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XEDataObject ) ) . screen as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XEDataObject ) , "::" , stringify ! ( screen ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XEDataObject ) ) . pixmap_format as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XEDataObject ) , "::" , stringify ! ( pixmap_format ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XEDataObject ) ) . font as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XEDataObject ) , "::" , stringify ! ( font ) ) ) ; } impl Clone for XEDataObject { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XFontSetExtents { pub max_ink_extent : XRectangle , pub max_logical_extent : XRectangle , } # [ test ] fn bindgen_test_layout_XFontSetExtents ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XFontSetExtents > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XFontSetExtents ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XFontSetExtents > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( XFontSetExtents ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontSetExtents ) ) . max_ink_extent as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XFontSetExtents ) , "::" , stringify ! ( max_ink_extent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontSetExtents ) ) . max_logical_extent as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XFontSetExtents ) , "::" , stringify ! ( max_logical_extent ) ) ) ; } impl Clone for XFontSetExtents { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XOM { _unused : [ u8 ; 0 ] } pub type XOM = * mut _XOM ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XOC { _unused : [ u8 ; 0 ] } pub type XOC = * mut _XOC ; pub type XFontSet = * mut _XOC ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XmbTextItem { pub chars : * mut :: std :: os :: raw :: c_char , pub nchars : :: std :: os :: raw :: c_int , pub delta : :: std :: os :: raw :: c_int , pub font_set : XFontSet , } # [ test ] fn bindgen_test_layout_XmbTextItem ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XmbTextItem > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( XmbTextItem ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XmbTextItem > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XmbTextItem ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XmbTextItem ) ) . chars as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XmbTextItem ) , "::" , stringify ! ( chars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XmbTextItem ) ) . nchars as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XmbTextItem ) , "::" , stringify ! ( nchars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XmbTextItem ) ) . delta as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XmbTextItem ) , "::" , stringify ! ( delta ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XmbTextItem ) ) . font_set as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XmbTextItem ) , "::" , stringify ! ( font_set ) ) ) ; } impl Clone for XmbTextItem { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XwcTextItem { pub chars : * mut wchar_t , pub nchars : :: std :: os :: raw :: c_int , pub delta : :: std :: os :: raw :: c_int , pub font_set : XFontSet , } # [ test ] fn bindgen_test_layout_XwcTextItem ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XwcTextItem > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( XwcTextItem ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XwcTextItem > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XwcTextItem ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XwcTextItem ) ) . chars as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XwcTextItem ) , "::" , stringify ! ( chars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XwcTextItem ) ) . nchars as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XwcTextItem ) , "::" , stringify ! ( nchars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XwcTextItem ) ) . delta as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XwcTextItem ) , "::" , stringify ! ( delta ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XwcTextItem ) ) . font_set as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XwcTextItem ) , "::" , stringify ! ( font_set ) ) ) ; } impl Clone for XwcTextItem { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XOMCharSetList { pub charset_count : :: std :: os :: raw :: c_int , pub charset_list : * mut * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_XOMCharSetList ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XOMCharSetList > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XOMCharSetList ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XOMCharSetList > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XOMCharSetList ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XOMCharSetList ) ) . charset_count as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XOMCharSetList ) , "::" , stringify ! ( charset_count ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XOMCharSetList ) ) . charset_list as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XOMCharSetList ) , "::" , stringify ! ( charset_list ) ) ) ; } impl Clone for XOMCharSetList { fn clone ( & self ) -> Self { * self } } # [ repr ( u32 ) ] # [ derive ( Debug , Copy , Clone , PartialEq , Eq , Hash ) ] pub enum XOrientation { XOMOrientation_LTR_TTB = 0 , XOMOrientation_RTL_TTB = 1 , XOMOrientation_TTB_LTR = 2 , XOMOrientation_TTB_RTL = 3 , XOMOrientation_Context = 4 , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XOMOrientation { pub num_orientation : :: std :: os :: raw :: c_int , pub orientation : * mut XOrientation , } # [ test ] fn bindgen_test_layout_XOMOrientation ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XOMOrientation > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XOMOrientation ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XOMOrientation > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XOMOrientation ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XOMOrientation ) ) . num_orientation as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XOMOrientation ) , "::" , stringify ! ( num_orientation ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XOMOrientation ) ) . orientation as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XOMOrientation ) , "::" , stringify ! ( orientation ) ) ) ; } impl Clone for XOMOrientation { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XOMFontInfo { pub num_font : :: std :: os :: raw :: c_int , pub font_struct_list : * mut * mut XFontStruct , pub font_name_list : * mut * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_XOMFontInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XOMFontInfo > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( XOMFontInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XOMFontInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XOMFontInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XOMFontInfo ) ) . num_font as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XOMFontInfo ) , "::" , stringify ! ( num_font ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XOMFontInfo ) ) . font_struct_list as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XOMFontInfo ) , "::" , stringify ! ( font_struct_list ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XOMFontInfo ) ) . font_name_list as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XOMFontInfo ) , "::" , stringify ! ( font_name_list ) ) ) ; } impl Clone for XOMFontInfo { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XIM { _unused : [ u8 ; 0 ] } pub type XIM = * mut _XIM ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XIC { _unused : [ u8 ; 0 ] } pub type XIC = * mut _XIC ; pub type XIMProc = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : XIM , arg2 : XPointer , arg3 : XPointer ) > ; pub type XICProc = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : XIC , arg2 : XPointer , arg3 : XPointer ) -> :: std :: os :: raw :: c_int > ; pub type XIDProc = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : XPointer , arg3 : XPointer ) > ; pub type XIMStyle = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XIMStyles { pub count_styles : :: std :: os :: raw :: c_ushort , pub supported_styles : * mut XIMStyle , } # [ test ] fn bindgen_test_layout_XIMStyles ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XIMStyles > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XIMStyles ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XIMStyles > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XIMStyles ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIMStyles ) ) . count_styles as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XIMStyles ) , "::" , stringify ! ( count_styles ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIMStyles ) ) . supported_styles as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XIMStyles ) , "::" , stringify ! ( supported_styles ) ) ) ; } impl Clone for XIMStyles { fn clone ( & self ) -> Self { * self } } pub type XVaNestedList = * mut :: std :: os :: raw :: c_void ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XIMCallback { pub client_data : XPointer , pub callback : XIMProc , } # [ test ] fn bindgen_test_layout_XIMCallback ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XIMCallback > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XIMCallback ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XIMCallback > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XIMCallback ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIMCallback ) ) . client_data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XIMCallback ) , "::" , stringify ! ( client_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIMCallback ) ) . callback as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XIMCallback ) , "::" , stringify ! ( callback ) ) ) ; } impl Clone for XIMCallback { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XICCallback { pub client_data : XPointer , pub callback : XICProc , } # [ test ] fn bindgen_test_layout_XICCallback ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XICCallback > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XICCallback ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XICCallback > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XICCallback ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XICCallback ) ) . client_data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XICCallback ) , "::" , stringify ! ( client_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XICCallback ) ) . callback as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XICCallback ) , "::" , stringify ! ( callback ) ) ) ; } impl Clone for XICCallback { fn clone ( & self ) -> Self { * self } } pub type XIMFeedback = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Copy ) ] pub struct _XIMText { pub length : :: std :: os :: raw :: c_ushort , pub feedback : * mut XIMFeedback , pub encoding_is_wchar : :: std :: os :: raw :: c_int , pub string : _XIMText__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union _XIMText__bindgen_ty_1 { pub multi_byte : * mut :: std :: os :: raw :: c_char , pub wide_char : * mut wchar_t , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout__XIMText__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMText__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _XIMText__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMText__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMText__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMText__bindgen_ty_1 ) ) . multi_byte as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMText__bindgen_ty_1 ) , "::" , stringify ! ( multi_byte ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMText__bindgen_ty_1 ) ) . wide_char as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMText__bindgen_ty_1 ) , "::" , stringify ! ( wide_char ) ) ) ; } impl Clone for _XIMText__bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout__XIMText ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMText > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _XIMText ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMText > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMText ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMText ) ) . length as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMText ) , "::" , stringify ! ( length ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMText ) ) . feedback as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMText ) , "::" , stringify ! ( feedback ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMText ) ) . encoding_is_wchar as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMText ) , "::" , stringify ! ( encoding_is_wchar ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMText ) ) . string as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMText ) , "::" , stringify ! ( string ) ) ) ; } impl Clone for _XIMText { fn clone ( & self ) -> Self { * self } } pub type XIMText = _XIMText ; pub type XIMPreeditState = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XIMPreeditStateNotifyCallbackStruct { pub state : XIMPreeditState , } # [ test ] fn bindgen_test_layout__XIMPreeditStateNotifyCallbackStruct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMPreeditStateNotifyCallbackStruct > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _XIMPreeditStateNotifyCallbackStruct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMPreeditStateNotifyCallbackStruct > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMPreeditStateNotifyCallbackStruct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditStateNotifyCallbackStruct ) ) . state as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditStateNotifyCallbackStruct ) , "::" , stringify ! ( state ) ) ) ; } impl Clone for _XIMPreeditStateNotifyCallbackStruct { fn clone ( & self ) -> Self { * self } } pub type XIMPreeditStateNotifyCallbackStruct = _XIMPreeditStateNotifyCallbackStruct ; pub type XIMResetState = :: std :: os :: raw :: c_ulong ; pub type XIMStringConversionFeedback = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Copy ) ] pub struct _XIMStringConversionText { pub length : :: std :: os :: raw :: c_ushort , pub feedback : * mut XIMStringConversionFeedback , pub encoding_is_wchar : :: std :: os :: raw :: c_int , pub string : _XIMStringConversionText__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union _XIMStringConversionText__bindgen_ty_1 { pub mbs : * mut :: std :: os :: raw :: c_char , pub wcs : * mut wchar_t , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout__XIMStringConversionText__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMStringConversionText__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _XIMStringConversionText__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMStringConversionText__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMStringConversionText__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionText__bindgen_ty_1 ) ) . mbs as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionText__bindgen_ty_1 ) , "::" , stringify ! ( mbs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionText__bindgen_ty_1 ) ) . wcs as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionText__bindgen_ty_1 ) , "::" , stringify ! ( wcs ) ) ) ; } impl Clone for _XIMStringConversionText__bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout__XIMStringConversionText ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMStringConversionText > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _XIMStringConversionText ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMStringConversionText > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMStringConversionText ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionText ) ) . length as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionText ) , "::" , stringify ! ( length ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionText ) ) . feedback as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionText ) , "::" , stringify ! ( feedback ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionText ) ) . encoding_is_wchar as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionText ) , "::" , stringify ! ( encoding_is_wchar ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionText ) ) . string as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionText ) , "::" , stringify ! ( string ) ) ) ; } impl Clone for _XIMStringConversionText { fn clone ( & self ) -> Self { * self } } pub type XIMStringConversionText = _XIMStringConversionText ; pub type XIMStringConversionPosition = :: std :: os :: raw :: c_ushort ; pub type XIMStringConversionType = :: std :: os :: raw :: c_ushort ; pub type XIMStringConversionOperation = :: std :: os :: raw :: c_ushort ; # [ repr ( u32 ) ] # [ derive ( Debug , Copy , Clone , PartialEq , Eq , Hash ) ] pub enum XIMCaretDirection { XIMForwardChar = 0 , XIMBackwardChar = 1 , XIMForwardWord = 2 , XIMBackwardWord = 3 , XIMCaretUp = 4 , XIMCaretDown = 5 , XIMNextLine = 6 , XIMPreviousLine = 7 , XIMLineStart = 8 , XIMLineEnd = 9 , XIMAbsolutePosition = 10 , XIMDontChange = 11 , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XIMStringConversionCallbackStruct { pub position : XIMStringConversionPosition , pub direction : XIMCaretDirection , pub operation : XIMStringConversionOperation , pub factor : :: std :: os :: raw :: c_ushort , pub text : * mut XIMStringConversionText , } # [ test ] fn bindgen_test_layout__XIMStringConversionCallbackStruct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMStringConversionCallbackStruct > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _XIMStringConversionCallbackStruct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMStringConversionCallbackStruct > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMStringConversionCallbackStruct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionCallbackStruct ) ) . position as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionCallbackStruct ) , "::" , stringify ! ( position ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionCallbackStruct ) ) . direction as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionCallbackStruct ) , "::" , stringify ! ( direction ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionCallbackStruct ) ) . operation as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionCallbackStruct ) , "::" , stringify ! ( operation ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionCallbackStruct ) ) . factor as * const _ as usize } , 10usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionCallbackStruct ) , "::" , stringify ! ( factor ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionCallbackStruct ) ) . text as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionCallbackStruct ) , "::" , stringify ! ( text ) ) ) ; } impl Clone for _XIMStringConversionCallbackStruct { fn clone ( & self ) -> Self { * self } } pub type XIMStringConversionCallbackStruct = _XIMStringConversionCallbackStruct ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XIMPreeditDrawCallbackStruct { pub caret : :: std :: os :: raw :: c_int , pub chg_first : :: std :: os :: raw :: c_int , pub chg_length : :: std :: os :: raw :: c_int , pub text : * mut XIMText , } # [ test ] fn bindgen_test_layout__XIMPreeditDrawCallbackStruct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMPreeditDrawCallbackStruct > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _XIMPreeditDrawCallbackStruct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMPreeditDrawCallbackStruct > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMPreeditDrawCallbackStruct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditDrawCallbackStruct ) ) . caret as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditDrawCallbackStruct ) , "::" , stringify ! ( caret ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditDrawCallbackStruct ) ) . chg_first as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditDrawCallbackStruct ) , "::" , stringify ! ( chg_first ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditDrawCallbackStruct ) ) . chg_length as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditDrawCallbackStruct ) , "::" , stringify ! ( chg_length ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditDrawCallbackStruct ) ) . text as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditDrawCallbackStruct ) , "::" , stringify ! ( text ) ) ) ; } impl Clone for _XIMPreeditDrawCallbackStruct { fn clone ( & self ) -> Self { * self } } pub type XIMPreeditDrawCallbackStruct = _XIMPreeditDrawCallbackStruct ; # [ repr ( u32 ) ] # [ derive ( Debug , Copy , Clone , PartialEq , Eq , Hash ) ] pub enum XIMCaretStyle { XIMIsInvisible = 0 , XIMIsPrimary = 1 , XIMIsSecondary = 2 , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XIMPreeditCaretCallbackStruct { pub position : :: std :: os :: raw :: c_int , pub direction : XIMCaretDirection , pub style : XIMCaretStyle , } # [ test ] fn bindgen_test_layout__XIMPreeditCaretCallbackStruct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMPreeditCaretCallbackStruct > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( _XIMPreeditCaretCallbackStruct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMPreeditCaretCallbackStruct > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _XIMPreeditCaretCallbackStruct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditCaretCallbackStruct ) ) . position as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditCaretCallbackStruct ) , "::" , stringify ! ( position ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditCaretCallbackStruct ) ) . direction as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditCaretCallbackStruct ) , "::" , stringify ! ( direction ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditCaretCallbackStruct ) ) . style as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditCaretCallbackStruct ) , "::" , stringify ! ( style ) ) ) ; } impl Clone for _XIMPreeditCaretCallbackStruct { fn clone ( & self ) -> Self { * self } } pub type XIMPreeditCaretCallbackStruct = _XIMPreeditCaretCallbackStruct ; # [ repr ( u32 ) ] # [ derive ( Debug , Copy , Clone , PartialEq , Eq , Hash ) ] pub enum XIMStatusDataType { XIMTextType = 0 , XIMBitmapType = 1 , } # [ repr ( C ) ] # [ derive ( Copy ) ] pub struct _XIMStatusDrawCallbackStruct { pub type_ : XIMStatusDataType , pub data : _XIMStatusDrawCallbackStruct__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union _XIMStatusDrawCallbackStruct__bindgen_ty_1 { pub text : * mut XIMText , pub bitmap : Pixmap , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout__XIMStatusDrawCallbackStruct__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMStatusDrawCallbackStruct__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _XIMStatusDrawCallbackStruct__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMStatusDrawCallbackStruct__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMStatusDrawCallbackStruct__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStatusDrawCallbackStruct__bindgen_ty_1 ) ) . text as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStatusDrawCallbackStruct__bindgen_ty_1 ) , "::" , stringify ! ( text ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStatusDrawCallbackStruct__bindgen_ty_1 ) ) . bitmap as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStatusDrawCallbackStruct__bindgen_ty_1 ) , "::" , stringify ! ( bitmap ) ) ) ; } impl Clone for _XIMStatusDrawCallbackStruct__bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout__XIMStatusDrawCallbackStruct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMStatusDrawCallbackStruct > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _XIMStatusDrawCallbackStruct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMStatusDrawCallbackStruct > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMStatusDrawCallbackStruct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStatusDrawCallbackStruct ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStatusDrawCallbackStruct ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStatusDrawCallbackStruct ) ) . data as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStatusDrawCallbackStruct ) , "::" , stringify ! ( data ) ) ) ; } impl Clone for _XIMStatusDrawCallbackStruct { fn clone ( & self ) -> Self { * self } } pub type XIMStatusDrawCallbackStruct = _XIMStatusDrawCallbackStruct ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XIMHotKeyTrigger { pub keysym : KeySym , pub modifier : :: std :: os :: raw :: c_int , pub modifier_mask : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__XIMHotKeyTrigger ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMHotKeyTrigger > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _XIMHotKeyTrigger ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMHotKeyTrigger > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMHotKeyTrigger ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMHotKeyTrigger ) ) . keysym as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMHotKeyTrigger ) , "::" , stringify ! ( keysym ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMHotKeyTrigger ) ) . modifier as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMHotKeyTrigger ) , "::" , stringify ! ( modifier ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMHotKeyTrigger ) ) . modifier_mask as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMHotKeyTrigger ) , "::" , stringify ! ( modifier_mask ) ) ) ; } impl Clone for _XIMHotKeyTrigger { fn clone ( & self ) -> Self { * self } } pub type XIMHotKeyTrigger = _XIMHotKeyTrigger ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XIMHotKeyTriggers { pub num_hot_key : :: std :: os :: raw :: c_int , pub key : * mut XIMHotKeyTrigger , } # [ test ] fn bindgen_test_layout__XIMHotKeyTriggers ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMHotKeyTriggers > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _XIMHotKeyTriggers ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMHotKeyTriggers > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMHotKeyTriggers ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMHotKeyTriggers ) ) . num_hot_key as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMHotKeyTriggers ) , "::" , stringify ! ( num_hot_key ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMHotKeyTriggers ) ) . key as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMHotKeyTriggers ) , "::" , stringify ! ( key ) ) ) ; } impl Clone for _XIMHotKeyTriggers { fn clone ( & self ) -> Self { * self } } pub type XIMHotKeyTriggers = _XIMHotKeyTriggers ; pub type XIMHotKeyState = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XIMValuesList { pub count_values : :: std :: os :: raw :: c_ushort , pub supported_values : * mut * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_XIMValuesList ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XIMValuesList > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XIMValuesList ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XIMValuesList > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XIMValuesList ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIMValuesList ) ) . count_values as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XIMValuesList ) , "::" , stringify ! ( count_values ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIMValuesList ) ) . supported_values as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XIMValuesList ) , "::" , stringify ! ( supported_values ) ) ) ; } impl Clone for XIMValuesList { fn clone ( & self ) -> Self { * self } } extern "C" {
 # [ link_name = "_Xdebug" ] 
 pub static mut  _Xdebug  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 pub fn XLoadQueryFont ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , ) -> * mut XFontStruct ; 
} extern "C" {
 pub fn XQueryFont ( arg1 : * mut Display , arg2 : XID , ) -> * mut XFontStruct ; 
} extern "C" {
 pub fn XGetMotionEvents ( arg1 : * mut Display , arg2 : Window , arg3 : Time , arg4 : Time , arg5 : * mut :: std :: os :: raw :: c_int , ) -> * mut XTimeCoord ; 
} extern "C" {
 pub fn XDeleteModifiermapEntry ( arg1 : * mut XModifierKeymap , arg2 : KeyCode , arg3 : :: std :: os :: raw :: c_int , ) -> * mut XModifierKeymap ; 
} extern "C" {
 pub fn XGetModifierMapping ( arg1 : * mut Display , ) -> * mut XModifierKeymap ; 
} extern "C" {
 pub fn XInsertModifiermapEntry ( arg1 : * mut XModifierKeymap , arg2 : KeyCode , arg3 : :: std :: os :: raw :: c_int , ) -> * mut XModifierKeymap ; 
} extern "C" {
 pub fn XNewModifiermap ( arg1 : :: std :: os :: raw :: c_int , ) -> * mut XModifierKeymap ; 
} extern "C" {
 pub fn XCreateImage ( arg1 : * mut Display , arg2 : * mut Visual , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_char , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_uint , arg9 : :: std :: os :: raw :: c_int , arg10 : :: std :: os :: raw :: c_int , ) -> * mut XImage ; 
} extern "C" {
 pub fn XInitImage ( arg1 : * mut XImage , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetImage ( arg1 : * mut Display , arg2 : Drawable , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_ulong , arg8 : :: std :: os :: raw :: c_int , ) -> * mut XImage ; 
} extern "C" {
 pub fn XGetSubImage ( arg1 : * mut Display , arg2 : Drawable , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_ulong , arg8 : :: std :: os :: raw :: c_int , arg9 : * mut XImage , arg10 : :: std :: os :: raw :: c_int , arg11 : :: std :: os :: raw :: c_int , ) -> * mut XImage ; 
} extern "C" {
 pub fn XOpenDisplay ( arg1 : * const :: std :: os :: raw :: c_char , ) -> * mut Display ; 
} extern "C" {
 pub fn XrmInitialize ( ) ; 
} extern "C" {
 pub fn XFetchBytes ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XFetchBuffer ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XGetAtomName ( arg1 : * mut Display , arg2 : Atom , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XGetAtomNames ( arg1 : * mut Display , arg2 : * mut Atom , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetDefault ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XDisplayName ( arg1 : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XKeysymToString ( arg1 : KeySym , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XSynchronize ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > ; 
} extern "C" {
 pub fn XSetAfterFunction ( arg1 : * mut Display , arg2 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display ) -> :: std :: os :: raw :: c_int > , ) -> :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display ) -> :: std :: os :: raw :: c_int > ) -> :: std :: os :: raw :: c_int > ; 
} extern "C" {
 pub fn XInternAtom ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , ) -> Atom ; 
} extern "C" {
 pub fn XInternAtoms ( arg1 : * mut Display , arg2 : * mut * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut Atom , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCopyColormapAndFree ( arg1 : * mut Display , arg2 : Colormap , ) -> Colormap ; 
} extern "C" {
 pub fn XCreateColormap ( arg1 : * mut Display , arg2 : Window , arg3 : * mut Visual , arg4 : :: std :: os :: raw :: c_int , ) -> Colormap ; 
} extern "C" {
 pub fn XCreatePixmapCursor ( arg1 : * mut Display , arg2 : Pixmap , arg3 : Pixmap , arg4 : * mut XColor , arg5 : * mut XColor , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , ) -> Cursor ; 
} extern "C" {
 pub fn XCreateGlyphCursor ( arg1 : * mut Display , arg2 : Font , arg3 : Font , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint , arg6 : * const XColor , arg7 : * const XColor , ) -> Cursor ; 
} extern "C" {
 pub fn XCreateFontCursor ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_uint , ) -> Cursor ; 
} extern "C" {
 pub fn XLoadFont ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , ) -> Font ; 
} extern "C" {
 pub fn XCreateGC ( arg1 : * mut Display , arg2 : Drawable , arg3 : :: std :: os :: raw :: c_ulong , arg4 : * mut XGCValues , ) -> GC ; 
} extern "C" {
 pub fn XGContextFromGC ( arg1 : GC , ) -> GContext ; 
} extern "C" {
 pub fn XFlushGC ( arg1 : * mut Display , arg2 : GC , ) ; 
} extern "C" {
 pub fn XCreatePixmap ( arg1 : * mut Display , arg2 : Drawable , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint , ) -> Pixmap ; 
} extern "C" {
 pub fn XCreateBitmapFromData ( arg1 : * mut Display , arg2 : Drawable , arg3 : * const :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint , ) -> Pixmap ; 
} extern "C" {
 pub fn XCreatePixmapFromBitmapData ( arg1 : * mut Display , arg2 : Drawable , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_ulong , arg7 : :: std :: os :: raw :: c_ulong , arg8 : :: std :: os :: raw :: c_uint , ) -> Pixmap ; 
} extern "C" {
 pub fn XCreateSimpleWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_ulong , arg9 : :: std :: os :: raw :: c_ulong , ) -> Window ; 
} extern "C" {
 pub fn XGetSelectionOwner ( arg1 : * mut Display , arg2 : Atom , ) -> Window ; 
} extern "C" {
 pub fn XCreateWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_int , arg9 : :: std :: os :: raw :: c_uint , arg10 : * mut Visual , arg11 : :: std :: os :: raw :: c_ulong , arg12 : * mut XSetWindowAttributes , ) -> Window ; 
} extern "C" {
 pub fn XListInstalledColormaps ( arg1 : * mut Display , arg2 : Window , arg3 : * mut :: std :: os :: raw :: c_int , ) -> * mut Colormap ; 
} extern "C" {
 pub fn XListFonts ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , ) -> * mut * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XListFontsWithInfo ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , arg5 : * mut * mut XFontStruct , ) -> * mut * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XGetFontPath ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , ) -> * mut * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XListExtensions ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , ) -> * mut * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XListProperties ( arg1 : * mut Display , arg2 : Window , arg3 : * mut :: std :: os :: raw :: c_int , ) -> * mut Atom ; 
} extern "C" {
 pub fn XListHosts ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , ) -> * mut XHostAddress ; 
} extern "C" {
 pub fn XKeycodeToKeysym ( arg1 : * mut Display , arg2 : KeyCode , arg3 : :: std :: os :: raw :: c_int , ) -> KeySym ; 
} extern "C" {
 pub fn XLookupKeysym ( arg1 : * mut XKeyEvent , arg2 : :: std :: os :: raw :: c_int , ) -> KeySym ; 
} extern "C" {
 pub fn XGetKeyboardMapping ( arg1 : * mut Display , arg2 : KeyCode , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , ) -> * mut KeySym ; 
} extern "C" {
 pub fn XStringToKeysym ( arg1 : * const :: std :: os :: raw :: c_char , ) -> KeySym ; 
} extern "C" {
 pub fn XMaxRequestSize ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn XExtendedMaxRequestSize ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn XResourceManagerString ( arg1 : * mut Display , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XScreenResourceString ( arg1 : * mut Screen , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XDisplayMotionBufferSize ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XVisualIDFromVisual ( arg1 : * mut Visual , ) -> VisualID ; 
} extern "C" {
 pub fn XInitThreads ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XLockDisplay ( arg1 : * mut Display , ) ; 
} extern "C" {
 pub fn XUnlockDisplay ( arg1 : * mut Display , ) ; 
} extern "C" {
 pub fn XInitExtension ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , ) -> * mut XExtCodes ; 
} extern "C" {
 pub fn XAddExtension ( arg1 : * mut Display , ) -> * mut XExtCodes ; 
} extern "C" {
 pub fn XFindOnExtensionList ( arg1 : * mut * mut XExtData , arg2 : :: std :: os :: raw :: c_int , ) -> * mut XExtData ; 
} extern "C" {
 pub fn XEHeadOfExtensionList ( arg1 : XEDataObject , ) -> * mut * mut XExtData ; 
} extern "C" {
 pub fn XRootWindow ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> Window ; 
} extern "C" {
 pub fn XDefaultRootWindow ( arg1 : * mut Display , ) -> Window ; 
} extern "C" {
 pub fn XRootWindowOfScreen ( arg1 : * mut Screen , ) -> Window ; 
} extern "C" {
 pub fn XDefaultVisual ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> * mut Visual ; 
} extern "C" {
 pub fn XDefaultVisualOfScreen ( arg1 : * mut Screen , ) -> * mut Visual ; 
} extern "C" {
 pub fn XDefaultGC ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> GC ; 
} extern "C" {
 pub fn XDefaultGCOfScreen ( arg1 : * mut Screen , ) -> GC ; 
} extern "C" {
 pub fn XBlackPixel ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XWhitePixel ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XAllPlanes ( ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XBlackPixelOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XWhitePixelOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XNextRequest ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XLastKnownRequestProcessed ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XServerVendor ( arg1 : * mut Display , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XDisplayString ( arg1 : * mut Display , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XDefaultColormap ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> Colormap ; 
} extern "C" {
 pub fn XDefaultColormapOfScreen ( arg1 : * mut Screen , ) -> Colormap ; 
} extern "C" {
 pub fn XDisplayOfScreen ( arg1 : * mut Screen , ) -> * mut Display ; 
} extern "C" {
 pub fn XScreenOfDisplay ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> * mut Screen ; 
} extern "C" {
 pub fn XDefaultScreenOfDisplay ( arg1 : * mut Display , ) -> * mut Screen ; 
} extern "C" {
 pub fn XEventMaskOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn XScreenNumberOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} pub type XErrorHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : * mut XErrorEvent ) -> :: std :: os :: raw :: c_int > ; extern "C" {
 pub fn XSetErrorHandler ( arg1 : XErrorHandler , ) -> XErrorHandler ; 
} pub type XIOErrorHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display ) -> :: std :: os :: raw :: c_int > ; extern "C" {
 pub fn XSetIOErrorHandler ( arg1 : XIOErrorHandler , ) -> XIOErrorHandler ; 
} extern "C" {
 pub fn XListPixmapFormats ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , ) -> * mut XPixmapFormatValues ; 
} extern "C" {
 pub fn XListDepths ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XReconfigureWMWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_uint , arg5 : * mut XWindowChanges , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetWMProtocols ( arg1 : * mut Display , arg2 : Window , arg3 : * mut * mut Atom , arg4 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWMProtocols ( arg1 : * mut Display , arg2 : Window , arg3 : * mut Atom , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XIconifyWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XWithdrawWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetCommand ( arg1 : * mut Display , arg2 : Window , arg3 : * mut * mut * mut :: std :: os :: raw :: c_char , arg4 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetWMColormapWindows ( arg1 : * mut Display , arg2 : Window , arg3 : * mut * mut Window , arg4 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWMColormapWindows ( arg1 : * mut Display , arg2 : Window , arg3 : * mut Window , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeStringList ( arg1 : * mut * mut :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn XSetTransientForHint ( arg1 : * mut Display , arg2 : Window , arg3 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XActivateScreenSaver ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAddHost ( arg1 : * mut Display , arg2 : * mut XHostAddress , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAddHosts ( arg1 : * mut Display , arg2 : * mut XHostAddress , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAddToExtensionList ( arg1 : * mut * mut _XExtData , arg2 : * mut XExtData , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAddToSaveSet ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAllocColor ( arg1 : * mut Display , arg2 : Colormap , arg3 : * mut XColor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAllocColorCells ( arg1 : * mut Display , arg2 : Colormap , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_ulong , arg5 : :: std :: os :: raw :: c_uint , arg6 : * mut :: std :: os :: raw :: c_ulong , arg7 : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAllocColorPlanes ( arg1 : * mut Display , arg2 : Colormap , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_ulong , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , arg8 : :: std :: os :: raw :: c_int , arg9 : * mut :: std :: os :: raw :: c_ulong , arg10 : * mut :: std :: os :: raw :: c_ulong , arg11 : * mut :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAllocNamedColor ( arg1 : * mut Display , arg2 : Colormap , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * mut XColor , arg5 : * mut XColor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAllowEvents ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAutoRepeatOff ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAutoRepeatOn ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XBell ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XBitmapBitOrder ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XBitmapPad ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XBitmapUnit ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCellsOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangeActivePointerGrab ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_uint , arg3 : Cursor , arg4 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangeGC ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_ulong , arg4 : * mut XGCValues , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangeKeyboardControl ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_ulong , arg3 : * mut XKeyboardControl , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangeKeyboardMapping ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut KeySym , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangePointerControl ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangeProperty ( arg1 : * mut Display , arg2 : Window , arg3 : Atom , arg4 : Atom , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_uchar , arg8 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangeSaveSet ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangeWindowAttributes ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_ulong , arg4 : * mut XSetWindowAttributes , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCheckIfEvent ( arg1 : * mut Display , arg2 : * mut XEvent , arg3 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : * mut XEvent , arg3 : XPointer ) -> :: std :: os :: raw :: c_int > , arg4 : XPointer , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCheckMaskEvent ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_long , arg3 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCheckTypedEvent ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCheckTypedWindowEvent ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCheckWindowEvent ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_long , arg4 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCirculateSubwindows ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCirculateSubwindowsDown ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCirculateSubwindowsUp ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XClearArea ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XClearWindow ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCloseDisplay ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XConfigureWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_uint , arg4 : * mut XWindowChanges , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XConnectionNumber ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XConvertSelection ( arg1 : * mut Display , arg2 : Atom , arg3 : Atom , arg4 : Atom , arg5 : Window , arg6 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCopyArea ( arg1 : * mut Display , arg2 : Drawable , arg3 : Drawable , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_uint , arg9 : :: std :: os :: raw :: c_int , arg10 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCopyGC ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_ulong , arg4 : GC , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCopyPlane ( arg1 : * mut Display , arg2 : Drawable , arg3 : Drawable , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_uint , arg9 : :: std :: os :: raw :: c_int , arg10 : :: std :: os :: raw :: c_int , arg11 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDefaultDepth ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDefaultDepthOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDefaultScreen ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDefineCursor ( arg1 : * mut Display , arg2 : Window , arg3 : Cursor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDeleteProperty ( arg1 : * mut Display , arg2 : Window , arg3 : Atom , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDestroyWindow ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDestroySubwindows ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDoesBackingStore ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDoesSaveUnders ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisableAccessControl ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisplayCells ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisplayHeight ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisplayHeightMM ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisplayKeycodes ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisplayPlanes ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisplayWidth ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisplayWidthMM ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawArc ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_int , arg9 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawArcs ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XArc , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawImageString ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * const :: std :: os :: raw :: c_char , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawImageString16 ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * const XChar2b , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawLine ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawLines ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XPoint , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawPoint ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawPoints ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XPoint , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawRectangle ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawRectangles ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XRectangle , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawSegments ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XSegment , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawString ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * const :: std :: os :: raw :: c_char , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawString16 ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * const XChar2b , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawText ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut XTextItem , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawText16 ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut XTextItem16 , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XEnableAccessControl ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XEventsQueued ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFetchName ( arg1 : * mut Display , arg2 : Window , arg3 : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFillArc ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_int , arg9 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFillArcs ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XArc , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFillPolygon ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XPoint , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFillRectangle ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFillRectangles ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XRectangle , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFlush ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XForceScreenSaver ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFree ( arg1 : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeColormap ( arg1 : * mut Display , arg2 : Colormap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeColors ( arg1 : * mut Display , arg2 : Colormap , arg3 : * mut :: std :: os :: raw :: c_ulong , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeCursor ( arg1 : * mut Display , arg2 : Cursor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeExtensionList ( arg1 : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeFont ( arg1 : * mut Display , arg2 : * mut XFontStruct , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeFontInfo ( arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : * mut XFontStruct , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeFontNames ( arg1 : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeFontPath ( arg1 : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeGC ( arg1 : * mut Display , arg2 : GC , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeModifiermap ( arg1 : * mut XModifierKeymap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreePixmap ( arg1 : * mut Display , arg2 : Pixmap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGeometry ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const :: std :: os :: raw :: c_char , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_int , arg9 : :: std :: os :: raw :: c_int , arg10 : * mut :: std :: os :: raw :: c_int , arg11 : * mut :: std :: os :: raw :: c_int , arg12 : * mut :: std :: os :: raw :: c_int , arg13 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetErrorDatabaseText ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const :: std :: os :: raw :: c_char , arg5 : * mut :: std :: os :: raw :: c_char , arg6 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetErrorText ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetFontProperty ( arg1 : * mut XFontStruct , arg2 : Atom , arg3 : * mut :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetGCValues ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_ulong , arg4 : * mut XGCValues , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetGeometry ( arg1 : * mut Display , arg2 : Drawable , arg3 : * mut Window , arg4 : * mut :: std :: os :: raw :: c_int , arg5 : * mut :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_uint , arg7 : * mut :: std :: os :: raw :: c_uint , arg8 : * mut :: std :: os :: raw :: c_uint , arg9 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetIconName ( arg1 : * mut Display , arg2 : Window , arg3 : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetInputFocus ( arg1 : * mut Display , arg2 : * mut Window , arg3 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetKeyboardControl ( arg1 : * mut Display , arg2 : * mut XKeyboardState , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetPointerControl ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetPointerMapping ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_uchar , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetScreenSaver ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , arg5 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetTransientForHint ( arg1 : * mut Display , arg2 : Window , arg3 : * mut Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetWindowProperty ( arg1 : * mut Display , arg2 : Window , arg3 : Atom , arg4 : :: std :: os :: raw :: c_long , arg5 : :: std :: os :: raw :: c_long , arg6 : :: std :: os :: raw :: c_int , arg7 : Atom , arg8 : * mut Atom , arg9 : * mut :: std :: os :: raw :: c_int , arg10 : * mut :: std :: os :: raw :: c_ulong , arg11 : * mut :: std :: os :: raw :: c_ulong , arg12 : * mut * mut :: std :: os :: raw :: c_uchar , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetWindowAttributes ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XWindowAttributes , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGrabButton ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_uint , arg3 : :: std :: os :: raw :: c_uint , arg4 : Window , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_int , arg8 : :: std :: os :: raw :: c_int , arg9 : Window , arg10 : Cursor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGrabKey ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_uint , arg4 : Window , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGrabKeyboard ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGrabPointer ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : Window , arg8 : Cursor , arg9 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGrabServer ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XHeightMMOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XHeightOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XIfEvent ( arg1 : * mut Display , arg2 : * mut XEvent , arg3 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : * mut XEvent , arg3 : XPointer ) -> :: std :: os :: raw :: c_int > , arg4 : XPointer , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XImageByteOrder ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XInstallColormap ( arg1 : * mut Display , arg2 : Colormap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XKeysymToKeycode ( arg1 : * mut Display , arg2 : KeySym , ) -> KeyCode ; 
} extern "C" {
 pub fn XKillClient ( arg1 : * mut Display , arg2 : XID , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XLookupColor ( arg1 : * mut Display , arg2 : Colormap , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * mut XColor , arg5 : * mut XColor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XLowerWindow ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMapRaised ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMapSubwindows ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMapWindow ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMaskEvent ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_long , arg3 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMaxCmapsOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMinCmapsOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMoveResizeWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMoveWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XNextEvent ( arg1 : * mut Display , arg2 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XNoOp ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XParseColor ( arg1 : * mut Display , arg2 : Colormap , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * mut XColor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XParseGeometry ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_uint , arg5 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XPeekEvent ( arg1 : * mut Display , arg2 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XPeekIfEvent ( arg1 : * mut Display , arg2 : * mut XEvent , arg3 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : * mut XEvent , arg3 : XPointer ) -> :: std :: os :: raw :: c_int > , arg4 : XPointer , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XPending ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XPlanesOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XProtocolRevision ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XProtocolVersion ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XPutBackEvent ( arg1 : * mut Display , arg2 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XPutImage ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XImage , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , arg8 : :: std :: os :: raw :: c_int , arg9 : :: std :: os :: raw :: c_uint , arg10 : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQLength ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryBestCursor ( arg1 : * mut Display , arg2 : Drawable , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_uint , arg5 : * mut :: std :: os :: raw :: c_uint , arg6 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryBestSize ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : Drawable , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint , arg6 : * mut :: std :: os :: raw :: c_uint , arg7 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryBestStipple ( arg1 : * mut Display , arg2 : Drawable , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_uint , arg5 : * mut :: std :: os :: raw :: c_uint , arg6 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryBestTile ( arg1 : * mut Display , arg2 : Drawable , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_uint , arg5 : * mut :: std :: os :: raw :: c_uint , arg6 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryColor ( arg1 : * mut Display , arg2 : Colormap , arg3 : * mut XColor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryColors ( arg1 : * mut Display , arg2 : Colormap , arg3 : * mut XColor , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryExtension ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , arg5 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryKeymap ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryPointer ( arg1 : * mut Display , arg2 : Window , arg3 : * mut Window , arg4 : * mut Window , arg5 : * mut :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_int , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut :: std :: os :: raw :: c_int , arg9 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryTextExtents ( arg1 : * mut Display , arg2 : XID , arg3 : * const :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_int , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut XCharStruct , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryTextExtents16 ( arg1 : * mut Display , arg2 : XID , arg3 : * const XChar2b , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_int , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut XCharStruct , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryTree ( arg1 : * mut Display , arg2 : Window , arg3 : * mut Window , arg4 : * mut Window , arg5 : * mut * mut Window , arg6 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRaiseWindow ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XReadBitmapFile ( arg1 : * mut Display , arg2 : Drawable , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * mut :: std :: os :: raw :: c_uint , arg5 : * mut :: std :: os :: raw :: c_uint , arg6 : * mut Pixmap , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XReadBitmapFileData ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut :: std :: os :: raw :: c_uint , arg3 : * mut :: std :: os :: raw :: c_uint , arg4 : * mut * mut :: std :: os :: raw :: c_uchar , arg5 : * mut :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRebindKeysym ( arg1 : * mut Display , arg2 : KeySym , arg3 : * mut KeySym , arg4 : :: std :: os :: raw :: c_int , arg5 : * const :: std :: os :: raw :: c_uchar , arg6 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRecolorCursor ( arg1 : * mut Display , arg2 : Cursor , arg3 : * mut XColor , arg4 : * mut XColor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRefreshKeyboardMapping ( arg1 : * mut XMappingEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRemoveFromSaveSet ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRemoveHost ( arg1 : * mut Display , arg2 : * mut XHostAddress , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRemoveHosts ( arg1 : * mut Display , arg2 : * mut XHostAddress , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XReparentWindow ( arg1 : * mut Display , arg2 : Window , arg3 : Window , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XResetScreenSaver ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XResizeWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRestackWindows ( arg1 : * mut Display , arg2 : * mut Window , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRotateBuffers ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRotateWindowProperties ( arg1 : * mut Display , arg2 : Window , arg3 : * mut Atom , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XScreenCount ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSelectInput ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_long , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSendEvent ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_long , arg5 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetAccessControl ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetArcMode ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetBackground ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetClipMask ( arg1 : * mut Display , arg2 : GC , arg3 : Pixmap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetClipOrigin ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetClipRectangles ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut XRectangle , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetCloseDownMode ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetCommand ( arg1 : * mut Display , arg2 : Window , arg3 : * mut * mut :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetDashes ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_char , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetFillRule ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetFillStyle ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetFont ( arg1 : * mut Display , arg2 : GC , arg3 : Font , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetFontPath ( arg1 : * mut Display , arg2 : * mut * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetForeground ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetFunction ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetGraphicsExposures ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetIconName ( arg1 : * mut Display , arg2 : Window , arg3 : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetInputFocus ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetLineAttributes ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetModifierMapping ( arg1 : * mut Display , arg2 : * mut XModifierKeymap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetPlaneMask ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetPointerMapping ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_uchar , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetScreenSaver ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetSelectionOwner ( arg1 : * mut Display , arg2 : Atom , arg3 : Window , arg4 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetState ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_ulong , arg4 : :: std :: os :: raw :: c_ulong , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetStipple ( arg1 : * mut Display , arg2 : GC , arg3 : Pixmap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetSubwindowMode ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetTSOrigin ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetTile ( arg1 : * mut Display , arg2 : GC , arg3 : Pixmap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWindowBackground ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWindowBackgroundPixmap ( arg1 : * mut Display , arg2 : Window , arg3 : Pixmap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWindowBorder ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWindowBorderPixmap ( arg1 : * mut Display , arg2 : Window , arg3 : Pixmap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWindowBorderWidth ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWindowColormap ( arg1 : * mut Display , arg2 : Window , arg3 : Colormap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XStoreBuffer ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XStoreBytes ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XStoreColor ( arg1 : * mut Display , arg2 : Colormap , arg3 : * mut XColor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XStoreColors ( arg1 : * mut Display , arg2 : Colormap , arg3 : * mut XColor , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XStoreName ( arg1 : * mut Display , arg2 : Window , arg3 : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XStoreNamedColor ( arg1 : * mut Display , arg2 : Colormap , arg3 : * const :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_ulong , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSync ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XTextExtents ( arg1 : * mut XFontStruct , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , arg5 : * mut :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_int , arg7 : * mut XCharStruct , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XTextExtents16 ( arg1 : * mut XFontStruct , arg2 : * const XChar2b , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , arg5 : * mut :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_int , arg7 : * mut XCharStruct , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XTextWidth ( arg1 : * mut XFontStruct , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XTextWidth16 ( arg1 : * mut XFontStruct , arg2 : * const XChar2b , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XTranslateCoordinates ( arg1 : * mut Display , arg2 : Window , arg3 : Window , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_int , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUndefineCursor ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUngrabButton ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_uint , arg3 : :: std :: os :: raw :: c_uint , arg4 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUngrabKey ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_uint , arg4 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUngrabKeyboard ( arg1 : * mut Display , arg2 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUngrabPointer ( arg1 : * mut Display , arg2 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUngrabServer ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUninstallColormap ( arg1 : * mut Display , arg2 : Colormap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUnloadFont ( arg1 : * mut Display , arg2 : Font , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUnmapSubwindows ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUnmapWindow ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XVendorRelease ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XWarpPointer ( arg1 : * mut Display , arg2 : Window , arg3 : Window , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_int , arg9 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XWidthMMOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XWidthOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XWindowEvent ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_long , arg4 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XWriteBitmapFile ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : Pixmap , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSupportsLocale ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetLocaleModifiers ( arg1 : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XOpenOM ( arg1 : * mut Display , arg2 : * mut _XrmHashBucketRec , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const :: std :: os :: raw :: c_char , ) -> XOM ; 
} extern "C" {
 pub fn XCloseOM ( arg1 : XOM , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetOMValues ( arg1 : XOM , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XGetOMValues ( arg1 : XOM , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XDisplayOfOM ( arg1 : XOM , ) -> * mut Display ; 
} extern "C" {
 pub fn XLocaleOfOM ( arg1 : XOM , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XCreateOC ( arg1 : XOM , ... ) -> XOC ; 
} extern "C" {
 pub fn XDestroyOC ( arg1 : XOC , ) ; 
} extern "C" {
 pub fn XOMOfOC ( arg1 : XOC , ) -> XOM ; 
} extern "C" {
 pub fn XSetOCValues ( arg1 : XOC , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XGetOCValues ( arg1 : XOC , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XCreateFontSet ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut * mut * mut :: std :: os :: raw :: c_char , arg4 : * mut :: std :: os :: raw :: c_int , arg5 : * mut * mut :: std :: os :: raw :: c_char , ) -> XFontSet ; 
} extern "C" {
 pub fn XFreeFontSet ( arg1 : * mut Display , arg2 : XFontSet , ) ; 
} extern "C" {
 pub fn XFontsOfFontSet ( arg1 : XFontSet , arg2 : * mut * mut * mut XFontStruct , arg3 : * mut * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XBaseFontNameListOfFontSet ( arg1 : XFontSet , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XLocaleOfFontSet ( arg1 : XFontSet , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XContextDependentDrawing ( arg1 : XFontSet , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDirectionalDependentDrawing ( arg1 : XFontSet , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XContextualDrawing ( arg1 : XFontSet , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XExtentsOfFontSet ( arg1 : XFontSet , ) -> * mut XFontSetExtents ; 
} extern "C" {
 pub fn XmbTextEscapement ( arg1 : XFontSet , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XwcTextEscapement ( arg1 : XFontSet , arg2 : * const wchar_t , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn Xutf8TextEscapement ( arg1 : XFontSet , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XmbTextExtents ( arg1 : XFontSet , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut XRectangle , arg5 : * mut XRectangle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XwcTextExtents ( arg1 : XFontSet , arg2 : * const wchar_t , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut XRectangle , arg5 : * mut XRectangle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn Xutf8TextExtents ( arg1 : XFontSet , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut XRectangle , arg5 : * mut XRectangle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XmbTextPerCharExtents ( arg1 : XFontSet , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut XRectangle , arg5 : * mut XRectangle , arg6 : :: std :: os :: raw :: c_int , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut XRectangle , arg9 : * mut XRectangle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XwcTextPerCharExtents ( arg1 : XFontSet , arg2 : * const wchar_t , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut XRectangle , arg5 : * mut XRectangle , arg6 : :: std :: os :: raw :: c_int , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut XRectangle , arg9 : * mut XRectangle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn Xutf8TextPerCharExtents ( arg1 : XFontSet , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut XRectangle , arg5 : * mut XRectangle , arg6 : :: std :: os :: raw :: c_int , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut XRectangle , arg9 : * mut XRectangle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XmbDrawText ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut XmbTextItem , arg7 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn XwcDrawText ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut XwcTextItem , arg7 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn Xutf8DrawText ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut XmbTextItem , arg7 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn XmbDrawString ( arg1 : * mut Display , arg2 : Drawable , arg3 : XFontSet , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_char , arg8 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn XwcDrawString ( arg1 : * mut Display , arg2 : Drawable , arg3 : XFontSet , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : * const wchar_t , arg8 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn Xutf8DrawString ( arg1 : * mut Display , arg2 : Drawable , arg3 : XFontSet , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_char , arg8 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn XmbDrawImageString ( arg1 : * mut Display , arg2 : Drawable , arg3 : XFontSet , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_char , arg8 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn XwcDrawImageString ( arg1 : * mut Display , arg2 : Drawable , arg3 : XFontSet , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : * const wchar_t , arg8 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn Xutf8DrawImageString ( arg1 : * mut Display , arg2 : Drawable , arg3 : XFontSet , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_char , arg8 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn XOpenIM ( arg1 : * mut Display , arg2 : * mut _XrmHashBucketRec , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : * mut :: std :: os :: raw :: c_char , ) -> XIM ; 
} extern "C" {
 pub fn XCloseIM ( arg1 : XIM , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetIMValues ( arg1 : XIM , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XSetIMValues ( arg1 : XIM , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XDisplayOfIM ( arg1 : XIM , ) -> * mut Display ; 
} extern "C" {
 pub fn XLocaleOfIM ( arg1 : XIM , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XCreateIC ( arg1 : XIM , ... ) -> XIC ; 
} extern "C" {
 pub fn XDestroyIC ( arg1 : XIC , ) ; 
} extern "C" {
 pub fn XSetICFocus ( arg1 : XIC , ) ; 
} extern "C" {
 pub fn XUnsetICFocus ( arg1 : XIC , ) ; 
} extern "C" {
 pub fn XwcResetIC ( arg1 : XIC , ) -> * mut wchar_t ; 
} extern "C" {
 pub fn XmbResetIC ( arg1 : XIC , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn Xutf8ResetIC ( arg1 : XIC , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XSetICValues ( arg1 : XIC , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XGetICValues ( arg1 : XIC , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XIMOfIC ( arg1 : XIC , ) -> XIM ; 
} extern "C" {
 pub fn XFilterEvent ( arg1 : * mut XEvent , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XmbLookupString ( arg1 : XIC , arg2 : * mut XKeyPressedEvent , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut KeySym , arg6 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XwcLookupString ( arg1 : XIC , arg2 : * mut XKeyPressedEvent , arg3 : * mut wchar_t , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut KeySym , arg6 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn Xutf8LookupString ( arg1 : XIC , arg2 : * mut XKeyPressedEvent , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut KeySym , arg6 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XVaCreateNestedList ( arg1 : :: std :: os :: raw :: c_int , ... ) -> XVaNestedList ; 
} extern "C" {
 pub fn XRegisterIMInstantiateCallback ( arg1 : * mut Display , arg2 : * mut _XrmHashBucketRec , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : * mut :: std :: os :: raw :: c_char , arg5 : XIDProc , arg6 : XPointer , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUnregisterIMInstantiateCallback ( arg1 : * mut Display , arg2 : * mut _XrmHashBucketRec , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : * mut :: std :: os :: raw :: c_char , arg5 : XIDProc , arg6 : XPointer , ) -> :: std :: os :: raw :: c_int ; 
} pub type XConnectionWatchProc = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : XPointer , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut XPointer ) > ; extern "C" {
 pub fn XInternalConnectionNumbers ( arg1 : * mut Display , arg2 : * mut * mut :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XProcessInternalConnection ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn XAddConnectionWatch ( arg1 : * mut Display , arg2 : XConnectionWatchProc , arg3 : XPointer , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRemoveConnectionWatch ( arg1 : * mut Display , arg2 : XConnectionWatchProc , arg3 : XPointer , ) ; 
} extern "C" {
 pub fn XSetAuthorization ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn _Xmbtowc ( arg1 : * mut wchar_t , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _Xwctomb ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : wchar_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetEventData ( arg1 : * mut Display , arg2 : * mut XGenericEventCookie , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeEventData ( arg1 : * mut Display , arg2 : * mut XGenericEventCookie , ) ; 
}