/* automatically generated by rust-bindgen */

pub const XlibSpecificationRelease : :: std :: os :: raw :: c_uint = 6 ; pub const _SYS_TYPES_H : :: std :: os :: raw :: c_uint = 1 ; pub const _FEATURES_H : :: std :: os :: raw :: c_uint = 1 ; pub const _DEFAULT_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ISOC11 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ISOC99 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ISOC95 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX_IMPLICITLY : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const _POSIX_C_SOURCE : :: std :: os :: raw :: c_uint = 200809 ; pub const __USE_POSIX : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX2 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX199309 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_POSIX199506 : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_XOPEN2K : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_XOPEN2K8 : :: std :: os :: raw :: c_uint = 1 ; pub const _ATFILE_SOURCE : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_MISC : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_ATFILE : :: std :: os :: raw :: c_uint = 1 ; pub const __USE_FORTIFY_LEVEL : :: std :: os :: raw :: c_uint = 0 ; pub const __GLIBC_USE_DEPRECATED_GETS : :: std :: os :: raw :: c_uint = 0 ; pub const _STDC_PREDEF_H : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_IEC_559__ : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_IEC_559_COMPLEX__ : :: std :: os :: raw :: c_uint = 1 ; pub const __STDC_ISO_10646__ : :: std :: os :: raw :: c_uint = 201706 ; pub const __STDC_NO_THREADS__ : :: std :: os :: raw :: c_uint = 1 ; pub const __GNU_LIBRARY__ : :: std :: os :: raw :: c_uint = 6 ; pub const __GLIBC__ : :: std :: os :: raw :: c_uint = 2 ; pub const __GLIBC_MINOR__ : :: std :: os :: raw :: c_uint = 26 ; pub const _SYS_CDEFS_H : :: std :: os :: raw :: c_uint = 1 ; pub const __glibc_c99_flexarr_available : :: std :: os :: raw :: c_uint = 1 ; pub const __WORDSIZE : :: std :: os :: raw :: c_uint = 64 ; pub const __WORDSIZE_TIME64_COMPAT32 : :: std :: os :: raw :: c_uint = 1 ; pub const __SYSCALL_WORDSIZE : :: std :: os :: raw :: c_uint = 64 ; pub const __HAVE_GENERIC_SELECTION : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_TYPES_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_TYPESIZES_H : :: std :: os :: raw :: c_uint = 1 ; pub const __OFF_T_MATCHES_OFF64_T : :: std :: os :: raw :: c_uint = 1 ; pub const __INO_T_MATCHES_INO64_T : :: std :: os :: raw :: c_uint = 1 ; pub const __RLIM_T_MATCHES_RLIM64_T : :: std :: os :: raw :: c_uint = 1 ; pub const __FD_SETSIZE : :: std :: os :: raw :: c_uint = 1024 ; pub const __clock_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __clockid_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __time_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __timer_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_STDINT_INTN_H : :: std :: os :: raw :: c_uint = 1 ; pub const __BIT_TYPES_DEFINED__ : :: std :: os :: raw :: c_uint = 1 ; pub const _ENDIAN_H : :: std :: os :: raw :: c_uint = 1 ; pub const __LITTLE_ENDIAN : :: std :: os :: raw :: c_uint = 1234 ; pub const __BIG_ENDIAN : :: std :: os :: raw :: c_uint = 4321 ; pub const __PDP_ENDIAN : :: std :: os :: raw :: c_uint = 3412 ; pub const __BYTE_ORDER : :: std :: os :: raw :: c_uint = 1234 ; pub const __FLOAT_WORD_ORDER : :: std :: os :: raw :: c_uint = 1234 ; pub const LITTLE_ENDIAN : :: std :: os :: raw :: c_uint = 1234 ; pub const BIG_ENDIAN : :: std :: os :: raw :: c_uint = 4321 ; pub const PDP_ENDIAN : :: std :: os :: raw :: c_uint = 3412 ; pub const BYTE_ORDER : :: std :: os :: raw :: c_uint = 1234 ; pub const _BITS_BYTESWAP_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_UINTN_IDENTITY_H : :: std :: os :: raw :: c_uint = 1 ; pub const _SYS_SELECT_H : :: std :: os :: raw :: c_uint = 1 ; pub const __FD_ZERO_STOS : & 'static [ u8 ; 6usize ] = b"stosq\0" ; pub const __sigset_t_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __timeval_defined : :: std :: os :: raw :: c_uint = 1 ; pub const __timespec_defined : :: std :: os :: raw :: c_uint = 1 ; pub const FD_SETSIZE : :: std :: os :: raw :: c_uint = 1024 ; pub const _SYS_SYSMACROS_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_SYSMACROS_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_PTHREADTYPES_COMMON_H : :: std :: os :: raw :: c_uint = 1 ; pub const _THREAD_SHARED_TYPES_H : :: std :: os :: raw :: c_uint = 1 ; pub const _BITS_PTHREADTYPES_ARCH_H : :: std :: os :: raw :: c_uint = 1 ; pub const __SIZEOF_PTHREAD_MUTEX_T : :: std :: os :: raw :: c_uint = 40 ; pub const __SIZEOF_PTHREAD_ATTR_T : :: std :: os :: raw :: c_uint = 56 ; pub const __SIZEOF_PTHREAD_RWLOCK_T : :: std :: os :: raw :: c_uint = 56 ; pub const __SIZEOF_PTHREAD_BARRIER_T : :: std :: os :: raw :: c_uint = 32 ; pub const __SIZEOF_PTHREAD_MUTEXATTR_T : :: std :: os :: raw :: c_uint = 4 ; pub const __SIZEOF_PTHREAD_COND_T : :: std :: os :: raw :: c_uint = 48 ; pub const __SIZEOF_PTHREAD_CONDATTR_T : :: std :: os :: raw :: c_uint = 4 ; pub const __SIZEOF_PTHREAD_RWLOCKATTR_T : :: std :: os :: raw :: c_uint = 8 ; pub const __SIZEOF_PTHREAD_BARRIERATTR_T : :: std :: os :: raw :: c_uint = 4 ; pub const __PTHREAD_MUTEX_LOCK_ELISION : :: std :: os :: raw :: c_uint = 1 ; pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED : :: std :: os :: raw :: c_uint = 1 ; pub const __PTHREAD_MUTEX_HAVE_PREV : :: std :: os :: raw :: c_uint = 1 ; pub const __have_pthread_attr_t : :: std :: os :: raw :: c_uint = 1 ; pub const X_PROTOCOL : :: std :: os :: raw :: c_uint = 11 ; pub const X_PROTOCOL_REVISION : :: std :: os :: raw :: c_uint = 0 ; pub const None : :: std :: os :: raw :: c_uint = 0 ; pub const ParentRelative : :: std :: os :: raw :: c_uint = 1 ; pub const CopyFromParent : :: std :: os :: raw :: c_uint = 0 ; pub const PointerWindow : :: std :: os :: raw :: c_uint = 0 ; pub const InputFocus : :: std :: os :: raw :: c_uint = 1 ; pub const PointerRoot : :: std :: os :: raw :: c_uint = 1 ; pub const AnyPropertyType : :: std :: os :: raw :: c_uint = 0 ; pub const AnyKey : :: std :: os :: raw :: c_uint = 0 ; pub const AnyButton : :: std :: os :: raw :: c_uint = 0 ; pub const AllTemporary : :: std :: os :: raw :: c_uint = 0 ; pub const CurrentTime : :: std :: os :: raw :: c_uint = 0 ; pub const NoSymbol : :: std :: os :: raw :: c_uint = 0 ; pub const NoEventMask : :: std :: os :: raw :: c_uint = 0 ; pub const KeyPressMask : :: std :: os :: raw :: c_uint = 1 ; pub const KeyReleaseMask : :: std :: os :: raw :: c_uint = 2 ; pub const ButtonPressMask : :: std :: os :: raw :: c_uint = 4 ; pub const ButtonReleaseMask : :: std :: os :: raw :: c_uint = 8 ; pub const EnterWindowMask : :: std :: os :: raw :: c_uint = 16 ; pub const LeaveWindowMask : :: std :: os :: raw :: c_uint = 32 ; pub const PointerMotionMask : :: std :: os :: raw :: c_uint = 64 ; pub const PointerMotionHintMask : :: std :: os :: raw :: c_uint = 128 ; pub const Button1MotionMask : :: std :: os :: raw :: c_uint = 256 ; pub const Button2MotionMask : :: std :: os :: raw :: c_uint = 512 ; pub const Button3MotionMask : :: std :: os :: raw :: c_uint = 1024 ; pub const Button4MotionMask : :: std :: os :: raw :: c_uint = 2048 ; pub const Button5MotionMask : :: std :: os :: raw :: c_uint = 4096 ; pub const ButtonMotionMask : :: std :: os :: raw :: c_uint = 8192 ; pub const KeymapStateMask : :: std :: os :: raw :: c_uint = 16384 ; pub const ExposureMask : :: std :: os :: raw :: c_uint = 32768 ; pub const VisibilityChangeMask : :: std :: os :: raw :: c_uint = 65536 ; pub const StructureNotifyMask : :: std :: os :: raw :: c_uint = 131072 ; pub const ResizeRedirectMask : :: std :: os :: raw :: c_uint = 262144 ; pub const SubstructureNotifyMask : :: std :: os :: raw :: c_uint = 524288 ; pub const SubstructureRedirectMask : :: std :: os :: raw :: c_uint = 1048576 ; pub const FocusChangeMask : :: std :: os :: raw :: c_uint = 2097152 ; pub const PropertyChangeMask : :: std :: os :: raw :: c_uint = 4194304 ; pub const ColormapChangeMask : :: std :: os :: raw :: c_uint = 8388608 ; pub const OwnerGrabButtonMask : :: std :: os :: raw :: c_uint = 16777216 ; pub const KeyPress : :: std :: os :: raw :: c_uint = 2 ; pub const KeyRelease : :: std :: os :: raw :: c_uint = 3 ; pub const ButtonPress : :: std :: os :: raw :: c_uint = 4 ; pub const ButtonRelease : :: std :: os :: raw :: c_uint = 5 ; pub const MotionNotify : :: std :: os :: raw :: c_uint = 6 ; pub const EnterNotify : :: std :: os :: raw :: c_uint = 7 ; pub const LeaveNotify : :: std :: os :: raw :: c_uint = 8 ; pub const FocusIn : :: std :: os :: raw :: c_uint = 9 ; pub const FocusOut : :: std :: os :: raw :: c_uint = 10 ; pub const KeymapNotify : :: std :: os :: raw :: c_uint = 11 ; pub const Expose : :: std :: os :: raw :: c_uint = 12 ; pub const GraphicsExpose : :: std :: os :: raw :: c_uint = 13 ; pub const NoExpose : :: std :: os :: raw :: c_uint = 14 ; pub const VisibilityNotify : :: std :: os :: raw :: c_uint = 15 ; pub const CreateNotify : :: std :: os :: raw :: c_uint = 16 ; pub const DestroyNotify : :: std :: os :: raw :: c_uint = 17 ; pub const UnmapNotify : :: std :: os :: raw :: c_uint = 18 ; pub const MapNotify : :: std :: os :: raw :: c_uint = 19 ; pub const MapRequest : :: std :: os :: raw :: c_uint = 20 ; pub const ReparentNotify : :: std :: os :: raw :: c_uint = 21 ; pub const ConfigureNotify : :: std :: os :: raw :: c_uint = 22 ; pub const ConfigureRequest : :: std :: os :: raw :: c_uint = 23 ; pub const GravityNotify : :: std :: os :: raw :: c_uint = 24 ; pub const ResizeRequest : :: std :: os :: raw :: c_uint = 25 ; pub const CirculateNotify : :: std :: os :: raw :: c_uint = 26 ; pub const CirculateRequest : :: std :: os :: raw :: c_uint = 27 ; pub const PropertyNotify : :: std :: os :: raw :: c_uint = 28 ; pub const SelectionClear : :: std :: os :: raw :: c_uint = 29 ; pub const SelectionRequest : :: std :: os :: raw :: c_uint = 30 ; pub const SelectionNotify : :: std :: os :: raw :: c_uint = 31 ; pub const ColormapNotify : :: std :: os :: raw :: c_uint = 32 ; pub const ClientMessage : :: std :: os :: raw :: c_uint = 33 ; pub const MappingNotify : :: std :: os :: raw :: c_uint = 34 ; pub const GenericEvent : :: std :: os :: raw :: c_uint = 35 ; pub const LASTEvent : :: std :: os :: raw :: c_uint = 36 ; pub const ShiftMask : :: std :: os :: raw :: c_uint = 1 ; pub const LockMask : :: std :: os :: raw :: c_uint = 2 ; pub const ControlMask : :: std :: os :: raw :: c_uint = 4 ; pub const Mod1Mask : :: std :: os :: raw :: c_uint = 8 ; pub const Mod2Mask : :: std :: os :: raw :: c_uint = 16 ; pub const Mod3Mask : :: std :: os :: raw :: c_uint = 32 ; pub const Mod4Mask : :: std :: os :: raw :: c_uint = 64 ; pub const Mod5Mask : :: std :: os :: raw :: c_uint = 128 ; pub const ShiftMapIndex : :: std :: os :: raw :: c_uint = 0 ; pub const LockMapIndex : :: std :: os :: raw :: c_uint = 1 ; pub const ControlMapIndex : :: std :: os :: raw :: c_uint = 2 ; pub const Mod1MapIndex : :: std :: os :: raw :: c_uint = 3 ; pub const Mod2MapIndex : :: std :: os :: raw :: c_uint = 4 ; pub const Mod3MapIndex : :: std :: os :: raw :: c_uint = 5 ; pub const Mod4MapIndex : :: std :: os :: raw :: c_uint = 6 ; pub const Mod5MapIndex : :: std :: os :: raw :: c_uint = 7 ; pub const Button1Mask : :: std :: os :: raw :: c_uint = 256 ; pub const Button2Mask : :: std :: os :: raw :: c_uint = 512 ; pub const Button3Mask : :: std :: os :: raw :: c_uint = 1024 ; pub const Button4Mask : :: std :: os :: raw :: c_uint = 2048 ; pub const Button5Mask : :: std :: os :: raw :: c_uint = 4096 ; pub const AnyModifier : :: std :: os :: raw :: c_uint = 32768 ; pub const Button1 : :: std :: os :: raw :: c_uint = 1 ; pub const Button2 : :: std :: os :: raw :: c_uint = 2 ; pub const Button3 : :: std :: os :: raw :: c_uint = 3 ; pub const Button4 : :: std :: os :: raw :: c_uint = 4 ; pub const Button5 : :: std :: os :: raw :: c_uint = 5 ; pub const NotifyNormal : :: std :: os :: raw :: c_uint = 0 ; pub const NotifyGrab : :: std :: os :: raw :: c_uint = 1 ; pub const NotifyUngrab : :: std :: os :: raw :: c_uint = 2 ; pub const NotifyWhileGrabbed : :: std :: os :: raw :: c_uint = 3 ; pub const NotifyHint : :: std :: os :: raw :: c_uint = 1 ; pub const NotifyAncestor : :: std :: os :: raw :: c_uint = 0 ; pub const NotifyVirtual : :: std :: os :: raw :: c_uint = 1 ; pub const NotifyInferior : :: std :: os :: raw :: c_uint = 2 ; pub const NotifyNonlinear : :: std :: os :: raw :: c_uint = 3 ; pub const NotifyNonlinearVirtual : :: std :: os :: raw :: c_uint = 4 ; pub const NotifyPointer : :: std :: os :: raw :: c_uint = 5 ; pub const NotifyPointerRoot : :: std :: os :: raw :: c_uint = 6 ; pub const NotifyDetailNone : :: std :: os :: raw :: c_uint = 7 ; pub const VisibilityUnobscured : :: std :: os :: raw :: c_uint = 0 ; pub const VisibilityPartiallyObscured : :: std :: os :: raw :: c_uint = 1 ; pub const VisibilityFullyObscured : :: std :: os :: raw :: c_uint = 2 ; pub const PlaceOnTop : :: std :: os :: raw :: c_uint = 0 ; pub const PlaceOnBottom : :: std :: os :: raw :: c_uint = 1 ; pub const FamilyInternet : :: std :: os :: raw :: c_uint = 0 ; pub const FamilyDECnet : :: std :: os :: raw :: c_uint = 1 ; pub const FamilyChaos : :: std :: os :: raw :: c_uint = 2 ; pub const FamilyInternet6 : :: std :: os :: raw :: c_uint = 6 ; pub const FamilyServerInterpreted : :: std :: os :: raw :: c_uint = 5 ; pub const PropertyNewValue : :: std :: os :: raw :: c_uint = 0 ; pub const PropertyDelete : :: std :: os :: raw :: c_uint = 1 ; pub const ColormapUninstalled : :: std :: os :: raw :: c_uint = 0 ; pub const ColormapInstalled : :: std :: os :: raw :: c_uint = 1 ; pub const GrabModeSync : :: std :: os :: raw :: c_uint = 0 ; pub const GrabModeAsync : :: std :: os :: raw :: c_uint = 1 ; pub const GrabSuccess : :: std :: os :: raw :: c_uint = 0 ; pub const AlreadyGrabbed : :: std :: os :: raw :: c_uint = 1 ; pub const GrabInvalidTime : :: std :: os :: raw :: c_uint = 2 ; pub const GrabNotViewable : :: std :: os :: raw :: c_uint = 3 ; pub const GrabFrozen : :: std :: os :: raw :: c_uint = 4 ; pub const AsyncPointer : :: std :: os :: raw :: c_uint = 0 ; pub const SyncPointer : :: std :: os :: raw :: c_uint = 1 ; pub const ReplayPointer : :: std :: os :: raw :: c_uint = 2 ; pub const AsyncKeyboard : :: std :: os :: raw :: c_uint = 3 ; pub const SyncKeyboard : :: std :: os :: raw :: c_uint = 4 ; pub const ReplayKeyboard : :: std :: os :: raw :: c_uint = 5 ; pub const AsyncBoth : :: std :: os :: raw :: c_uint = 6 ; pub const SyncBoth : :: std :: os :: raw :: c_uint = 7 ; pub const RevertToParent : :: std :: os :: raw :: c_uint = 2 ; pub const Success : :: std :: os :: raw :: c_uint = 0 ; pub const BadRequest : :: std :: os :: raw :: c_uint = 1 ; pub const BadValue : :: std :: os :: raw :: c_uint = 2 ; pub const BadWindow : :: std :: os :: raw :: c_uint = 3 ; pub const BadPixmap : :: std :: os :: raw :: c_uint = 4 ; pub const BadAtom : :: std :: os :: raw :: c_uint = 5 ; pub const BadCursor : :: std :: os :: raw :: c_uint = 6 ; pub const BadFont : :: std :: os :: raw :: c_uint = 7 ; pub const BadMatch : :: std :: os :: raw :: c_uint = 8 ; pub const BadDrawable : :: std :: os :: raw :: c_uint = 9 ; pub const BadAccess : :: std :: os :: raw :: c_uint = 10 ; pub const BadAlloc : :: std :: os :: raw :: c_uint = 11 ; pub const BadColor : :: std :: os :: raw :: c_uint = 12 ; pub const BadGC : :: std :: os :: raw :: c_uint = 13 ; pub const BadIDChoice : :: std :: os :: raw :: c_uint = 14 ; pub const BadName : :: std :: os :: raw :: c_uint = 15 ; pub const BadLength : :: std :: os :: raw :: c_uint = 16 ; pub const BadImplementation : :: std :: os :: raw :: c_uint = 17 ; pub const FirstExtensionError : :: std :: os :: raw :: c_uint = 128 ; pub const LastExtensionError : :: std :: os :: raw :: c_uint = 255 ; pub const InputOutput : :: std :: os :: raw :: c_uint = 1 ; pub const InputOnly : :: std :: os :: raw :: c_uint = 2 ; pub const CWBackPixmap : :: std :: os :: raw :: c_uint = 1 ; pub const CWBackPixel : :: std :: os :: raw :: c_uint = 2 ; pub const CWBorderPixmap : :: std :: os :: raw :: c_uint = 4 ; pub const CWBorderPixel : :: std :: os :: raw :: c_uint = 8 ; pub const CWBitGravity : :: std :: os :: raw :: c_uint = 16 ; pub const CWWinGravity : :: std :: os :: raw :: c_uint = 32 ; pub const CWBackingStore : :: std :: os :: raw :: c_uint = 64 ; pub const CWBackingPlanes : :: std :: os :: raw :: c_uint = 128 ; pub const CWBackingPixel : :: std :: os :: raw :: c_uint = 256 ; pub const CWOverrideRedirect : :: std :: os :: raw :: c_uint = 512 ; pub const CWSaveUnder : :: std :: os :: raw :: c_uint = 1024 ; pub const CWEventMask : :: std :: os :: raw :: c_uint = 2048 ; pub const CWDontPropagate : :: std :: os :: raw :: c_uint = 4096 ; pub const CWColormap : :: std :: os :: raw :: c_uint = 8192 ; pub const CWCursor : :: std :: os :: raw :: c_uint = 16384 ; pub const CWX : :: std :: os :: raw :: c_uint = 1 ; pub const CWY : :: std :: os :: raw :: c_uint = 2 ; pub const CWWidth : :: std :: os :: raw :: c_uint = 4 ; pub const CWHeight : :: std :: os :: raw :: c_uint = 8 ; pub const CWBorderWidth : :: std :: os :: raw :: c_uint = 16 ; pub const CWSibling : :: std :: os :: raw :: c_uint = 32 ; pub const CWStackMode : :: std :: os :: raw :: c_uint = 64 ; pub const ForgetGravity : :: std :: os :: raw :: c_uint = 0 ; pub const NorthWestGravity : :: std :: os :: raw :: c_uint = 1 ; pub const NorthGravity : :: std :: os :: raw :: c_uint = 2 ; pub const NorthEastGravity : :: std :: os :: raw :: c_uint = 3 ; pub const WestGravity : :: std :: os :: raw :: c_uint = 4 ; pub const CenterGravity : :: std :: os :: raw :: c_uint = 5 ; pub const EastGravity : :: std :: os :: raw :: c_uint = 6 ; pub const SouthWestGravity : :: std :: os :: raw :: c_uint = 7 ; pub const SouthGravity : :: std :: os :: raw :: c_uint = 8 ; pub const SouthEastGravity : :: std :: os :: raw :: c_uint = 9 ; pub const StaticGravity : :: std :: os :: raw :: c_uint = 10 ; pub const UnmapGravity : :: std :: os :: raw :: c_uint = 0 ; pub const NotUseful : :: std :: os :: raw :: c_uint = 0 ; pub const WhenMapped : :: std :: os :: raw :: c_uint = 1 ; pub const Always : :: std :: os :: raw :: c_uint = 2 ; pub const IsUnmapped : :: std :: os :: raw :: c_uint = 0 ; pub const IsUnviewable : :: std :: os :: raw :: c_uint = 1 ; pub const IsViewable : :: std :: os :: raw :: c_uint = 2 ; pub const SetModeInsert : :: std :: os :: raw :: c_uint = 0 ; pub const SetModeDelete : :: std :: os :: raw :: c_uint = 1 ; pub const DestroyAll : :: std :: os :: raw :: c_uint = 0 ; pub const RetainPermanent : :: std :: os :: raw :: c_uint = 1 ; pub const RetainTemporary : :: std :: os :: raw :: c_uint = 2 ; pub const Above : :: std :: os :: raw :: c_uint = 0 ; pub const Below : :: std :: os :: raw :: c_uint = 1 ; pub const TopIf : :: std :: os :: raw :: c_uint = 2 ; pub const BottomIf : :: std :: os :: raw :: c_uint = 3 ; pub const Opposite : :: std :: os :: raw :: c_uint = 4 ; pub const RaiseLowest : :: std :: os :: raw :: c_uint = 0 ; pub const LowerHighest : :: std :: os :: raw :: c_uint = 1 ; pub const PropModeReplace : :: std :: os :: raw :: c_uint = 0 ; pub const PropModePrepend : :: std :: os :: raw :: c_uint = 1 ; pub const PropModeAppend : :: std :: os :: raw :: c_uint = 2 ; pub const GXclear : :: std :: os :: raw :: c_uint = 0 ; pub const GXand : :: std :: os :: raw :: c_uint = 1 ; pub const GXandReverse : :: std :: os :: raw :: c_uint = 2 ; pub const GXcopy : :: std :: os :: raw :: c_uint = 3 ; pub const GXandInverted : :: std :: os :: raw :: c_uint = 4 ; pub const GXnoop : :: std :: os :: raw :: c_uint = 5 ; pub const GXxor : :: std :: os :: raw :: c_uint = 6 ; pub const GXor : :: std :: os :: raw :: c_uint = 7 ; pub const GXnor : :: std :: os :: raw :: c_uint = 8 ; pub const GXequiv : :: std :: os :: raw :: c_uint = 9 ; pub const GXinvert : :: std :: os :: raw :: c_uint = 10 ; pub const GXorReverse : :: std :: os :: raw :: c_uint = 11 ; pub const GXcopyInverted : :: std :: os :: raw :: c_uint = 12 ; pub const GXorInverted : :: std :: os :: raw :: c_uint = 13 ; pub const GXnand : :: std :: os :: raw :: c_uint = 14 ; pub const GXset : :: std :: os :: raw :: c_uint = 15 ; pub const LineSolid : :: std :: os :: raw :: c_uint = 0 ; pub const LineOnOffDash : :: std :: os :: raw :: c_uint = 1 ; pub const LineDoubleDash : :: std :: os :: raw :: c_uint = 2 ; pub const CapNotLast : :: std :: os :: raw :: c_uint = 0 ; pub const CapButt : :: std :: os :: raw :: c_uint = 1 ; pub const CapRound : :: std :: os :: raw :: c_uint = 2 ; pub const CapProjecting : :: std :: os :: raw :: c_uint = 3 ; pub const JoinMiter : :: std :: os :: raw :: c_uint = 0 ; pub const JoinRound : :: std :: os :: raw :: c_uint = 1 ; pub const JoinBevel : :: std :: os :: raw :: c_uint = 2 ; pub const FillSolid : :: std :: os :: raw :: c_uint = 0 ; pub const FillTiled : :: std :: os :: raw :: c_uint = 1 ; pub const FillStippled : :: std :: os :: raw :: c_uint = 2 ; pub const FillOpaqueStippled : :: std :: os :: raw :: c_uint = 3 ; pub const EvenOddRule : :: std :: os :: raw :: c_uint = 0 ; pub const WindingRule : :: std :: os :: raw :: c_uint = 1 ; pub const ClipByChildren : :: std :: os :: raw :: c_uint = 0 ; pub const IncludeInferiors : :: std :: os :: raw :: c_uint = 1 ; pub const Unsorted : :: std :: os :: raw :: c_uint = 0 ; pub const YSorted : :: std :: os :: raw :: c_uint = 1 ; pub const YXSorted : :: std :: os :: raw :: c_uint = 2 ; pub const YXBanded : :: std :: os :: raw :: c_uint = 3 ; pub const CoordModeOrigin : :: std :: os :: raw :: c_uint = 0 ; pub const CoordModePrevious : :: std :: os :: raw :: c_uint = 1 ; pub const Complex : :: std :: os :: raw :: c_uint = 0 ; pub const Nonconvex : :: std :: os :: raw :: c_uint = 1 ; pub const Convex : :: std :: os :: raw :: c_uint = 2 ; pub const ArcChord : :: std :: os :: raw :: c_uint = 0 ; pub const ArcPieSlice : :: std :: os :: raw :: c_uint = 1 ; pub const GCFunction : :: std :: os :: raw :: c_uint = 1 ; pub const GCPlaneMask : :: std :: os :: raw :: c_uint = 2 ; pub const GCForeground : :: std :: os :: raw :: c_uint = 4 ; pub const GCBackground : :: std :: os :: raw :: c_uint = 8 ; pub const GCLineWidth : :: std :: os :: raw :: c_uint = 16 ; pub const GCLineStyle : :: std :: os :: raw :: c_uint = 32 ; pub const GCCapStyle : :: std :: os :: raw :: c_uint = 64 ; pub const GCJoinStyle : :: std :: os :: raw :: c_uint = 128 ; pub const GCFillStyle : :: std :: os :: raw :: c_uint = 256 ; pub const GCFillRule : :: std :: os :: raw :: c_uint = 512 ; pub const GCTile : :: std :: os :: raw :: c_uint = 1024 ; pub const GCStipple : :: std :: os :: raw :: c_uint = 2048 ; pub const GCTileStipXOrigin : :: std :: os :: raw :: c_uint = 4096 ; pub const GCTileStipYOrigin : :: std :: os :: raw :: c_uint = 8192 ; pub const GCFont : :: std :: os :: raw :: c_uint = 16384 ; pub const GCSubwindowMode : :: std :: os :: raw :: c_uint = 32768 ; pub const GCGraphicsExposures : :: std :: os :: raw :: c_uint = 65536 ; pub const GCClipXOrigin : :: std :: os :: raw :: c_uint = 131072 ; pub const GCClipYOrigin : :: std :: os :: raw :: c_uint = 262144 ; pub const GCClipMask : :: std :: os :: raw :: c_uint = 524288 ; pub const GCDashOffset : :: std :: os :: raw :: c_uint = 1048576 ; pub const GCDashList : :: std :: os :: raw :: c_uint = 2097152 ; pub const GCArcMode : :: std :: os :: raw :: c_uint = 4194304 ; pub const GCLastBit : :: std :: os :: raw :: c_uint = 22 ; pub const FontLeftToRight : :: std :: os :: raw :: c_uint = 0 ; pub const FontRightToLeft : :: std :: os :: raw :: c_uint = 1 ; pub const FontChange : :: std :: os :: raw :: c_uint = 255 ; pub const XYBitmap : :: std :: os :: raw :: c_uint = 0 ; pub const XYPixmap : :: std :: os :: raw :: c_uint = 1 ; pub const ZPixmap : :: std :: os :: raw :: c_uint = 2 ; pub const AllocNone : :: std :: os :: raw :: c_uint = 0 ; pub const AllocAll : :: std :: os :: raw :: c_uint = 1 ; pub const DoRed : :: std :: os :: raw :: c_uint = 1 ; pub const DoGreen : :: std :: os :: raw :: c_uint = 2 ; pub const DoBlue : :: std :: os :: raw :: c_uint = 4 ; pub const CursorShape : :: std :: os :: raw :: c_uint = 0 ; pub const TileShape : :: std :: os :: raw :: c_uint = 1 ; pub const StippleShape : :: std :: os :: raw :: c_uint = 2 ; pub const AutoRepeatModeOff : :: std :: os :: raw :: c_uint = 0 ; pub const AutoRepeatModeOn : :: std :: os :: raw :: c_uint = 1 ; pub const AutoRepeatModeDefault : :: std :: os :: raw :: c_uint = 2 ; pub const LedModeOff : :: std :: os :: raw :: c_uint = 0 ; pub const LedModeOn : :: std :: os :: raw :: c_uint = 1 ; pub const KBKeyClickPercent : :: std :: os :: raw :: c_uint = 1 ; pub const KBBellPercent : :: std :: os :: raw :: c_uint = 2 ; pub const KBBellPitch : :: std :: os :: raw :: c_uint = 4 ; pub const KBBellDuration : :: std :: os :: raw :: c_uint = 8 ; pub const KBLed : :: std :: os :: raw :: c_uint = 16 ; pub const KBLedMode : :: std :: os :: raw :: c_uint = 32 ; pub const KBKey : :: std :: os :: raw :: c_uint = 64 ; pub const KBAutoRepeatMode : :: std :: os :: raw :: c_uint = 128 ; pub const MappingSuccess : :: std :: os :: raw :: c_uint = 0 ; pub const MappingBusy : :: std :: os :: raw :: c_uint = 1 ; pub const MappingFailed : :: std :: os :: raw :: c_uint = 2 ; pub const MappingModifier : :: std :: os :: raw :: c_uint = 0 ; pub const MappingKeyboard : :: std :: os :: raw :: c_uint = 1 ; pub const MappingPointer : :: std :: os :: raw :: c_uint = 2 ; pub const DontPreferBlanking : :: std :: os :: raw :: c_uint = 0 ; pub const PreferBlanking : :: std :: os :: raw :: c_uint = 1 ; pub const DefaultBlanking : :: std :: os :: raw :: c_uint = 2 ; pub const DisableScreenSaver : :: std :: os :: raw :: c_uint = 0 ; pub const DisableScreenInterval : :: std :: os :: raw :: c_uint = 0 ; pub const DontAllowExposures : :: std :: os :: raw :: c_uint = 0 ; pub const AllowExposures : :: std :: os :: raw :: c_uint = 1 ; pub const DefaultExposures : :: std :: os :: raw :: c_uint = 2 ; pub const ScreenSaverReset : :: std :: os :: raw :: c_uint = 0 ; pub const ScreenSaverActive : :: std :: os :: raw :: c_uint = 1 ; pub const HostInsert : :: std :: os :: raw :: c_uint = 0 ; pub const HostDelete : :: std :: os :: raw :: c_uint = 1 ; pub const EnableAccess : :: std :: os :: raw :: c_uint = 1 ; pub const DisableAccess : :: std :: os :: raw :: c_uint = 0 ; pub const StaticGray : :: std :: os :: raw :: c_uint = 0 ; pub const GrayScale : :: std :: os :: raw :: c_uint = 1 ; pub const StaticColor : :: std :: os :: raw :: c_uint = 2 ; pub const PseudoColor : :: std :: os :: raw :: c_uint = 3 ; pub const TrueColor : :: std :: os :: raw :: c_uint = 4 ; pub const DirectColor : :: std :: os :: raw :: c_uint = 5 ; pub const LSBFirst : :: std :: os :: raw :: c_uint = 0 ; pub const MSBFirst : :: std :: os :: raw :: c_uint = 1 ; pub const NeedFunctionPrototypes : :: std :: os :: raw :: c_uint = 1 ; pub const NeedVarargsPrototypes : :: std :: os :: raw :: c_uint = 1 ; pub const NeedNestedPrototypes : :: std :: os :: raw :: c_uint = 1 ; pub const FUNCPROTO : :: std :: os :: raw :: c_uint = 15 ; pub const NeedWidePrototypes : :: std :: os :: raw :: c_uint = 0 ; pub const X_HAVE_UTF8_STRING : :: std :: os :: raw :: c_uint = 1 ; pub const True : :: std :: os :: raw :: c_uint = 1 ; pub const False : :: std :: os :: raw :: c_uint = 0 ; pub const QueuedAlready : :: std :: os :: raw :: c_uint = 0 ; pub const QueuedAfterReading : :: std :: os :: raw :: c_uint = 1 ; pub const QueuedAfterFlush : :: std :: os :: raw :: c_uint = 2 ; pub const XNRequiredCharSet : & 'static [ u8 ; 16usize ] = b"requiredCharSet\0" ; pub const XNQueryOrientation : & 'static [ u8 ; 17usize ] = b"queryOrientation\0" ; pub const XNBaseFontName : & 'static [ u8 ; 13usize ] = b"baseFontName\0" ; pub const XNOMAutomatic : & 'static [ u8 ; 12usize ] = b"omAutomatic\0" ; pub const XNMissingCharSet : & 'static [ u8 ; 15usize ] = b"missingCharSet\0" ; pub const XNDefaultString : & 'static [ u8 ; 14usize ] = b"defaultString\0" ; pub const XNOrientation : & 'static [ u8 ; 12usize ] = b"orientation\0" ; pub const XNDirectionalDependentDrawing : & 'static [ u8 ; 28usize ] = b"directionalDependentDrawing\0" ; pub const XNContextualDrawing : & 'static [ u8 ; 18usize ] = b"contextualDrawing\0" ; pub const XNFontInfo : & 'static [ u8 ; 9usize ] = b"fontInfo\0" ; pub const XIMPreeditArea : :: std :: os :: raw :: c_uint = 1 ; pub const XIMPreeditCallbacks : :: std :: os :: raw :: c_uint = 2 ; pub const XIMPreeditPosition : :: std :: os :: raw :: c_uint = 4 ; pub const XIMPreeditNothing : :: std :: os :: raw :: c_uint = 8 ; pub const XIMPreeditNone : :: std :: os :: raw :: c_uint = 16 ; pub const XIMStatusArea : :: std :: os :: raw :: c_uint = 256 ; pub const XIMStatusCallbacks : :: std :: os :: raw :: c_uint = 512 ; pub const XIMStatusNothing : :: std :: os :: raw :: c_uint = 1024 ; pub const XIMStatusNone : :: std :: os :: raw :: c_uint = 2048 ; pub const XNVaNestedList : & 'static [ u8 ; 15usize ] = b"XNVaNestedList\0" ; pub const XNQueryInputStyle : & 'static [ u8 ; 16usize ] = b"queryInputStyle\0" ; pub const XNClientWindow : & 'static [ u8 ; 13usize ] = b"clientWindow\0" ; pub const XNInputStyle : & 'static [ u8 ; 11usize ] = b"inputStyle\0" ; pub const XNFocusWindow : & 'static [ u8 ; 12usize ] = b"focusWindow\0" ; pub const XNResourceName : & 'static [ u8 ; 13usize ] = b"resourceName\0" ; pub const XNResourceClass : & 'static [ u8 ; 14usize ] = b"resourceClass\0" ; pub const XNGeometryCallback : & 'static [ u8 ; 17usize ] = b"geometryCallback\0" ; pub const XNDestroyCallback : & 'static [ u8 ; 16usize ] = b"destroyCallback\0" ; pub const XNFilterEvents : & 'static [ u8 ; 13usize ] = b"filterEvents\0" ; pub const XNPreeditStartCallback : & 'static [ u8 ; 21usize ] = b"preeditStartCallback\0" ; pub const XNPreeditDoneCallback : & 'static [ u8 ; 20usize ] = b"preeditDoneCallback\0" ; pub const XNPreeditDrawCallback : & 'static [ u8 ; 20usize ] = b"preeditDrawCallback\0" ; pub const XNPreeditCaretCallback : & 'static [ u8 ; 21usize ] = b"preeditCaretCallback\0" ; pub const XNPreeditStateNotifyCallback : & 'static [ u8 ; 27usize ] = b"preeditStateNotifyCallback\0" ; pub const XNPreeditAttributes : & 'static [ u8 ; 18usize ] = b"preeditAttributes\0" ; pub const XNStatusStartCallback : & 'static [ u8 ; 20usize ] = b"statusStartCallback\0" ; pub const XNStatusDoneCallback : & 'static [ u8 ; 19usize ] = b"statusDoneCallback\0" ; pub const XNStatusDrawCallback : & 'static [ u8 ; 19usize ] = b"statusDrawCallback\0" ; pub const XNStatusAttributes : & 'static [ u8 ; 17usize ] = b"statusAttributes\0" ; pub const XNArea : & 'static [ u8 ; 5usize ] = b"area\0" ; pub const XNAreaNeeded : & 'static [ u8 ; 11usize ] = b"areaNeeded\0" ; pub const XNSpotLocation : & 'static [ u8 ; 13usize ] = b"spotLocation\0" ; pub const XNColormap : & 'static [ u8 ; 9usize ] = b"colorMap\0" ; pub const XNStdColormap : & 'static [ u8 ; 12usize ] = b"stdColorMap\0" ; pub const XNForeground : & 'static [ u8 ; 11usize ] = b"foreground\0" ; pub const XNBackground : & 'static [ u8 ; 11usize ] = b"background\0" ; pub const XNBackgroundPixmap : & 'static [ u8 ; 17usize ] = b"backgroundPixmap\0" ; pub const XNFontSet : & 'static [ u8 ; 8usize ] = b"fontSet\0" ; pub const XNLineSpace : & 'static [ u8 ; 10usize ] = b"lineSpace\0" ; pub const XNCursor : & 'static [ u8 ; 7usize ] = b"cursor\0" ; pub const XNQueryIMValuesList : & 'static [ u8 ; 18usize ] = b"queryIMValuesList\0" ; pub const XNQueryICValuesList : & 'static [ u8 ; 18usize ] = b"queryICValuesList\0" ; pub const XNVisiblePosition : & 'static [ u8 ; 16usize ] = b"visiblePosition\0" ; pub const XNR6PreeditCallback : & 'static [ u8 ; 18usize ] = b"r6PreeditCallback\0" ; pub const XNStringConversionCallback : & 'static [ u8 ; 25usize ] = b"stringConversionCallback\0" ; pub const XNStringConversion : & 'static [ u8 ; 17usize ] = b"stringConversion\0" ; pub const XNResetState : & 'static [ u8 ; 11usize ] = b"resetState\0" ; pub const XNHotKey : & 'static [ u8 ; 7usize ] = b"hotKey\0" ; pub const XNHotKeyState : & 'static [ u8 ; 12usize ] = b"hotKeyState\0" ; pub const XNPreeditState : & 'static [ u8 ; 13usize ] = b"preeditState\0" ; pub const XNSeparatorofNestedList : & 'static [ u8 ; 22usize ] = b"separatorofNestedList\0" ; pub const XBufferOverflow : :: std :: os :: raw :: c_int = -1 ; pub const XLookupNone : :: std :: os :: raw :: c_uint = 1 ; pub const XLookupChars : :: std :: os :: raw :: c_uint = 2 ; pub const XLookupKeySym : :: std :: os :: raw :: c_uint = 3 ; pub const XLookupBoth : :: std :: os :: raw :: c_uint = 4 ; pub const XIMReverse : :: std :: os :: raw :: c_uint = 1 ; pub const XIMUnderline : :: std :: os :: raw :: c_uint = 2 ; pub const XIMHighlight : :: std :: os :: raw :: c_uint = 4 ; pub const XIMPrimary : :: std :: os :: raw :: c_uint = 32 ; pub const XIMSecondary : :: std :: os :: raw :: c_uint = 64 ; pub const XIMTertiary : :: std :: os :: raw :: c_uint = 128 ; pub const XIMVisibleToForward : :: std :: os :: raw :: c_uint = 256 ; pub const XIMVisibleToBackword : :: std :: os :: raw :: c_uint = 512 ; pub const XIMVisibleToCenter : :: std :: os :: raw :: c_uint = 1024 ; pub const XIMPreeditUnKnown : :: std :: os :: raw :: c_uint = 0 ; pub const XIMPreeditEnable : :: std :: os :: raw :: c_uint = 1 ; pub const XIMPreeditDisable : :: std :: os :: raw :: c_uint = 2 ; pub const XIMInitialState : :: std :: os :: raw :: c_uint = 1 ; pub const XIMPreserveState : :: std :: os :: raw :: c_uint = 2 ; pub const XIMStringConversionLeftEdge : :: std :: os :: raw :: c_uint = 1 ; pub const XIMStringConversionRightEdge : :: std :: os :: raw :: c_uint = 2 ; pub const XIMStringConversionTopEdge : :: std :: os :: raw :: c_uint = 4 ; pub const XIMStringConversionBottomEdge : :: std :: os :: raw :: c_uint = 8 ; pub const XIMStringConversionConcealed : :: std :: os :: raw :: c_uint = 16 ; pub const XIMStringConversionWrapped : :: std :: os :: raw :: c_uint = 32 ; pub const XIMStringConversionBuffer : :: std :: os :: raw :: c_uint = 1 ; pub const XIMStringConversionLine : :: std :: os :: raw :: c_uint = 2 ; pub const XIMStringConversionWord : :: std :: os :: raw :: c_uint = 3 ; pub const XIMStringConversionChar : :: std :: os :: raw :: c_uint = 4 ; pub const XIMStringConversionSubstitution : :: std :: os :: raw :: c_uint = 1 ; pub const XIMStringConversionRetrieval : :: std :: os :: raw :: c_uint = 2 ; pub const XIMHotKeyStateON : :: std :: os :: raw :: c_uint = 1 ; pub const XIMHotKeyStateOFF : :: std :: os :: raw :: c_uint = 2 ; pub const XK_VoidSymbol : :: std :: os :: raw :: c_uint = 16777215 ; pub const XK_BackSpace : :: std :: os :: raw :: c_uint = 65288 ; pub const XK_Tab : :: std :: os :: raw :: c_uint = 65289 ; pub const XK_Linefeed : :: std :: os :: raw :: c_uint = 65290 ; pub const XK_Clear : :: std :: os :: raw :: c_uint = 65291 ; pub const XK_Return : :: std :: os :: raw :: c_uint = 65293 ; pub const XK_Pause : :: std :: os :: raw :: c_uint = 65299 ; pub const XK_Scroll_Lock : :: std :: os :: raw :: c_uint = 65300 ; pub const XK_Sys_Req : :: std :: os :: raw :: c_uint = 65301 ; pub const XK_Escape : :: std :: os :: raw :: c_uint = 65307 ; pub const XK_Delete : :: std :: os :: raw :: c_uint = 65535 ; pub const XK_Multi_key : :: std :: os :: raw :: c_uint = 65312 ; pub const XK_Codeinput : :: std :: os :: raw :: c_uint = 65335 ; pub const XK_SingleCandidate : :: std :: os :: raw :: c_uint = 65340 ; pub const XK_MultipleCandidate : :: std :: os :: raw :: c_uint = 65341 ; pub const XK_PreviousCandidate : :: std :: os :: raw :: c_uint = 65342 ; pub const XK_Kanji : :: std :: os :: raw :: c_uint = 65313 ; pub const XK_Muhenkan : :: std :: os :: raw :: c_uint = 65314 ; pub const XK_Henkan_Mode : :: std :: os :: raw :: c_uint = 65315 ; pub const XK_Henkan : :: std :: os :: raw :: c_uint = 65315 ; pub const XK_Romaji : :: std :: os :: raw :: c_uint = 65316 ; pub const XK_Hiragana : :: std :: os :: raw :: c_uint = 65317 ; pub const XK_Katakana : :: std :: os :: raw :: c_uint = 65318 ; pub const XK_Hiragana_Katakana : :: std :: os :: raw :: c_uint = 65319 ; pub const XK_Zenkaku : :: std :: os :: raw :: c_uint = 65320 ; pub const XK_Hankaku : :: std :: os :: raw :: c_uint = 65321 ; pub const XK_Zenkaku_Hankaku : :: std :: os :: raw :: c_uint = 65322 ; pub const XK_Touroku : :: std :: os :: raw :: c_uint = 65323 ; pub const XK_Massyo : :: std :: os :: raw :: c_uint = 65324 ; pub const XK_Kana_Lock : :: std :: os :: raw :: c_uint = 65325 ; pub const XK_Kana_Shift : :: std :: os :: raw :: c_uint = 65326 ; pub const XK_Eisu_Shift : :: std :: os :: raw :: c_uint = 65327 ; pub const XK_Eisu_toggle : :: std :: os :: raw :: c_uint = 65328 ; pub const XK_Kanji_Bangou : :: std :: os :: raw :: c_uint = 65335 ; pub const XK_Zen_Koho : :: std :: os :: raw :: c_uint = 65341 ; pub const XK_Mae_Koho : :: std :: os :: raw :: c_uint = 65342 ; pub const XK_Home : :: std :: os :: raw :: c_uint = 65360 ; pub const XK_Left : :: std :: os :: raw :: c_uint = 65361 ; pub const XK_Up : :: std :: os :: raw :: c_uint = 65362 ; pub const XK_Right : :: std :: os :: raw :: c_uint = 65363 ; pub const XK_Down : :: std :: os :: raw :: c_uint = 65364 ; pub const XK_Prior : :: std :: os :: raw :: c_uint = 65365 ; pub const XK_Page_Up : :: std :: os :: raw :: c_uint = 65365 ; pub const XK_Next : :: std :: os :: raw :: c_uint = 65366 ; pub const XK_Page_Down : :: std :: os :: raw :: c_uint = 65366 ; pub const XK_End : :: std :: os :: raw :: c_uint = 65367 ; pub const XK_Begin : :: std :: os :: raw :: c_uint = 65368 ; pub const XK_Select : :: std :: os :: raw :: c_uint = 65376 ; pub const XK_Print : :: std :: os :: raw :: c_uint = 65377 ; pub const XK_Execute : :: std :: os :: raw :: c_uint = 65378 ; pub const XK_Insert : :: std :: os :: raw :: c_uint = 65379 ; pub const XK_Undo : :: std :: os :: raw :: c_uint = 65381 ; pub const XK_Redo : :: std :: os :: raw :: c_uint = 65382 ; pub const XK_Menu : :: std :: os :: raw :: c_uint = 65383 ; pub const XK_Find : :: std :: os :: raw :: c_uint = 65384 ; pub const XK_Cancel : :: std :: os :: raw :: c_uint = 65385 ; pub const XK_Help : :: std :: os :: raw :: c_uint = 65386 ; pub const XK_Break : :: std :: os :: raw :: c_uint = 65387 ; pub const XK_Mode_switch : :: std :: os :: raw :: c_uint = 65406 ; pub const XK_script_switch : :: std :: os :: raw :: c_uint = 65406 ; pub const XK_Num_Lock : :: std :: os :: raw :: c_uint = 65407 ; pub const XK_KP_Space : :: std :: os :: raw :: c_uint = 65408 ; pub const XK_KP_Tab : :: std :: os :: raw :: c_uint = 65417 ; pub const XK_KP_Enter : :: std :: os :: raw :: c_uint = 65421 ; pub const XK_KP_F1 : :: std :: os :: raw :: c_uint = 65425 ; pub const XK_KP_F2 : :: std :: os :: raw :: c_uint = 65426 ; pub const XK_KP_F3 : :: std :: os :: raw :: c_uint = 65427 ; pub const XK_KP_F4 : :: std :: os :: raw :: c_uint = 65428 ; pub const XK_KP_Home : :: std :: os :: raw :: c_uint = 65429 ; pub const XK_KP_Left : :: std :: os :: raw :: c_uint = 65430 ; pub const XK_KP_Up : :: std :: os :: raw :: c_uint = 65431 ; pub const XK_KP_Right : :: std :: os :: raw :: c_uint = 65432 ; pub const XK_KP_Down : :: std :: os :: raw :: c_uint = 65433 ; pub const XK_KP_Prior : :: std :: os :: raw :: c_uint = 65434 ; pub const XK_KP_Page_Up : :: std :: os :: raw :: c_uint = 65434 ; pub const XK_KP_Next : :: std :: os :: raw :: c_uint = 65435 ; pub const XK_KP_Page_Down : :: std :: os :: raw :: c_uint = 65435 ; pub const XK_KP_End : :: std :: os :: raw :: c_uint = 65436 ; pub const XK_KP_Begin : :: std :: os :: raw :: c_uint = 65437 ; pub const XK_KP_Insert : :: std :: os :: raw :: c_uint = 65438 ; pub const XK_KP_Delete : :: std :: os :: raw :: c_uint = 65439 ; pub const XK_KP_Equal : :: std :: os :: raw :: c_uint = 65469 ; pub const XK_KP_Multiply : :: std :: os :: raw :: c_uint = 65450 ; pub const XK_KP_Add : :: std :: os :: raw :: c_uint = 65451 ; pub const XK_KP_Separator : :: std :: os :: raw :: c_uint = 65452 ; pub const XK_KP_Subtract : :: std :: os :: raw :: c_uint = 65453 ; pub const XK_KP_Decimal : :: std :: os :: raw :: c_uint = 65454 ; pub const XK_KP_Divide : :: std :: os :: raw :: c_uint = 65455 ; pub const XK_KP_0 : :: std :: os :: raw :: c_uint = 65456 ; pub const XK_KP_1 : :: std :: os :: raw :: c_uint = 65457 ; pub const XK_KP_2 : :: std :: os :: raw :: c_uint = 65458 ; pub const XK_KP_3 : :: std :: os :: raw :: c_uint = 65459 ; pub const XK_KP_4 : :: std :: os :: raw :: c_uint = 65460 ; pub const XK_KP_5 : :: std :: os :: raw :: c_uint = 65461 ; pub const XK_KP_6 : :: std :: os :: raw :: c_uint = 65462 ; pub const XK_KP_7 : :: std :: os :: raw :: c_uint = 65463 ; pub const XK_KP_8 : :: std :: os :: raw :: c_uint = 65464 ; pub const XK_KP_9 : :: std :: os :: raw :: c_uint = 65465 ; pub const XK_F1 : :: std :: os :: raw :: c_uint = 65470 ; pub const XK_F2 : :: std :: os :: raw :: c_uint = 65471 ; pub const XK_F3 : :: std :: os :: raw :: c_uint = 65472 ; pub const XK_F4 : :: std :: os :: raw :: c_uint = 65473 ; pub const XK_F5 : :: std :: os :: raw :: c_uint = 65474 ; pub const XK_F6 : :: std :: os :: raw :: c_uint = 65475 ; pub const XK_F7 : :: std :: os :: raw :: c_uint = 65476 ; pub const XK_F8 : :: std :: os :: raw :: c_uint = 65477 ; pub const XK_F9 : :: std :: os :: raw :: c_uint = 65478 ; pub const XK_F10 : :: std :: os :: raw :: c_uint = 65479 ; pub const XK_F11 : :: std :: os :: raw :: c_uint = 65480 ; pub const XK_L1 : :: std :: os :: raw :: c_uint = 65480 ; pub const XK_F12 : :: std :: os :: raw :: c_uint = 65481 ; pub const XK_L2 : :: std :: os :: raw :: c_uint = 65481 ; pub const XK_F13 : :: std :: os :: raw :: c_uint = 65482 ; pub const XK_L3 : :: std :: os :: raw :: c_uint = 65482 ; pub const XK_F14 : :: std :: os :: raw :: c_uint = 65483 ; pub const XK_L4 : :: std :: os :: raw :: c_uint = 65483 ; pub const XK_F15 : :: std :: os :: raw :: c_uint = 65484 ; pub const XK_L5 : :: std :: os :: raw :: c_uint = 65484 ; pub const XK_F16 : :: std :: os :: raw :: c_uint = 65485 ; pub const XK_L6 : :: std :: os :: raw :: c_uint = 65485 ; pub const XK_F17 : :: std :: os :: raw :: c_uint = 65486 ; pub const XK_L7 : :: std :: os :: raw :: c_uint = 65486 ; pub const XK_F18 : :: std :: os :: raw :: c_uint = 65487 ; pub const XK_L8 : :: std :: os :: raw :: c_uint = 65487 ; pub const XK_F19 : :: std :: os :: raw :: c_uint = 65488 ; pub const XK_L9 : :: std :: os :: raw :: c_uint = 65488 ; pub const XK_F20 : :: std :: os :: raw :: c_uint = 65489 ; pub const XK_L10 : :: std :: os :: raw :: c_uint = 65489 ; pub const XK_F21 : :: std :: os :: raw :: c_uint = 65490 ; pub const XK_R1 : :: std :: os :: raw :: c_uint = 65490 ; pub const XK_F22 : :: std :: os :: raw :: c_uint = 65491 ; pub const XK_R2 : :: std :: os :: raw :: c_uint = 65491 ; pub const XK_F23 : :: std :: os :: raw :: c_uint = 65492 ; pub const XK_R3 : :: std :: os :: raw :: c_uint = 65492 ; pub const XK_F24 : :: std :: os :: raw :: c_uint = 65493 ; pub const XK_R4 : :: std :: os :: raw :: c_uint = 65493 ; pub const XK_F25 : :: std :: os :: raw :: c_uint = 65494 ; pub const XK_R5 : :: std :: os :: raw :: c_uint = 65494 ; pub const XK_F26 : :: std :: os :: raw :: c_uint = 65495 ; pub const XK_R6 : :: std :: os :: raw :: c_uint = 65495 ; pub const XK_F27 : :: std :: os :: raw :: c_uint = 65496 ; pub const XK_R7 : :: std :: os :: raw :: c_uint = 65496 ; pub const XK_F28 : :: std :: os :: raw :: c_uint = 65497 ; pub const XK_R8 : :: std :: os :: raw :: c_uint = 65497 ; pub const XK_F29 : :: std :: os :: raw :: c_uint = 65498 ; pub const XK_R9 : :: std :: os :: raw :: c_uint = 65498 ; pub const XK_F30 : :: std :: os :: raw :: c_uint = 65499 ; pub const XK_R10 : :: std :: os :: raw :: c_uint = 65499 ; pub const XK_F31 : :: std :: os :: raw :: c_uint = 65500 ; pub const XK_R11 : :: std :: os :: raw :: c_uint = 65500 ; pub const XK_F32 : :: std :: os :: raw :: c_uint = 65501 ; pub const XK_R12 : :: std :: os :: raw :: c_uint = 65501 ; pub const XK_F33 : :: std :: os :: raw :: c_uint = 65502 ; pub const XK_R13 : :: std :: os :: raw :: c_uint = 65502 ; pub const XK_F34 : :: std :: os :: raw :: c_uint = 65503 ; pub const XK_R14 : :: std :: os :: raw :: c_uint = 65503 ; pub const XK_F35 : :: std :: os :: raw :: c_uint = 65504 ; pub const XK_R15 : :: std :: os :: raw :: c_uint = 65504 ; pub const XK_Shift_L : :: std :: os :: raw :: c_uint = 65505 ; pub const XK_Shift_R : :: std :: os :: raw :: c_uint = 65506 ; pub const XK_Control_L : :: std :: os :: raw :: c_uint = 65507 ; pub const XK_Control_R : :: std :: os :: raw :: c_uint = 65508 ; pub const XK_Caps_Lock : :: std :: os :: raw :: c_uint = 65509 ; pub const XK_Shift_Lock : :: std :: os :: raw :: c_uint = 65510 ; pub const XK_Meta_L : :: std :: os :: raw :: c_uint = 65511 ; pub const XK_Meta_R : :: std :: os :: raw :: c_uint = 65512 ; pub const XK_Alt_L : :: std :: os :: raw :: c_uint = 65513 ; pub const XK_Alt_R : :: std :: os :: raw :: c_uint = 65514 ; pub const XK_Super_L : :: std :: os :: raw :: c_uint = 65515 ; pub const XK_Super_R : :: std :: os :: raw :: c_uint = 65516 ; pub const XK_Hyper_L : :: std :: os :: raw :: c_uint = 65517 ; pub const XK_Hyper_R : :: std :: os :: raw :: c_uint = 65518 ; pub const XK_ISO_Lock : :: std :: os :: raw :: c_uint = 65025 ; pub const XK_ISO_Level2_Latch : :: std :: os :: raw :: c_uint = 65026 ; pub const XK_ISO_Level3_Shift : :: std :: os :: raw :: c_uint = 65027 ; pub const XK_ISO_Level3_Latch : :: std :: os :: raw :: c_uint = 65028 ; pub const XK_ISO_Level3_Lock : :: std :: os :: raw :: c_uint = 65029 ; pub const XK_ISO_Level5_Shift : :: std :: os :: raw :: c_uint = 65041 ; pub const XK_ISO_Level5_Latch : :: std :: os :: raw :: c_uint = 65042 ; pub const XK_ISO_Level5_Lock : :: std :: os :: raw :: c_uint = 65043 ; pub const XK_ISO_Group_Shift : :: std :: os :: raw :: c_uint = 65406 ; pub const XK_ISO_Group_Latch : :: std :: os :: raw :: c_uint = 65030 ; pub const XK_ISO_Group_Lock : :: std :: os :: raw :: c_uint = 65031 ; pub const XK_ISO_Next_Group : :: std :: os :: raw :: c_uint = 65032 ; pub const XK_ISO_Next_Group_Lock : :: std :: os :: raw :: c_uint = 65033 ; pub const XK_ISO_Prev_Group : :: std :: os :: raw :: c_uint = 65034 ; pub const XK_ISO_Prev_Group_Lock : :: std :: os :: raw :: c_uint = 65035 ; pub const XK_ISO_First_Group : :: std :: os :: raw :: c_uint = 65036 ; pub const XK_ISO_First_Group_Lock : :: std :: os :: raw :: c_uint = 65037 ; pub const XK_ISO_Last_Group : :: std :: os :: raw :: c_uint = 65038 ; pub const XK_ISO_Last_Group_Lock : :: std :: os :: raw :: c_uint = 65039 ; pub const XK_ISO_Left_Tab : :: std :: os :: raw :: c_uint = 65056 ; pub const XK_ISO_Move_Line_Up : :: std :: os :: raw :: c_uint = 65057 ; pub const XK_ISO_Move_Line_Down : :: std :: os :: raw :: c_uint = 65058 ; pub const XK_ISO_Partial_Line_Up : :: std :: os :: raw :: c_uint = 65059 ; pub const XK_ISO_Partial_Line_Down : :: std :: os :: raw :: c_uint = 65060 ; pub const XK_ISO_Partial_Space_Left : :: std :: os :: raw :: c_uint = 65061 ; pub const XK_ISO_Partial_Space_Right : :: std :: os :: raw :: c_uint = 65062 ; pub const XK_ISO_Set_Margin_Left : :: std :: os :: raw :: c_uint = 65063 ; pub const XK_ISO_Set_Margin_Right : :: std :: os :: raw :: c_uint = 65064 ; pub const XK_ISO_Release_Margin_Left : :: std :: os :: raw :: c_uint = 65065 ; pub const XK_ISO_Release_Margin_Right : :: std :: os :: raw :: c_uint = 65066 ; pub const XK_ISO_Release_Both_Margins : :: std :: os :: raw :: c_uint = 65067 ; pub const XK_ISO_Fast_Cursor_Left : :: std :: os :: raw :: c_uint = 65068 ; pub const XK_ISO_Fast_Cursor_Right : :: std :: os :: raw :: c_uint = 65069 ; pub const XK_ISO_Fast_Cursor_Up : :: std :: os :: raw :: c_uint = 65070 ; pub const XK_ISO_Fast_Cursor_Down : :: std :: os :: raw :: c_uint = 65071 ; pub const XK_ISO_Continuous_Underline : :: std :: os :: raw :: c_uint = 65072 ; pub const XK_ISO_Discontinuous_Underline : :: std :: os :: raw :: c_uint = 65073 ; pub const XK_ISO_Emphasize : :: std :: os :: raw :: c_uint = 65074 ; pub const XK_ISO_Center_Object : :: std :: os :: raw :: c_uint = 65075 ; pub const XK_ISO_Enter : :: std :: os :: raw :: c_uint = 65076 ; pub const XK_dead_grave : :: std :: os :: raw :: c_uint = 65104 ; pub const XK_dead_acute : :: std :: os :: raw :: c_uint = 65105 ; pub const XK_dead_circumflex : :: std :: os :: raw :: c_uint = 65106 ; pub const XK_dead_tilde : :: std :: os :: raw :: c_uint = 65107 ; pub const XK_dead_perispomeni : :: std :: os :: raw :: c_uint = 65107 ; pub const XK_dead_macron : :: std :: os :: raw :: c_uint = 65108 ; pub const XK_dead_breve : :: std :: os :: raw :: c_uint = 65109 ; pub const XK_dead_abovedot : :: std :: os :: raw :: c_uint = 65110 ; pub const XK_dead_diaeresis : :: std :: os :: raw :: c_uint = 65111 ; pub const XK_dead_abovering : :: std :: os :: raw :: c_uint = 65112 ; pub const XK_dead_doubleacute : :: std :: os :: raw :: c_uint = 65113 ; pub const XK_dead_caron : :: std :: os :: raw :: c_uint = 65114 ; pub const XK_dead_cedilla : :: std :: os :: raw :: c_uint = 65115 ; pub const XK_dead_ogonek : :: std :: os :: raw :: c_uint = 65116 ; pub const XK_dead_iota : :: std :: os :: raw :: c_uint = 65117 ; pub const XK_dead_voiced_sound : :: std :: os :: raw :: c_uint = 65118 ; pub const XK_dead_semivoiced_sound : :: std :: os :: raw :: c_uint = 65119 ; pub const XK_dead_belowdot : :: std :: os :: raw :: c_uint = 65120 ; pub const XK_dead_hook : :: std :: os :: raw :: c_uint = 65121 ; pub const XK_dead_horn : :: std :: os :: raw :: c_uint = 65122 ; pub const XK_dead_stroke : :: std :: os :: raw :: c_uint = 65123 ; pub const XK_dead_abovecomma : :: std :: os :: raw :: c_uint = 65124 ; pub const XK_dead_psili : :: std :: os :: raw :: c_uint = 65124 ; pub const XK_dead_abovereversedcomma : :: std :: os :: raw :: c_uint = 65125 ; pub const XK_dead_dasia : :: std :: os :: raw :: c_uint = 65125 ; pub const XK_dead_doublegrave : :: std :: os :: raw :: c_uint = 65126 ; pub const XK_dead_belowring : :: std :: os :: raw :: c_uint = 65127 ; pub const XK_dead_belowmacron : :: std :: os :: raw :: c_uint = 65128 ; pub const XK_dead_belowcircumflex : :: std :: os :: raw :: c_uint = 65129 ; pub const XK_dead_belowtilde : :: std :: os :: raw :: c_uint = 65130 ; pub const XK_dead_belowbreve : :: std :: os :: raw :: c_uint = 65131 ; pub const XK_dead_belowdiaeresis : :: std :: os :: raw :: c_uint = 65132 ; pub const XK_dead_invertedbreve : :: std :: os :: raw :: c_uint = 65133 ; pub const XK_dead_belowcomma : :: std :: os :: raw :: c_uint = 65134 ; pub const XK_dead_currency : :: std :: os :: raw :: c_uint = 65135 ; pub const XK_dead_lowline : :: std :: os :: raw :: c_uint = 65168 ; pub const XK_dead_aboveverticalline : :: std :: os :: raw :: c_uint = 65169 ; pub const XK_dead_belowverticalline : :: std :: os :: raw :: c_uint = 65170 ; pub const XK_dead_longsolidusoverlay : :: std :: os :: raw :: c_uint = 65171 ; pub const XK_dead_a : :: std :: os :: raw :: c_uint = 65152 ; pub const XK_dead_A : :: std :: os :: raw :: c_uint = 65153 ; pub const XK_dead_e : :: std :: os :: raw :: c_uint = 65154 ; pub const XK_dead_E : :: std :: os :: raw :: c_uint = 65155 ; pub const XK_dead_i : :: std :: os :: raw :: c_uint = 65156 ; pub const XK_dead_I : :: std :: os :: raw :: c_uint = 65157 ; pub const XK_dead_o : :: std :: os :: raw :: c_uint = 65158 ; pub const XK_dead_O : :: std :: os :: raw :: c_uint = 65159 ; pub const XK_dead_u : :: std :: os :: raw :: c_uint = 65160 ; pub const XK_dead_U : :: std :: os :: raw :: c_uint = 65161 ; pub const XK_dead_small_schwa : :: std :: os :: raw :: c_uint = 65162 ; pub const XK_dead_capital_schwa : :: std :: os :: raw :: c_uint = 65163 ; pub const XK_dead_greek : :: std :: os :: raw :: c_uint = 65164 ; pub const XK_First_Virtual_Screen : :: std :: os :: raw :: c_uint = 65232 ; pub const XK_Prev_Virtual_Screen : :: std :: os :: raw :: c_uint = 65233 ; pub const XK_Next_Virtual_Screen : :: std :: os :: raw :: c_uint = 65234 ; pub const XK_Last_Virtual_Screen : :: std :: os :: raw :: c_uint = 65236 ; pub const XK_Terminate_Server : :: std :: os :: raw :: c_uint = 65237 ; pub const XK_AccessX_Enable : :: std :: os :: raw :: c_uint = 65136 ; pub const XK_AccessX_Feedback_Enable : :: std :: os :: raw :: c_uint = 65137 ; pub const XK_RepeatKeys_Enable : :: std :: os :: raw :: c_uint = 65138 ; pub const XK_SlowKeys_Enable : :: std :: os :: raw :: c_uint = 65139 ; pub const XK_BounceKeys_Enable : :: std :: os :: raw :: c_uint = 65140 ; pub const XK_StickyKeys_Enable : :: std :: os :: raw :: c_uint = 65141 ; pub const XK_MouseKeys_Enable : :: std :: os :: raw :: c_uint = 65142 ; pub const XK_MouseKeys_Accel_Enable : :: std :: os :: raw :: c_uint = 65143 ; pub const XK_Overlay1_Enable : :: std :: os :: raw :: c_uint = 65144 ; pub const XK_Overlay2_Enable : :: std :: os :: raw :: c_uint = 65145 ; pub const XK_AudibleBell_Enable : :: std :: os :: raw :: c_uint = 65146 ; pub const XK_Pointer_Left : :: std :: os :: raw :: c_uint = 65248 ; pub const XK_Pointer_Right : :: std :: os :: raw :: c_uint = 65249 ; pub const XK_Pointer_Up : :: std :: os :: raw :: c_uint = 65250 ; pub const XK_Pointer_Down : :: std :: os :: raw :: c_uint = 65251 ; pub const XK_Pointer_UpLeft : :: std :: os :: raw :: c_uint = 65252 ; pub const XK_Pointer_UpRight : :: std :: os :: raw :: c_uint = 65253 ; pub const XK_Pointer_DownLeft : :: std :: os :: raw :: c_uint = 65254 ; pub const XK_Pointer_DownRight : :: std :: os :: raw :: c_uint = 65255 ; pub const XK_Pointer_Button_Dflt : :: std :: os :: raw :: c_uint = 65256 ; pub const XK_Pointer_Button1 : :: std :: os :: raw :: c_uint = 65257 ; pub const XK_Pointer_Button2 : :: std :: os :: raw :: c_uint = 65258 ; pub const XK_Pointer_Button3 : :: std :: os :: raw :: c_uint = 65259 ; pub const XK_Pointer_Button4 : :: std :: os :: raw :: c_uint = 65260 ; pub const XK_Pointer_Button5 : :: std :: os :: raw :: c_uint = 65261 ; pub const XK_Pointer_DblClick_Dflt : :: std :: os :: raw :: c_uint = 65262 ; pub const XK_Pointer_DblClick1 : :: std :: os :: raw :: c_uint = 65263 ; pub const XK_Pointer_DblClick2 : :: std :: os :: raw :: c_uint = 65264 ; pub const XK_Pointer_DblClick3 : :: std :: os :: raw :: c_uint = 65265 ; pub const XK_Pointer_DblClick4 : :: std :: os :: raw :: c_uint = 65266 ; pub const XK_Pointer_DblClick5 : :: std :: os :: raw :: c_uint = 65267 ; pub const XK_Pointer_Drag_Dflt : :: std :: os :: raw :: c_uint = 65268 ; pub const XK_Pointer_Drag1 : :: std :: os :: raw :: c_uint = 65269 ; pub const XK_Pointer_Drag2 : :: std :: os :: raw :: c_uint = 65270 ; pub const XK_Pointer_Drag3 : :: std :: os :: raw :: c_uint = 65271 ; pub const XK_Pointer_Drag4 : :: std :: os :: raw :: c_uint = 65272 ; pub const XK_Pointer_Drag5 : :: std :: os :: raw :: c_uint = 65277 ; pub const XK_Pointer_EnableKeys : :: std :: os :: raw :: c_uint = 65273 ; pub const XK_Pointer_Accelerate : :: std :: os :: raw :: c_uint = 65274 ; pub const XK_Pointer_DfltBtnNext : :: std :: os :: raw :: c_uint = 65275 ; pub const XK_Pointer_DfltBtnPrev : :: std :: os :: raw :: c_uint = 65276 ; pub const XK_ch : :: std :: os :: raw :: c_uint = 65184 ; pub const XK_Ch : :: std :: os :: raw :: c_uint = 65185 ; pub const XK_CH : :: std :: os :: raw :: c_uint = 65186 ; pub const XK_c_h : :: std :: os :: raw :: c_uint = 65187 ; pub const XK_C_h : :: std :: os :: raw :: c_uint = 65188 ; pub const XK_C_H : :: std :: os :: raw :: c_uint = 65189 ; pub const XK_space : :: std :: os :: raw :: c_uint = 32 ; pub const XK_exclam : :: std :: os :: raw :: c_uint = 33 ; pub const XK_quotedbl : :: std :: os :: raw :: c_uint = 34 ; pub const XK_numbersign : :: std :: os :: raw :: c_uint = 35 ; pub const XK_dollar : :: std :: os :: raw :: c_uint = 36 ; pub const XK_percent : :: std :: os :: raw :: c_uint = 37 ; pub const XK_ampersand : :: std :: os :: raw :: c_uint = 38 ; pub const XK_apostrophe : :: std :: os :: raw :: c_uint = 39 ; pub const XK_quoteright : :: std :: os :: raw :: c_uint = 39 ; pub const XK_parenleft : :: std :: os :: raw :: c_uint = 40 ; pub const XK_parenright : :: std :: os :: raw :: c_uint = 41 ; pub const XK_asterisk : :: std :: os :: raw :: c_uint = 42 ; pub const XK_plus : :: std :: os :: raw :: c_uint = 43 ; pub const XK_comma : :: std :: os :: raw :: c_uint = 44 ; pub const XK_minus : :: std :: os :: raw :: c_uint = 45 ; pub const XK_period : :: std :: os :: raw :: c_uint = 46 ; pub const XK_slash : :: std :: os :: raw :: c_uint = 47 ; pub const XK_0 : :: std :: os :: raw :: c_uint = 48 ; pub const XK_1 : :: std :: os :: raw :: c_uint = 49 ; pub const XK_2 : :: std :: os :: raw :: c_uint = 50 ; pub const XK_3 : :: std :: os :: raw :: c_uint = 51 ; pub const XK_4 : :: std :: os :: raw :: c_uint = 52 ; pub const XK_5 : :: std :: os :: raw :: c_uint = 53 ; pub const XK_6 : :: std :: os :: raw :: c_uint = 54 ; pub const XK_7 : :: std :: os :: raw :: c_uint = 55 ; pub const XK_8 : :: std :: os :: raw :: c_uint = 56 ; pub const XK_9 : :: std :: os :: raw :: c_uint = 57 ; pub const XK_colon : :: std :: os :: raw :: c_uint = 58 ; pub const XK_semicolon : :: std :: os :: raw :: c_uint = 59 ; pub const XK_less : :: std :: os :: raw :: c_uint = 60 ; pub const XK_equal : :: std :: os :: raw :: c_uint = 61 ; pub const XK_greater : :: std :: os :: raw :: c_uint = 62 ; pub const XK_question : :: std :: os :: raw :: c_uint = 63 ; pub const XK_at : :: std :: os :: raw :: c_uint = 64 ; pub const XK_A : :: std :: os :: raw :: c_uint = 65 ; pub const XK_B : :: std :: os :: raw :: c_uint = 66 ; pub const XK_C : :: std :: os :: raw :: c_uint = 67 ; pub const XK_D : :: std :: os :: raw :: c_uint = 68 ; pub const XK_E : :: std :: os :: raw :: c_uint = 69 ; pub const XK_F : :: std :: os :: raw :: c_uint = 70 ; pub const XK_G : :: std :: os :: raw :: c_uint = 71 ; pub const XK_H : :: std :: os :: raw :: c_uint = 72 ; pub const XK_I : :: std :: os :: raw :: c_uint = 73 ; pub const XK_J : :: std :: os :: raw :: c_uint = 74 ; pub const XK_K : :: std :: os :: raw :: c_uint = 75 ; pub const XK_L : :: std :: os :: raw :: c_uint = 76 ; pub const XK_M : :: std :: os :: raw :: c_uint = 77 ; pub const XK_N : :: std :: os :: raw :: c_uint = 78 ; pub const XK_O : :: std :: os :: raw :: c_uint = 79 ; pub const XK_P : :: std :: os :: raw :: c_uint = 80 ; pub const XK_Q : :: std :: os :: raw :: c_uint = 81 ; pub const XK_R : :: std :: os :: raw :: c_uint = 82 ; pub const XK_S : :: std :: os :: raw :: c_uint = 83 ; pub const XK_T : :: std :: os :: raw :: c_uint = 84 ; pub const XK_U : :: std :: os :: raw :: c_uint = 85 ; pub const XK_V : :: std :: os :: raw :: c_uint = 86 ; pub const XK_W : :: std :: os :: raw :: c_uint = 87 ; pub const XK_X : :: std :: os :: raw :: c_uint = 88 ; pub const XK_Y : :: std :: os :: raw :: c_uint = 89 ; pub const XK_Z : :: std :: os :: raw :: c_uint = 90 ; pub const XK_bracketleft : :: std :: os :: raw :: c_uint = 91 ; pub const XK_backslash : :: std :: os :: raw :: c_uint = 92 ; pub const XK_bracketright : :: std :: os :: raw :: c_uint = 93 ; pub const XK_asciicircum : :: std :: os :: raw :: c_uint = 94 ; pub const XK_underscore : :: std :: os :: raw :: c_uint = 95 ; pub const XK_grave : :: std :: os :: raw :: c_uint = 96 ; pub const XK_quoteleft : :: std :: os :: raw :: c_uint = 96 ; pub const XK_a : :: std :: os :: raw :: c_uint = 97 ; pub const XK_b : :: std :: os :: raw :: c_uint = 98 ; pub const XK_c : :: std :: os :: raw :: c_uint = 99 ; pub const XK_d : :: std :: os :: raw :: c_uint = 100 ; pub const XK_e : :: std :: os :: raw :: c_uint = 101 ; pub const XK_f : :: std :: os :: raw :: c_uint = 102 ; pub const XK_g : :: std :: os :: raw :: c_uint = 103 ; pub const XK_h : :: std :: os :: raw :: c_uint = 104 ; pub const XK_i : :: std :: os :: raw :: c_uint = 105 ; pub const XK_j : :: std :: os :: raw :: c_uint = 106 ; pub const XK_k : :: std :: os :: raw :: c_uint = 107 ; pub const XK_l : :: std :: os :: raw :: c_uint = 108 ; pub const XK_m : :: std :: os :: raw :: c_uint = 109 ; pub const XK_n : :: std :: os :: raw :: c_uint = 110 ; pub const XK_o : :: std :: os :: raw :: c_uint = 111 ; pub const XK_p : :: std :: os :: raw :: c_uint = 112 ; pub const XK_q : :: std :: os :: raw :: c_uint = 113 ; pub const XK_r : :: std :: os :: raw :: c_uint = 114 ; pub const XK_s : :: std :: os :: raw :: c_uint = 115 ; pub const XK_t : :: std :: os :: raw :: c_uint = 116 ; pub const XK_u : :: std :: os :: raw :: c_uint = 117 ; pub const XK_v : :: std :: os :: raw :: c_uint = 118 ; pub const XK_w : :: std :: os :: raw :: c_uint = 119 ; pub const XK_x : :: std :: os :: raw :: c_uint = 120 ; pub const XK_y : :: std :: os :: raw :: c_uint = 121 ; pub const XK_z : :: std :: os :: raw :: c_uint = 122 ; pub const XK_braceleft : :: std :: os :: raw :: c_uint = 123 ; pub const XK_bar : :: std :: os :: raw :: c_uint = 124 ; pub const XK_braceright : :: std :: os :: raw :: c_uint = 125 ; pub const XK_asciitilde : :: std :: os :: raw :: c_uint = 126 ; pub const XK_nobreakspace : :: std :: os :: raw :: c_uint = 160 ; pub const XK_exclamdown : :: std :: os :: raw :: c_uint = 161 ; pub const XK_cent : :: std :: os :: raw :: c_uint = 162 ; pub const XK_sterling : :: std :: os :: raw :: c_uint = 163 ; pub const XK_currency : :: std :: os :: raw :: c_uint = 164 ; pub const XK_yen : :: std :: os :: raw :: c_uint = 165 ; pub const XK_brokenbar : :: std :: os :: raw :: c_uint = 166 ; pub const XK_section : :: std :: os :: raw :: c_uint = 167 ; pub const XK_diaeresis : :: std :: os :: raw :: c_uint = 168 ; pub const XK_copyright : :: std :: os :: raw :: c_uint = 169 ; pub const XK_ordfeminine : :: std :: os :: raw :: c_uint = 170 ; pub const XK_guillemotleft : :: std :: os :: raw :: c_uint = 171 ; pub const XK_notsign : :: std :: os :: raw :: c_uint = 172 ; pub const XK_hyphen : :: std :: os :: raw :: c_uint = 173 ; pub const XK_registered : :: std :: os :: raw :: c_uint = 174 ; pub const XK_macron : :: std :: os :: raw :: c_uint = 175 ; pub const XK_degree : :: std :: os :: raw :: c_uint = 176 ; pub const XK_plusminus : :: std :: os :: raw :: c_uint = 177 ; pub const XK_twosuperior : :: std :: os :: raw :: c_uint = 178 ; pub const XK_threesuperior : :: std :: os :: raw :: c_uint = 179 ; pub const XK_acute : :: std :: os :: raw :: c_uint = 180 ; pub const XK_mu : :: std :: os :: raw :: c_uint = 181 ; pub const XK_paragraph : :: std :: os :: raw :: c_uint = 182 ; pub const XK_periodcentered : :: std :: os :: raw :: c_uint = 183 ; pub const XK_cedilla : :: std :: os :: raw :: c_uint = 184 ; pub const XK_onesuperior : :: std :: os :: raw :: c_uint = 185 ; pub const XK_masculine : :: std :: os :: raw :: c_uint = 186 ; pub const XK_guillemotright : :: std :: os :: raw :: c_uint = 187 ; pub const XK_onequarter : :: std :: os :: raw :: c_uint = 188 ; pub const XK_onehalf : :: std :: os :: raw :: c_uint = 189 ; pub const XK_threequarters : :: std :: os :: raw :: c_uint = 190 ; pub const XK_questiondown : :: std :: os :: raw :: c_uint = 191 ; pub const XK_Agrave : :: std :: os :: raw :: c_uint = 192 ; pub const XK_Aacute : :: std :: os :: raw :: c_uint = 193 ; pub const XK_Acircumflex : :: std :: os :: raw :: c_uint = 194 ; pub const XK_Atilde : :: std :: os :: raw :: c_uint = 195 ; pub const XK_Adiaeresis : :: std :: os :: raw :: c_uint = 196 ; pub const XK_Aring : :: std :: os :: raw :: c_uint = 197 ; pub const XK_AE : :: std :: os :: raw :: c_uint = 198 ; pub const XK_Ccedilla : :: std :: os :: raw :: c_uint = 199 ; pub const XK_Egrave : :: std :: os :: raw :: c_uint = 200 ; pub const XK_Eacute : :: std :: os :: raw :: c_uint = 201 ; pub const XK_Ecircumflex : :: std :: os :: raw :: c_uint = 202 ; pub const XK_Ediaeresis : :: std :: os :: raw :: c_uint = 203 ; pub const XK_Igrave : :: std :: os :: raw :: c_uint = 204 ; pub const XK_Iacute : :: std :: os :: raw :: c_uint = 205 ; pub const XK_Icircumflex : :: std :: os :: raw :: c_uint = 206 ; pub const XK_Idiaeresis : :: std :: os :: raw :: c_uint = 207 ; pub const XK_ETH : :: std :: os :: raw :: c_uint = 208 ; pub const XK_Eth : :: std :: os :: raw :: c_uint = 208 ; pub const XK_Ntilde : :: std :: os :: raw :: c_uint = 209 ; pub const XK_Ograve : :: std :: os :: raw :: c_uint = 210 ; pub const XK_Oacute : :: std :: os :: raw :: c_uint = 211 ; pub const XK_Ocircumflex : :: std :: os :: raw :: c_uint = 212 ; pub const XK_Otilde : :: std :: os :: raw :: c_uint = 213 ; pub const XK_Odiaeresis : :: std :: os :: raw :: c_uint = 214 ; pub const XK_multiply : :: std :: os :: raw :: c_uint = 215 ; pub const XK_Oslash : :: std :: os :: raw :: c_uint = 216 ; pub const XK_Ooblique : :: std :: os :: raw :: c_uint = 216 ; pub const XK_Ugrave : :: std :: os :: raw :: c_uint = 217 ; pub const XK_Uacute : :: std :: os :: raw :: c_uint = 218 ; pub const XK_Ucircumflex : :: std :: os :: raw :: c_uint = 219 ; pub const XK_Udiaeresis : :: std :: os :: raw :: c_uint = 220 ; pub const XK_Yacute : :: std :: os :: raw :: c_uint = 221 ; pub const XK_THORN : :: std :: os :: raw :: c_uint = 222 ; pub const XK_Thorn : :: std :: os :: raw :: c_uint = 222 ; pub const XK_ssharp : :: std :: os :: raw :: c_uint = 223 ; pub const XK_agrave : :: std :: os :: raw :: c_uint = 224 ; pub const XK_aacute : :: std :: os :: raw :: c_uint = 225 ; pub const XK_acircumflex : :: std :: os :: raw :: c_uint = 226 ; pub const XK_atilde : :: std :: os :: raw :: c_uint = 227 ; pub const XK_adiaeresis : :: std :: os :: raw :: c_uint = 228 ; pub const XK_aring : :: std :: os :: raw :: c_uint = 229 ; pub const XK_ae : :: std :: os :: raw :: c_uint = 230 ; pub const XK_ccedilla : :: std :: os :: raw :: c_uint = 231 ; pub const XK_egrave : :: std :: os :: raw :: c_uint = 232 ; pub const XK_eacute : :: std :: os :: raw :: c_uint = 233 ; pub const XK_ecircumflex : :: std :: os :: raw :: c_uint = 234 ; pub const XK_ediaeresis : :: std :: os :: raw :: c_uint = 235 ; pub const XK_igrave : :: std :: os :: raw :: c_uint = 236 ; pub const XK_iacute : :: std :: os :: raw :: c_uint = 237 ; pub const XK_icircumflex : :: std :: os :: raw :: c_uint = 238 ; pub const XK_idiaeresis : :: std :: os :: raw :: c_uint = 239 ; pub const XK_eth : :: std :: os :: raw :: c_uint = 240 ; pub const XK_ntilde : :: std :: os :: raw :: c_uint = 241 ; pub const XK_ograve : :: std :: os :: raw :: c_uint = 242 ; pub const XK_oacute : :: std :: os :: raw :: c_uint = 243 ; pub const XK_ocircumflex : :: std :: os :: raw :: c_uint = 244 ; pub const XK_otilde : :: std :: os :: raw :: c_uint = 245 ; pub const XK_odiaeresis : :: std :: os :: raw :: c_uint = 246 ; pub const XK_division : :: std :: os :: raw :: c_uint = 247 ; pub const XK_oslash : :: std :: os :: raw :: c_uint = 248 ; pub const XK_ooblique : :: std :: os :: raw :: c_uint = 248 ; pub const XK_ugrave : :: std :: os :: raw :: c_uint = 249 ; pub const XK_uacute : :: std :: os :: raw :: c_uint = 250 ; pub const XK_ucircumflex : :: std :: os :: raw :: c_uint = 251 ; pub const XK_udiaeresis : :: std :: os :: raw :: c_uint = 252 ; pub const XK_yacute : :: std :: os :: raw :: c_uint = 253 ; pub const XK_thorn : :: std :: os :: raw :: c_uint = 254 ; pub const XK_ydiaeresis : :: std :: os :: raw :: c_uint = 255 ; pub const XK_Aogonek : :: std :: os :: raw :: c_uint = 417 ; pub const XK_breve : :: std :: os :: raw :: c_uint = 418 ; pub const XK_Lstroke : :: std :: os :: raw :: c_uint = 419 ; pub const XK_Lcaron : :: std :: os :: raw :: c_uint = 421 ; pub const XK_Sacute : :: std :: os :: raw :: c_uint = 422 ; pub const XK_Scaron : :: std :: os :: raw :: c_uint = 425 ; pub const XK_Scedilla : :: std :: os :: raw :: c_uint = 426 ; pub const XK_Tcaron : :: std :: os :: raw :: c_uint = 427 ; pub const XK_Zacute : :: std :: os :: raw :: c_uint = 428 ; pub const XK_Zcaron : :: std :: os :: raw :: c_uint = 430 ; pub const XK_Zabovedot : :: std :: os :: raw :: c_uint = 431 ; pub const XK_aogonek : :: std :: os :: raw :: c_uint = 433 ; pub const XK_ogonek : :: std :: os :: raw :: c_uint = 434 ; pub const XK_lstroke : :: std :: os :: raw :: c_uint = 435 ; pub const XK_lcaron : :: std :: os :: raw :: c_uint = 437 ; pub const XK_sacute : :: std :: os :: raw :: c_uint = 438 ; pub const XK_caron : :: std :: os :: raw :: c_uint = 439 ; pub const XK_scaron : :: std :: os :: raw :: c_uint = 441 ; pub const XK_scedilla : :: std :: os :: raw :: c_uint = 442 ; pub const XK_tcaron : :: std :: os :: raw :: c_uint = 443 ; pub const XK_zacute : :: std :: os :: raw :: c_uint = 444 ; pub const XK_doubleacute : :: std :: os :: raw :: c_uint = 445 ; pub const XK_zcaron : :: std :: os :: raw :: c_uint = 446 ; pub const XK_zabovedot : :: std :: os :: raw :: c_uint = 447 ; pub const XK_Racute : :: std :: os :: raw :: c_uint = 448 ; pub const XK_Abreve : :: std :: os :: raw :: c_uint = 451 ; pub const XK_Lacute : :: std :: os :: raw :: c_uint = 453 ; pub const XK_Cacute : :: std :: os :: raw :: c_uint = 454 ; pub const XK_Ccaron : :: std :: os :: raw :: c_uint = 456 ; pub const XK_Eogonek : :: std :: os :: raw :: c_uint = 458 ; pub const XK_Ecaron : :: std :: os :: raw :: c_uint = 460 ; pub const XK_Dcaron : :: std :: os :: raw :: c_uint = 463 ; pub const XK_Dstroke : :: std :: os :: raw :: c_uint = 464 ; pub const XK_Nacute : :: std :: os :: raw :: c_uint = 465 ; pub const XK_Ncaron : :: std :: os :: raw :: c_uint = 466 ; pub const XK_Odoubleacute : :: std :: os :: raw :: c_uint = 469 ; pub const XK_Rcaron : :: std :: os :: raw :: c_uint = 472 ; pub const XK_Uring : :: std :: os :: raw :: c_uint = 473 ; pub const XK_Udoubleacute : :: std :: os :: raw :: c_uint = 475 ; pub const XK_Tcedilla : :: std :: os :: raw :: c_uint = 478 ; pub const XK_racute : :: std :: os :: raw :: c_uint = 480 ; pub const XK_abreve : :: std :: os :: raw :: c_uint = 483 ; pub const XK_lacute : :: std :: os :: raw :: c_uint = 485 ; pub const XK_cacute : :: std :: os :: raw :: c_uint = 486 ; pub const XK_ccaron : :: std :: os :: raw :: c_uint = 488 ; pub const XK_eogonek : :: std :: os :: raw :: c_uint = 490 ; pub const XK_ecaron : :: std :: os :: raw :: c_uint = 492 ; pub const XK_dcaron : :: std :: os :: raw :: c_uint = 495 ; pub const XK_dstroke : :: std :: os :: raw :: c_uint = 496 ; pub const XK_nacute : :: std :: os :: raw :: c_uint = 497 ; pub const XK_ncaron : :: std :: os :: raw :: c_uint = 498 ; pub const XK_odoubleacute : :: std :: os :: raw :: c_uint = 501 ; pub const XK_rcaron : :: std :: os :: raw :: c_uint = 504 ; pub const XK_uring : :: std :: os :: raw :: c_uint = 505 ; pub const XK_udoubleacute : :: std :: os :: raw :: c_uint = 507 ; pub const XK_tcedilla : :: std :: os :: raw :: c_uint = 510 ; pub const XK_abovedot : :: std :: os :: raw :: c_uint = 511 ; pub const XK_Hstroke : :: std :: os :: raw :: c_uint = 673 ; pub const XK_Hcircumflex : :: std :: os :: raw :: c_uint = 678 ; pub const XK_Iabovedot : :: std :: os :: raw :: c_uint = 681 ; pub const XK_Gbreve : :: std :: os :: raw :: c_uint = 683 ; pub const XK_Jcircumflex : :: std :: os :: raw :: c_uint = 684 ; pub const XK_hstroke : :: std :: os :: raw :: c_uint = 689 ; pub const XK_hcircumflex : :: std :: os :: raw :: c_uint = 694 ; pub const XK_idotless : :: std :: os :: raw :: c_uint = 697 ; pub const XK_gbreve : :: std :: os :: raw :: c_uint = 699 ; pub const XK_jcircumflex : :: std :: os :: raw :: c_uint = 700 ; pub const XK_Cabovedot : :: std :: os :: raw :: c_uint = 709 ; pub const XK_Ccircumflex : :: std :: os :: raw :: c_uint = 710 ; pub const XK_Gabovedot : :: std :: os :: raw :: c_uint = 725 ; pub const XK_Gcircumflex : :: std :: os :: raw :: c_uint = 728 ; pub const XK_Ubreve : :: std :: os :: raw :: c_uint = 733 ; pub const XK_Scircumflex : :: std :: os :: raw :: c_uint = 734 ; pub const XK_cabovedot : :: std :: os :: raw :: c_uint = 741 ; pub const XK_ccircumflex : :: std :: os :: raw :: c_uint = 742 ; pub const XK_gabovedot : :: std :: os :: raw :: c_uint = 757 ; pub const XK_gcircumflex : :: std :: os :: raw :: c_uint = 760 ; pub const XK_ubreve : :: std :: os :: raw :: c_uint = 765 ; pub const XK_scircumflex : :: std :: os :: raw :: c_uint = 766 ; pub const XK_kra : :: std :: os :: raw :: c_uint = 930 ; pub const XK_kappa : :: std :: os :: raw :: c_uint = 930 ; pub const XK_Rcedilla : :: std :: os :: raw :: c_uint = 931 ; pub const XK_Itilde : :: std :: os :: raw :: c_uint = 933 ; pub const XK_Lcedilla : :: std :: os :: raw :: c_uint = 934 ; pub const XK_Emacron : :: std :: os :: raw :: c_uint = 938 ; pub const XK_Gcedilla : :: std :: os :: raw :: c_uint = 939 ; pub const XK_Tslash : :: std :: os :: raw :: c_uint = 940 ; pub const XK_rcedilla : :: std :: os :: raw :: c_uint = 947 ; pub const XK_itilde : :: std :: os :: raw :: c_uint = 949 ; pub const XK_lcedilla : :: std :: os :: raw :: c_uint = 950 ; pub const XK_emacron : :: std :: os :: raw :: c_uint = 954 ; pub const XK_gcedilla : :: std :: os :: raw :: c_uint = 955 ; pub const XK_tslash : :: std :: os :: raw :: c_uint = 956 ; pub const XK_ENG : :: std :: os :: raw :: c_uint = 957 ; pub const XK_eng : :: std :: os :: raw :: c_uint = 959 ; pub const XK_Amacron : :: std :: os :: raw :: c_uint = 960 ; pub const XK_Iogonek : :: std :: os :: raw :: c_uint = 967 ; pub const XK_Eabovedot : :: std :: os :: raw :: c_uint = 972 ; pub const XK_Imacron : :: std :: os :: raw :: c_uint = 975 ; pub const XK_Ncedilla : :: std :: os :: raw :: c_uint = 977 ; pub const XK_Omacron : :: std :: os :: raw :: c_uint = 978 ; pub const XK_Kcedilla : :: std :: os :: raw :: c_uint = 979 ; pub const XK_Uogonek : :: std :: os :: raw :: c_uint = 985 ; pub const XK_Utilde : :: std :: os :: raw :: c_uint = 989 ; pub const XK_Umacron : :: std :: os :: raw :: c_uint = 990 ; pub const XK_amacron : :: std :: os :: raw :: c_uint = 992 ; pub const XK_iogonek : :: std :: os :: raw :: c_uint = 999 ; pub const XK_eabovedot : :: std :: os :: raw :: c_uint = 1004 ; pub const XK_imacron : :: std :: os :: raw :: c_uint = 1007 ; pub const XK_ncedilla : :: std :: os :: raw :: c_uint = 1009 ; pub const XK_omacron : :: std :: os :: raw :: c_uint = 1010 ; pub const XK_kcedilla : :: std :: os :: raw :: c_uint = 1011 ; pub const XK_uogonek : :: std :: os :: raw :: c_uint = 1017 ; pub const XK_utilde : :: std :: os :: raw :: c_uint = 1021 ; pub const XK_umacron : :: std :: os :: raw :: c_uint = 1022 ; pub const XK_Wcircumflex : :: std :: os :: raw :: c_uint = 16777588 ; pub const XK_wcircumflex : :: std :: os :: raw :: c_uint = 16777589 ; pub const XK_Ycircumflex : :: std :: os :: raw :: c_uint = 16777590 ; pub const XK_ycircumflex : :: std :: os :: raw :: c_uint = 16777591 ; pub const XK_Babovedot : :: std :: os :: raw :: c_uint = 16784898 ; pub const XK_babovedot : :: std :: os :: raw :: c_uint = 16784899 ; pub const XK_Dabovedot : :: std :: os :: raw :: c_uint = 16784906 ; pub const XK_dabovedot : :: std :: os :: raw :: c_uint = 16784907 ; pub const XK_Fabovedot : :: std :: os :: raw :: c_uint = 16784926 ; pub const XK_fabovedot : :: std :: os :: raw :: c_uint = 16784927 ; pub const XK_Mabovedot : :: std :: os :: raw :: c_uint = 16784960 ; pub const XK_mabovedot : :: std :: os :: raw :: c_uint = 16784961 ; pub const XK_Pabovedot : :: std :: os :: raw :: c_uint = 16784982 ; pub const XK_pabovedot : :: std :: os :: raw :: c_uint = 16784983 ; pub const XK_Sabovedot : :: std :: os :: raw :: c_uint = 16784992 ; pub const XK_sabovedot : :: std :: os :: raw :: c_uint = 16784993 ; pub const XK_Tabovedot : :: std :: os :: raw :: c_uint = 16785002 ; pub const XK_tabovedot : :: std :: os :: raw :: c_uint = 16785003 ; pub const XK_Wgrave : :: std :: os :: raw :: c_uint = 16785024 ; pub const XK_wgrave : :: std :: os :: raw :: c_uint = 16785025 ; pub const XK_Wacute : :: std :: os :: raw :: c_uint = 16785026 ; pub const XK_wacute : :: std :: os :: raw :: c_uint = 16785027 ; pub const XK_Wdiaeresis : :: std :: os :: raw :: c_uint = 16785028 ; pub const XK_wdiaeresis : :: std :: os :: raw :: c_uint = 16785029 ; pub const XK_Ygrave : :: std :: os :: raw :: c_uint = 16785138 ; pub const XK_ygrave : :: std :: os :: raw :: c_uint = 16785139 ; pub const XK_OE : :: std :: os :: raw :: c_uint = 5052 ; pub const XK_oe : :: std :: os :: raw :: c_uint = 5053 ; pub const XK_Ydiaeresis : :: std :: os :: raw :: c_uint = 5054 ; pub const XK_overline : :: std :: os :: raw :: c_uint = 1150 ; pub const XK_kana_fullstop : :: std :: os :: raw :: c_uint = 1185 ; pub const XK_kana_openingbracket : :: std :: os :: raw :: c_uint = 1186 ; pub const XK_kana_closingbracket : :: std :: os :: raw :: c_uint = 1187 ; pub const XK_kana_comma : :: std :: os :: raw :: c_uint = 1188 ; pub const XK_kana_conjunctive : :: std :: os :: raw :: c_uint = 1189 ; pub const XK_kana_middledot : :: std :: os :: raw :: c_uint = 1189 ; pub const XK_kana_WO : :: std :: os :: raw :: c_uint = 1190 ; pub const XK_kana_a : :: std :: os :: raw :: c_uint = 1191 ; pub const XK_kana_i : :: std :: os :: raw :: c_uint = 1192 ; pub const XK_kana_u : :: std :: os :: raw :: c_uint = 1193 ; pub const XK_kana_e : :: std :: os :: raw :: c_uint = 1194 ; pub const XK_kana_o : :: std :: os :: raw :: c_uint = 1195 ; pub const XK_kana_ya : :: std :: os :: raw :: c_uint = 1196 ; pub const XK_kana_yu : :: std :: os :: raw :: c_uint = 1197 ; pub const XK_kana_yo : :: std :: os :: raw :: c_uint = 1198 ; pub const XK_kana_tsu : :: std :: os :: raw :: c_uint = 1199 ; pub const XK_kana_tu : :: std :: os :: raw :: c_uint = 1199 ; pub const XK_prolongedsound : :: std :: os :: raw :: c_uint = 1200 ; pub const XK_kana_A : :: std :: os :: raw :: c_uint = 1201 ; pub const XK_kana_I : :: std :: os :: raw :: c_uint = 1202 ; pub const XK_kana_U : :: std :: os :: raw :: c_uint = 1203 ; pub const XK_kana_E : :: std :: os :: raw :: c_uint = 1204 ; pub const XK_kana_O : :: std :: os :: raw :: c_uint = 1205 ; pub const XK_kana_KA : :: std :: os :: raw :: c_uint = 1206 ; pub const XK_kana_KI : :: std :: os :: raw :: c_uint = 1207 ; pub const XK_kana_KU : :: std :: os :: raw :: c_uint = 1208 ; pub const XK_kana_KE : :: std :: os :: raw :: c_uint = 1209 ; pub const XK_kana_KO : :: std :: os :: raw :: c_uint = 1210 ; pub const XK_kana_SA : :: std :: os :: raw :: c_uint = 1211 ; pub const XK_kana_SHI : :: std :: os :: raw :: c_uint = 1212 ; pub const XK_kana_SU : :: std :: os :: raw :: c_uint = 1213 ; pub const XK_kana_SE : :: std :: os :: raw :: c_uint = 1214 ; pub const XK_kana_SO : :: std :: os :: raw :: c_uint = 1215 ; pub const XK_kana_TA : :: std :: os :: raw :: c_uint = 1216 ; pub const XK_kana_CHI : :: std :: os :: raw :: c_uint = 1217 ; pub const XK_kana_TI : :: std :: os :: raw :: c_uint = 1217 ; pub const XK_kana_TSU : :: std :: os :: raw :: c_uint = 1218 ; pub const XK_kana_TU : :: std :: os :: raw :: c_uint = 1218 ; pub const XK_kana_TE : :: std :: os :: raw :: c_uint = 1219 ; pub const XK_kana_TO : :: std :: os :: raw :: c_uint = 1220 ; pub const XK_kana_NA : :: std :: os :: raw :: c_uint = 1221 ; pub const XK_kana_NI : :: std :: os :: raw :: c_uint = 1222 ; pub const XK_kana_NU : :: std :: os :: raw :: c_uint = 1223 ; pub const XK_kana_NE : :: std :: os :: raw :: c_uint = 1224 ; pub const XK_kana_NO : :: std :: os :: raw :: c_uint = 1225 ; pub const XK_kana_HA : :: std :: os :: raw :: c_uint = 1226 ; pub const XK_kana_HI : :: std :: os :: raw :: c_uint = 1227 ; pub const XK_kana_FU : :: std :: os :: raw :: c_uint = 1228 ; pub const XK_kana_HU : :: std :: os :: raw :: c_uint = 1228 ; pub const XK_kana_HE : :: std :: os :: raw :: c_uint = 1229 ; pub const XK_kana_HO : :: std :: os :: raw :: c_uint = 1230 ; pub const XK_kana_MA : :: std :: os :: raw :: c_uint = 1231 ; pub const XK_kana_MI : :: std :: os :: raw :: c_uint = 1232 ; pub const XK_kana_MU : :: std :: os :: raw :: c_uint = 1233 ; pub const XK_kana_ME : :: std :: os :: raw :: c_uint = 1234 ; pub const XK_kana_MO : :: std :: os :: raw :: c_uint = 1235 ; pub const XK_kana_YA : :: std :: os :: raw :: c_uint = 1236 ; pub const XK_kana_YU : :: std :: os :: raw :: c_uint = 1237 ; pub const XK_kana_YO : :: std :: os :: raw :: c_uint = 1238 ; pub const XK_kana_RA : :: std :: os :: raw :: c_uint = 1239 ; pub const XK_kana_RI : :: std :: os :: raw :: c_uint = 1240 ; pub const XK_kana_RU : :: std :: os :: raw :: c_uint = 1241 ; pub const XK_kana_RE : :: std :: os :: raw :: c_uint = 1242 ; pub const XK_kana_RO : :: std :: os :: raw :: c_uint = 1243 ; pub const XK_kana_WA : :: std :: os :: raw :: c_uint = 1244 ; pub const XK_kana_N : :: std :: os :: raw :: c_uint = 1245 ; pub const XK_voicedsound : :: std :: os :: raw :: c_uint = 1246 ; pub const XK_semivoicedsound : :: std :: os :: raw :: c_uint = 1247 ; pub const XK_kana_switch : :: std :: os :: raw :: c_uint = 65406 ; pub const XK_Farsi_0 : :: std :: os :: raw :: c_uint = 16778992 ; pub const XK_Farsi_1 : :: std :: os :: raw :: c_uint = 16778993 ; pub const XK_Farsi_2 : :: std :: os :: raw :: c_uint = 16778994 ; pub const XK_Farsi_3 : :: std :: os :: raw :: c_uint = 16778995 ; pub const XK_Farsi_4 : :: std :: os :: raw :: c_uint = 16778996 ; pub const XK_Farsi_5 : :: std :: os :: raw :: c_uint = 16778997 ; pub const XK_Farsi_6 : :: std :: os :: raw :: c_uint = 16778998 ; pub const XK_Farsi_7 : :: std :: os :: raw :: c_uint = 16778999 ; pub const XK_Farsi_8 : :: std :: os :: raw :: c_uint = 16779000 ; pub const XK_Farsi_9 : :: std :: os :: raw :: c_uint = 16779001 ; pub const XK_Arabic_percent : :: std :: os :: raw :: c_uint = 16778858 ; pub const XK_Arabic_superscript_alef : :: std :: os :: raw :: c_uint = 16778864 ; pub const XK_Arabic_tteh : :: std :: os :: raw :: c_uint = 16778873 ; pub const XK_Arabic_peh : :: std :: os :: raw :: c_uint = 16778878 ; pub const XK_Arabic_tcheh : :: std :: os :: raw :: c_uint = 16778886 ; pub const XK_Arabic_ddal : :: std :: os :: raw :: c_uint = 16778888 ; pub const XK_Arabic_rreh : :: std :: os :: raw :: c_uint = 16778897 ; pub const XK_Arabic_comma : :: std :: os :: raw :: c_uint = 1452 ; pub const XK_Arabic_fullstop : :: std :: os :: raw :: c_uint = 16778964 ; pub const XK_Arabic_0 : :: std :: os :: raw :: c_uint = 16778848 ; pub const XK_Arabic_1 : :: std :: os :: raw :: c_uint = 16778849 ; pub const XK_Arabic_2 : :: std :: os :: raw :: c_uint = 16778850 ; pub const XK_Arabic_3 : :: std :: os :: raw :: c_uint = 16778851 ; pub const XK_Arabic_4 : :: std :: os :: raw :: c_uint = 16778852 ; pub const XK_Arabic_5 : :: std :: os :: raw :: c_uint = 16778853 ; pub const XK_Arabic_6 : :: std :: os :: raw :: c_uint = 16778854 ; pub const XK_Arabic_7 : :: std :: os :: raw :: c_uint = 16778855 ; pub const XK_Arabic_8 : :: std :: os :: raw :: c_uint = 16778856 ; pub const XK_Arabic_9 : :: std :: os :: raw :: c_uint = 16778857 ; pub const XK_Arabic_semicolon : :: std :: os :: raw :: c_uint = 1467 ; pub const XK_Arabic_question_mark : :: std :: os :: raw :: c_uint = 1471 ; pub const XK_Arabic_hamza : :: std :: os :: raw :: c_uint = 1473 ; pub const XK_Arabic_maddaonalef : :: std :: os :: raw :: c_uint = 1474 ; pub const XK_Arabic_hamzaonalef : :: std :: os :: raw :: c_uint = 1475 ; pub const XK_Arabic_hamzaonwaw : :: std :: os :: raw :: c_uint = 1476 ; pub const XK_Arabic_hamzaunderalef : :: std :: os :: raw :: c_uint = 1477 ; pub const XK_Arabic_hamzaonyeh : :: std :: os :: raw :: c_uint = 1478 ; pub const XK_Arabic_alef : :: std :: os :: raw :: c_uint = 1479 ; pub const XK_Arabic_beh : :: std :: os :: raw :: c_uint = 1480 ; pub const XK_Arabic_tehmarbuta : :: std :: os :: raw :: c_uint = 1481 ; pub const XK_Arabic_teh : :: std :: os :: raw :: c_uint = 1482 ; pub const XK_Arabic_theh : :: std :: os :: raw :: c_uint = 1483 ; pub const XK_Arabic_jeem : :: std :: os :: raw :: c_uint = 1484 ; pub const XK_Arabic_hah : :: std :: os :: raw :: c_uint = 1485 ; pub const XK_Arabic_khah : :: std :: os :: raw :: c_uint = 1486 ; pub const XK_Arabic_dal : :: std :: os :: raw :: c_uint = 1487 ; pub const XK_Arabic_thal : :: std :: os :: raw :: c_uint = 1488 ; pub const XK_Arabic_ra : :: std :: os :: raw :: c_uint = 1489 ; pub const XK_Arabic_zain : :: std :: os :: raw :: c_uint = 1490 ; pub const XK_Arabic_seen : :: std :: os :: raw :: c_uint = 1491 ; pub const XK_Arabic_sheen : :: std :: os :: raw :: c_uint = 1492 ; pub const XK_Arabic_sad : :: std :: os :: raw :: c_uint = 1493 ; pub const XK_Arabic_dad : :: std :: os :: raw :: c_uint = 1494 ; pub const XK_Arabic_tah : :: std :: os :: raw :: c_uint = 1495 ; pub const XK_Arabic_zah : :: std :: os :: raw :: c_uint = 1496 ; pub const XK_Arabic_ain : :: std :: os :: raw :: c_uint = 1497 ; pub const XK_Arabic_ghain : :: std :: os :: raw :: c_uint = 1498 ; pub const XK_Arabic_tatweel : :: std :: os :: raw :: c_uint = 1504 ; pub const XK_Arabic_feh : :: std :: os :: raw :: c_uint = 1505 ; pub const XK_Arabic_qaf : :: std :: os :: raw :: c_uint = 1506 ; pub const XK_Arabic_kaf : :: std :: os :: raw :: c_uint = 1507 ; pub const XK_Arabic_lam : :: std :: os :: raw :: c_uint = 1508 ; pub const XK_Arabic_meem : :: std :: os :: raw :: c_uint = 1509 ; pub const XK_Arabic_noon : :: std :: os :: raw :: c_uint = 1510 ; pub const XK_Arabic_ha : :: std :: os :: raw :: c_uint = 1511 ; pub const XK_Arabic_heh : :: std :: os :: raw :: c_uint = 1511 ; pub const XK_Arabic_waw : :: std :: os :: raw :: c_uint = 1512 ; pub const XK_Arabic_alefmaksura : :: std :: os :: raw :: c_uint = 1513 ; pub const XK_Arabic_yeh : :: std :: os :: raw :: c_uint = 1514 ; pub const XK_Arabic_fathatan : :: std :: os :: raw :: c_uint = 1515 ; pub const XK_Arabic_dammatan : :: std :: os :: raw :: c_uint = 1516 ; pub const XK_Arabic_kasratan : :: std :: os :: raw :: c_uint = 1517 ; pub const XK_Arabic_fatha : :: std :: os :: raw :: c_uint = 1518 ; pub const XK_Arabic_damma : :: std :: os :: raw :: c_uint = 1519 ; pub const XK_Arabic_kasra : :: std :: os :: raw :: c_uint = 1520 ; pub const XK_Arabic_shadda : :: std :: os :: raw :: c_uint = 1521 ; pub const XK_Arabic_sukun : :: std :: os :: raw :: c_uint = 1522 ; pub const XK_Arabic_madda_above : :: std :: os :: raw :: c_uint = 16778835 ; pub const XK_Arabic_hamza_above : :: std :: os :: raw :: c_uint = 16778836 ; pub const XK_Arabic_hamza_below : :: std :: os :: raw :: c_uint = 16778837 ; pub const XK_Arabic_jeh : :: std :: os :: raw :: c_uint = 16778904 ; pub const XK_Arabic_veh : :: std :: os :: raw :: c_uint = 16778916 ; pub const XK_Arabic_keheh : :: std :: os :: raw :: c_uint = 16778921 ; pub const XK_Arabic_gaf : :: std :: os :: raw :: c_uint = 16778927 ; pub const XK_Arabic_noon_ghunna : :: std :: os :: raw :: c_uint = 16778938 ; pub const XK_Arabic_heh_doachashmee : :: std :: os :: raw :: c_uint = 16778942 ; pub const XK_Farsi_yeh : :: std :: os :: raw :: c_uint = 16778956 ; pub const XK_Arabic_farsi_yeh : :: std :: os :: raw :: c_uint = 16778956 ; pub const XK_Arabic_yeh_baree : :: std :: os :: raw :: c_uint = 16778962 ; pub const XK_Arabic_heh_goal : :: std :: os :: raw :: c_uint = 16778945 ; pub const XK_Arabic_switch : :: std :: os :: raw :: c_uint = 65406 ; pub const XK_Cyrillic_GHE_bar : :: std :: os :: raw :: c_uint = 16778386 ; pub const XK_Cyrillic_ghe_bar : :: std :: os :: raw :: c_uint = 16778387 ; pub const XK_Cyrillic_ZHE_descender : :: std :: os :: raw :: c_uint = 16778390 ; pub const XK_Cyrillic_zhe_descender : :: std :: os :: raw :: c_uint = 16778391 ; pub const XK_Cyrillic_KA_descender : :: std :: os :: raw :: c_uint = 16778394 ; pub const XK_Cyrillic_ka_descender : :: std :: os :: raw :: c_uint = 16778395 ; pub const XK_Cyrillic_KA_vertstroke : :: std :: os :: raw :: c_uint = 16778396 ; pub const XK_Cyrillic_ka_vertstroke : :: std :: os :: raw :: c_uint = 16778397 ; pub const XK_Cyrillic_EN_descender : :: std :: os :: raw :: c_uint = 16778402 ; pub const XK_Cyrillic_en_descender : :: std :: os :: raw :: c_uint = 16778403 ; pub const XK_Cyrillic_U_straight : :: std :: os :: raw :: c_uint = 16778414 ; pub const XK_Cyrillic_u_straight : :: std :: os :: raw :: c_uint = 16778415 ; pub const XK_Cyrillic_U_straight_bar : :: std :: os :: raw :: c_uint = 16778416 ; pub const XK_Cyrillic_u_straight_bar : :: std :: os :: raw :: c_uint = 16778417 ; pub const XK_Cyrillic_HA_descender : :: std :: os :: raw :: c_uint = 16778418 ; pub const XK_Cyrillic_ha_descender : :: std :: os :: raw :: c_uint = 16778419 ; pub const XK_Cyrillic_CHE_descender : :: std :: os :: raw :: c_uint = 16778422 ; pub const XK_Cyrillic_che_descender : :: std :: os :: raw :: c_uint = 16778423 ; pub const XK_Cyrillic_CHE_vertstroke : :: std :: os :: raw :: c_uint = 16778424 ; pub const XK_Cyrillic_che_vertstroke : :: std :: os :: raw :: c_uint = 16778425 ; pub const XK_Cyrillic_SHHA : :: std :: os :: raw :: c_uint = 16778426 ; pub const XK_Cyrillic_shha : :: std :: os :: raw :: c_uint = 16778427 ; pub const XK_Cyrillic_SCHWA : :: std :: os :: raw :: c_uint = 16778456 ; pub const XK_Cyrillic_schwa : :: std :: os :: raw :: c_uint = 16778457 ; pub const XK_Cyrillic_I_macron : :: std :: os :: raw :: c_uint = 16778466 ; pub const XK_Cyrillic_i_macron : :: std :: os :: raw :: c_uint = 16778467 ; pub const XK_Cyrillic_O_bar : :: std :: os :: raw :: c_uint = 16778472 ; pub const XK_Cyrillic_o_bar : :: std :: os :: raw :: c_uint = 16778473 ; pub const XK_Cyrillic_U_macron : :: std :: os :: raw :: c_uint = 16778478 ; pub const XK_Cyrillic_u_macron : :: std :: os :: raw :: c_uint = 16778479 ; pub const XK_Serbian_dje : :: std :: os :: raw :: c_uint = 1697 ; pub const XK_Macedonia_gje : :: std :: os :: raw :: c_uint = 1698 ; pub const XK_Cyrillic_io : :: std :: os :: raw :: c_uint = 1699 ; pub const XK_Ukrainian_ie : :: std :: os :: raw :: c_uint = 1700 ; pub const XK_Ukranian_je : :: std :: os :: raw :: c_uint = 1700 ; pub const XK_Macedonia_dse : :: std :: os :: raw :: c_uint = 1701 ; pub const XK_Ukrainian_i : :: std :: os :: raw :: c_uint = 1702 ; pub const XK_Ukranian_i : :: std :: os :: raw :: c_uint = 1702 ; pub const XK_Ukrainian_yi : :: std :: os :: raw :: c_uint = 1703 ; pub const XK_Ukranian_yi : :: std :: os :: raw :: c_uint = 1703 ; pub const XK_Cyrillic_je : :: std :: os :: raw :: c_uint = 1704 ; pub const XK_Serbian_je : :: std :: os :: raw :: c_uint = 1704 ; pub const XK_Cyrillic_lje : :: std :: os :: raw :: c_uint = 1705 ; pub const XK_Serbian_lje : :: std :: os :: raw :: c_uint = 1705 ; pub const XK_Cyrillic_nje : :: std :: os :: raw :: c_uint = 1706 ; pub const XK_Serbian_nje : :: std :: os :: raw :: c_uint = 1706 ; pub const XK_Serbian_tshe : :: std :: os :: raw :: c_uint = 1707 ; pub const XK_Macedonia_kje : :: std :: os :: raw :: c_uint = 1708 ; pub const XK_Ukrainian_ghe_with_upturn : :: std :: os :: raw :: c_uint = 1709 ; pub const XK_Byelorussian_shortu : :: std :: os :: raw :: c_uint = 1710 ; pub const XK_Cyrillic_dzhe : :: std :: os :: raw :: c_uint = 1711 ; pub const XK_Serbian_dze : :: std :: os :: raw :: c_uint = 1711 ; pub const XK_numerosign : :: std :: os :: raw :: c_uint = 1712 ; pub const XK_Serbian_DJE : :: std :: os :: raw :: c_uint = 1713 ; pub const XK_Macedonia_GJE : :: std :: os :: raw :: c_uint = 1714 ; pub const XK_Cyrillic_IO : :: std :: os :: raw :: c_uint = 1715 ; pub const XK_Ukrainian_IE : :: std :: os :: raw :: c_uint = 1716 ; pub const XK_Ukranian_JE : :: std :: os :: raw :: c_uint = 1716 ; pub const XK_Macedonia_DSE : :: std :: os :: raw :: c_uint = 1717 ; pub const XK_Ukrainian_I : :: std :: os :: raw :: c_uint = 1718 ; pub const XK_Ukranian_I : :: std :: os :: raw :: c_uint = 1718 ; pub const XK_Ukrainian_YI : :: std :: os :: raw :: c_uint = 1719 ; pub const XK_Ukranian_YI : :: std :: os :: raw :: c_uint = 1719 ; pub const XK_Cyrillic_JE : :: std :: os :: raw :: c_uint = 1720 ; pub const XK_Serbian_JE : :: std :: os :: raw :: c_uint = 1720 ; pub const XK_Cyrillic_LJE : :: std :: os :: raw :: c_uint = 1721 ; pub const XK_Serbian_LJE : :: std :: os :: raw :: c_uint = 1721 ; pub const XK_Cyrillic_NJE : :: std :: os :: raw :: c_uint = 1722 ; pub const XK_Serbian_NJE : :: std :: os :: raw :: c_uint = 1722 ; pub const XK_Serbian_TSHE : :: std :: os :: raw :: c_uint = 1723 ; pub const XK_Macedonia_KJE : :: std :: os :: raw :: c_uint = 1724 ; pub const XK_Ukrainian_GHE_WITH_UPTURN : :: std :: os :: raw :: c_uint = 1725 ; pub const XK_Byelorussian_SHORTU : :: std :: os :: raw :: c_uint = 1726 ; pub const XK_Cyrillic_DZHE : :: std :: os :: raw :: c_uint = 1727 ; pub const XK_Serbian_DZE : :: std :: os :: raw :: c_uint = 1727 ; pub const XK_Cyrillic_yu : :: std :: os :: raw :: c_uint = 1728 ; pub const XK_Cyrillic_a : :: std :: os :: raw :: c_uint = 1729 ; pub const XK_Cyrillic_be : :: std :: os :: raw :: c_uint = 1730 ; pub const XK_Cyrillic_tse : :: std :: os :: raw :: c_uint = 1731 ; pub const XK_Cyrillic_de : :: std :: os :: raw :: c_uint = 1732 ; pub const XK_Cyrillic_ie : :: std :: os :: raw :: c_uint = 1733 ; pub const XK_Cyrillic_ef : :: std :: os :: raw :: c_uint = 1734 ; pub const XK_Cyrillic_ghe : :: std :: os :: raw :: c_uint = 1735 ; pub const XK_Cyrillic_ha : :: std :: os :: raw :: c_uint = 1736 ; pub const XK_Cyrillic_i : :: std :: os :: raw :: c_uint = 1737 ; pub const XK_Cyrillic_shorti : :: std :: os :: raw :: c_uint = 1738 ; pub const XK_Cyrillic_ka : :: std :: os :: raw :: c_uint = 1739 ; pub const XK_Cyrillic_el : :: std :: os :: raw :: c_uint = 1740 ; pub const XK_Cyrillic_em : :: std :: os :: raw :: c_uint = 1741 ; pub const XK_Cyrillic_en : :: std :: os :: raw :: c_uint = 1742 ; pub const XK_Cyrillic_o : :: std :: os :: raw :: c_uint = 1743 ; pub const XK_Cyrillic_pe : :: std :: os :: raw :: c_uint = 1744 ; pub const XK_Cyrillic_ya : :: std :: os :: raw :: c_uint = 1745 ; pub const XK_Cyrillic_er : :: std :: os :: raw :: c_uint = 1746 ; pub const XK_Cyrillic_es : :: std :: os :: raw :: c_uint = 1747 ; pub const XK_Cyrillic_te : :: std :: os :: raw :: c_uint = 1748 ; pub const XK_Cyrillic_u : :: std :: os :: raw :: c_uint = 1749 ; pub const XK_Cyrillic_zhe : :: std :: os :: raw :: c_uint = 1750 ; pub const XK_Cyrillic_ve : :: std :: os :: raw :: c_uint = 1751 ; pub const XK_Cyrillic_softsign : :: std :: os :: raw :: c_uint = 1752 ; pub const XK_Cyrillic_yeru : :: std :: os :: raw :: c_uint = 1753 ; pub const XK_Cyrillic_ze : :: std :: os :: raw :: c_uint = 1754 ; pub const XK_Cyrillic_sha : :: std :: os :: raw :: c_uint = 1755 ; pub const XK_Cyrillic_e : :: std :: os :: raw :: c_uint = 1756 ; pub const XK_Cyrillic_shcha : :: std :: os :: raw :: c_uint = 1757 ; pub const XK_Cyrillic_che : :: std :: os :: raw :: c_uint = 1758 ; pub const XK_Cyrillic_hardsign : :: std :: os :: raw :: c_uint = 1759 ; pub const XK_Cyrillic_YU : :: std :: os :: raw :: c_uint = 1760 ; pub const XK_Cyrillic_A : :: std :: os :: raw :: c_uint = 1761 ; pub const XK_Cyrillic_BE : :: std :: os :: raw :: c_uint = 1762 ; pub const XK_Cyrillic_TSE : :: std :: os :: raw :: c_uint = 1763 ; pub const XK_Cyrillic_DE : :: std :: os :: raw :: c_uint = 1764 ; pub const XK_Cyrillic_IE : :: std :: os :: raw :: c_uint = 1765 ; pub const XK_Cyrillic_EF : :: std :: os :: raw :: c_uint = 1766 ; pub const XK_Cyrillic_GHE : :: std :: os :: raw :: c_uint = 1767 ; pub const XK_Cyrillic_HA : :: std :: os :: raw :: c_uint = 1768 ; pub const XK_Cyrillic_I : :: std :: os :: raw :: c_uint = 1769 ; pub const XK_Cyrillic_SHORTI : :: std :: os :: raw :: c_uint = 1770 ; pub const XK_Cyrillic_KA : :: std :: os :: raw :: c_uint = 1771 ; pub const XK_Cyrillic_EL : :: std :: os :: raw :: c_uint = 1772 ; pub const XK_Cyrillic_EM : :: std :: os :: raw :: c_uint = 1773 ; pub const XK_Cyrillic_EN : :: std :: os :: raw :: c_uint = 1774 ; pub const XK_Cyrillic_O : :: std :: os :: raw :: c_uint = 1775 ; pub const XK_Cyrillic_PE : :: std :: os :: raw :: c_uint = 1776 ; pub const XK_Cyrillic_YA : :: std :: os :: raw :: c_uint = 1777 ; pub const XK_Cyrillic_ER : :: std :: os :: raw :: c_uint = 1778 ; pub const XK_Cyrillic_ES : :: std :: os :: raw :: c_uint = 1779 ; pub const XK_Cyrillic_TE : :: std :: os :: raw :: c_uint = 1780 ; pub const XK_Cyrillic_U : :: std :: os :: raw :: c_uint = 1781 ; pub const XK_Cyrillic_ZHE : :: std :: os :: raw :: c_uint = 1782 ; pub const XK_Cyrillic_VE : :: std :: os :: raw :: c_uint = 1783 ; pub const XK_Cyrillic_SOFTSIGN : :: std :: os :: raw :: c_uint = 1784 ; pub const XK_Cyrillic_YERU : :: std :: os :: raw :: c_uint = 1785 ; pub const XK_Cyrillic_ZE : :: std :: os :: raw :: c_uint = 1786 ; pub const XK_Cyrillic_SHA : :: std :: os :: raw :: c_uint = 1787 ; pub const XK_Cyrillic_E : :: std :: os :: raw :: c_uint = 1788 ; pub const XK_Cyrillic_SHCHA : :: std :: os :: raw :: c_uint = 1789 ; pub const XK_Cyrillic_CHE : :: std :: os :: raw :: c_uint = 1790 ; pub const XK_Cyrillic_HARDSIGN : :: std :: os :: raw :: c_uint = 1791 ; pub const XK_Greek_ALPHAaccent : :: std :: os :: raw :: c_uint = 1953 ; pub const XK_Greek_EPSILONaccent : :: std :: os :: raw :: c_uint = 1954 ; pub const XK_Greek_ETAaccent : :: std :: os :: raw :: c_uint = 1955 ; pub const XK_Greek_IOTAaccent : :: std :: os :: raw :: c_uint = 1956 ; pub const XK_Greek_IOTAdieresis : :: std :: os :: raw :: c_uint = 1957 ; pub const XK_Greek_IOTAdiaeresis : :: std :: os :: raw :: c_uint = 1957 ; pub const XK_Greek_OMICRONaccent : :: std :: os :: raw :: c_uint = 1959 ; pub const XK_Greek_UPSILONaccent : :: std :: os :: raw :: c_uint = 1960 ; pub const XK_Greek_UPSILONdieresis : :: std :: os :: raw :: c_uint = 1961 ; pub const XK_Greek_OMEGAaccent : :: std :: os :: raw :: c_uint = 1963 ; pub const XK_Greek_accentdieresis : :: std :: os :: raw :: c_uint = 1966 ; pub const XK_Greek_horizbar : :: std :: os :: raw :: c_uint = 1967 ; pub const XK_Greek_alphaaccent : :: std :: os :: raw :: c_uint = 1969 ; pub const XK_Greek_epsilonaccent : :: std :: os :: raw :: c_uint = 1970 ; pub const XK_Greek_etaaccent : :: std :: os :: raw :: c_uint = 1971 ; pub const XK_Greek_iotaaccent : :: std :: os :: raw :: c_uint = 1972 ; pub const XK_Greek_iotadieresis : :: std :: os :: raw :: c_uint = 1973 ; pub const XK_Greek_iotaaccentdieresis : :: std :: os :: raw :: c_uint = 1974 ; pub const XK_Greek_omicronaccent : :: std :: os :: raw :: c_uint = 1975 ; pub const XK_Greek_upsilonaccent : :: std :: os :: raw :: c_uint = 1976 ; pub const XK_Greek_upsilondieresis : :: std :: os :: raw :: c_uint = 1977 ; pub const XK_Greek_upsilonaccentdieresis : :: std :: os :: raw :: c_uint = 1978 ; pub const XK_Greek_omegaaccent : :: std :: os :: raw :: c_uint = 1979 ; pub const XK_Greek_ALPHA : :: std :: os :: raw :: c_uint = 1985 ; pub const XK_Greek_BETA : :: std :: os :: raw :: c_uint = 1986 ; pub const XK_Greek_GAMMA : :: std :: os :: raw :: c_uint = 1987 ; pub const XK_Greek_DELTA : :: std :: os :: raw :: c_uint = 1988 ; pub const XK_Greek_EPSILON : :: std :: os :: raw :: c_uint = 1989 ; pub const XK_Greek_ZETA : :: std :: os :: raw :: c_uint = 1990 ; pub const XK_Greek_ETA : :: std :: os :: raw :: c_uint = 1991 ; pub const XK_Greek_THETA : :: std :: os :: raw :: c_uint = 1992 ; pub const XK_Greek_IOTA : :: std :: os :: raw :: c_uint = 1993 ; pub const XK_Greek_KAPPA : :: std :: os :: raw :: c_uint = 1994 ; pub const XK_Greek_LAMDA : :: std :: os :: raw :: c_uint = 1995 ; pub const XK_Greek_LAMBDA : :: std :: os :: raw :: c_uint = 1995 ; pub const XK_Greek_MU : :: std :: os :: raw :: c_uint = 1996 ; pub const XK_Greek_NU : :: std :: os :: raw :: c_uint = 1997 ; pub const XK_Greek_XI : :: std :: os :: raw :: c_uint = 1998 ; pub const XK_Greek_OMICRON : :: std :: os :: raw :: c_uint = 1999 ; pub const XK_Greek_PI : :: std :: os :: raw :: c_uint = 2000 ; pub const XK_Greek_RHO : :: std :: os :: raw :: c_uint = 2001 ; pub const XK_Greek_SIGMA : :: std :: os :: raw :: c_uint = 2002 ; pub const XK_Greek_TAU : :: std :: os :: raw :: c_uint = 2004 ; pub const XK_Greek_UPSILON : :: std :: os :: raw :: c_uint = 2005 ; pub const XK_Greek_PHI : :: std :: os :: raw :: c_uint = 2006 ; pub const XK_Greek_CHI : :: std :: os :: raw :: c_uint = 2007 ; pub const XK_Greek_PSI : :: std :: os :: raw :: c_uint = 2008 ; pub const XK_Greek_OMEGA : :: std :: os :: raw :: c_uint = 2009 ; pub const XK_Greek_alpha : :: std :: os :: raw :: c_uint = 2017 ; pub const XK_Greek_beta : :: std :: os :: raw :: c_uint = 2018 ; pub const XK_Greek_gamma : :: std :: os :: raw :: c_uint = 2019 ; pub const XK_Greek_delta : :: std :: os :: raw :: c_uint = 2020 ; pub const XK_Greek_epsilon : :: std :: os :: raw :: c_uint = 2021 ; pub const XK_Greek_zeta : :: std :: os :: raw :: c_uint = 2022 ; pub const XK_Greek_eta : :: std :: os :: raw :: c_uint = 2023 ; pub const XK_Greek_theta : :: std :: os :: raw :: c_uint = 2024 ; pub const XK_Greek_iota : :: std :: os :: raw :: c_uint = 2025 ; pub const XK_Greek_kappa : :: std :: os :: raw :: c_uint = 2026 ; pub const XK_Greek_lamda : :: std :: os :: raw :: c_uint = 2027 ; pub const XK_Greek_lambda : :: std :: os :: raw :: c_uint = 2027 ; pub const XK_Greek_mu : :: std :: os :: raw :: c_uint = 2028 ; pub const XK_Greek_nu : :: std :: os :: raw :: c_uint = 2029 ; pub const XK_Greek_xi : :: std :: os :: raw :: c_uint = 2030 ; pub const XK_Greek_omicron : :: std :: os :: raw :: c_uint = 2031 ; pub const XK_Greek_pi : :: std :: os :: raw :: c_uint = 2032 ; pub const XK_Greek_rho : :: std :: os :: raw :: c_uint = 2033 ; pub const XK_Greek_sigma : :: std :: os :: raw :: c_uint = 2034 ; pub const XK_Greek_finalsmallsigma : :: std :: os :: raw :: c_uint = 2035 ; pub const XK_Greek_tau : :: std :: os :: raw :: c_uint = 2036 ; pub const XK_Greek_upsilon : :: std :: os :: raw :: c_uint = 2037 ; pub const XK_Greek_phi : :: std :: os :: raw :: c_uint = 2038 ; pub const XK_Greek_chi : :: std :: os :: raw :: c_uint = 2039 ; pub const XK_Greek_psi : :: std :: os :: raw :: c_uint = 2040 ; pub const XK_Greek_omega : :: std :: os :: raw :: c_uint = 2041 ; pub const XK_Greek_switch : :: std :: os :: raw :: c_uint = 65406 ; pub const XK_hebrew_doublelowline : :: std :: os :: raw :: c_uint = 3295 ; pub const XK_hebrew_aleph : :: std :: os :: raw :: c_uint = 3296 ; pub const XK_hebrew_bet : :: std :: os :: raw :: c_uint = 3297 ; pub const XK_hebrew_beth : :: std :: os :: raw :: c_uint = 3297 ; pub const XK_hebrew_gimel : :: std :: os :: raw :: c_uint = 3298 ; pub const XK_hebrew_gimmel : :: std :: os :: raw :: c_uint = 3298 ; pub const XK_hebrew_dalet : :: std :: os :: raw :: c_uint = 3299 ; pub const XK_hebrew_daleth : :: std :: os :: raw :: c_uint = 3299 ; pub const XK_hebrew_he : :: std :: os :: raw :: c_uint = 3300 ; pub const XK_hebrew_waw : :: std :: os :: raw :: c_uint = 3301 ; pub const XK_hebrew_zain : :: std :: os :: raw :: c_uint = 3302 ; pub const XK_hebrew_zayin : :: std :: os :: raw :: c_uint = 3302 ; pub const XK_hebrew_chet : :: std :: os :: raw :: c_uint = 3303 ; pub const XK_hebrew_het : :: std :: os :: raw :: c_uint = 3303 ; pub const XK_hebrew_tet : :: std :: os :: raw :: c_uint = 3304 ; pub const XK_hebrew_teth : :: std :: os :: raw :: c_uint = 3304 ; pub const XK_hebrew_yod : :: std :: os :: raw :: c_uint = 3305 ; pub const XK_hebrew_finalkaph : :: std :: os :: raw :: c_uint = 3306 ; pub const XK_hebrew_kaph : :: std :: os :: raw :: c_uint = 3307 ; pub const XK_hebrew_lamed : :: std :: os :: raw :: c_uint = 3308 ; pub const XK_hebrew_finalmem : :: std :: os :: raw :: c_uint = 3309 ; pub const XK_hebrew_mem : :: std :: os :: raw :: c_uint = 3310 ; pub const XK_hebrew_finalnun : :: std :: os :: raw :: c_uint = 3311 ; pub const XK_hebrew_nun : :: std :: os :: raw :: c_uint = 3312 ; pub const XK_hebrew_samech : :: std :: os :: raw :: c_uint = 3313 ; pub const XK_hebrew_samekh : :: std :: os :: raw :: c_uint = 3313 ; pub const XK_hebrew_ayin : :: std :: os :: raw :: c_uint = 3314 ; pub const XK_hebrew_finalpe : :: std :: os :: raw :: c_uint = 3315 ; pub const XK_hebrew_pe : :: std :: os :: raw :: c_uint = 3316 ; pub const XK_hebrew_finalzade : :: std :: os :: raw :: c_uint = 3317 ; pub const XK_hebrew_finalzadi : :: std :: os :: raw :: c_uint = 3317 ; pub const XK_hebrew_zade : :: std :: os :: raw :: c_uint = 3318 ; pub const XK_hebrew_zadi : :: std :: os :: raw :: c_uint = 3318 ; pub const XK_hebrew_qoph : :: std :: os :: raw :: c_uint = 3319 ; pub const XK_hebrew_kuf : :: std :: os :: raw :: c_uint = 3319 ; pub const XK_hebrew_resh : :: std :: os :: raw :: c_uint = 3320 ; pub const XK_hebrew_shin : :: std :: os :: raw :: c_uint = 3321 ; pub const XK_hebrew_taw : :: std :: os :: raw :: c_uint = 3322 ; pub const XK_hebrew_taf : :: std :: os :: raw :: c_uint = 3322 ; pub const XK_Hebrew_switch : :: std :: os :: raw :: c_uint = 65406 ; pub const XK_Thai_kokai : :: std :: os :: raw :: c_uint = 3489 ; pub const XK_Thai_khokhai : :: std :: os :: raw :: c_uint = 3490 ; pub const XK_Thai_khokhuat : :: std :: os :: raw :: c_uint = 3491 ; pub const XK_Thai_khokhwai : :: std :: os :: raw :: c_uint = 3492 ; pub const XK_Thai_khokhon : :: std :: os :: raw :: c_uint = 3493 ; pub const XK_Thai_khorakhang : :: std :: os :: raw :: c_uint = 3494 ; pub const XK_Thai_ngongu : :: std :: os :: raw :: c_uint = 3495 ; pub const XK_Thai_chochan : :: std :: os :: raw :: c_uint = 3496 ; pub const XK_Thai_choching : :: std :: os :: raw :: c_uint = 3497 ; pub const XK_Thai_chochang : :: std :: os :: raw :: c_uint = 3498 ; pub const XK_Thai_soso : :: std :: os :: raw :: c_uint = 3499 ; pub const XK_Thai_chochoe : :: std :: os :: raw :: c_uint = 3500 ; pub const XK_Thai_yoying : :: std :: os :: raw :: c_uint = 3501 ; pub const XK_Thai_dochada : :: std :: os :: raw :: c_uint = 3502 ; pub const XK_Thai_topatak : :: std :: os :: raw :: c_uint = 3503 ; pub const XK_Thai_thothan : :: std :: os :: raw :: c_uint = 3504 ; pub const XK_Thai_thonangmontho : :: std :: os :: raw :: c_uint = 3505 ; pub const XK_Thai_thophuthao : :: std :: os :: raw :: c_uint = 3506 ; pub const XK_Thai_nonen : :: std :: os :: raw :: c_uint = 3507 ; pub const XK_Thai_dodek : :: std :: os :: raw :: c_uint = 3508 ; pub const XK_Thai_totao : :: std :: os :: raw :: c_uint = 3509 ; pub const XK_Thai_thothung : :: std :: os :: raw :: c_uint = 3510 ; pub const XK_Thai_thothahan : :: std :: os :: raw :: c_uint = 3511 ; pub const XK_Thai_thothong : :: std :: os :: raw :: c_uint = 3512 ; pub const XK_Thai_nonu : :: std :: os :: raw :: c_uint = 3513 ; pub const XK_Thai_bobaimai : :: std :: os :: raw :: c_uint = 3514 ; pub const XK_Thai_popla : :: std :: os :: raw :: c_uint = 3515 ; pub const XK_Thai_phophung : :: std :: os :: raw :: c_uint = 3516 ; pub const XK_Thai_fofa : :: std :: os :: raw :: c_uint = 3517 ; pub const XK_Thai_phophan : :: std :: os :: raw :: c_uint = 3518 ; pub const XK_Thai_fofan : :: std :: os :: raw :: c_uint = 3519 ; pub const XK_Thai_phosamphao : :: std :: os :: raw :: c_uint = 3520 ; pub const XK_Thai_moma : :: std :: os :: raw :: c_uint = 3521 ; pub const XK_Thai_yoyak : :: std :: os :: raw :: c_uint = 3522 ; pub const XK_Thai_rorua : :: std :: os :: raw :: c_uint = 3523 ; pub const XK_Thai_ru : :: std :: os :: raw :: c_uint = 3524 ; pub const XK_Thai_loling : :: std :: os :: raw :: c_uint = 3525 ; pub const XK_Thai_lu : :: std :: os :: raw :: c_uint = 3526 ; pub const XK_Thai_wowaen : :: std :: os :: raw :: c_uint = 3527 ; pub const XK_Thai_sosala : :: std :: os :: raw :: c_uint = 3528 ; pub const XK_Thai_sorusi : :: std :: os :: raw :: c_uint = 3529 ; pub const XK_Thai_sosua : :: std :: os :: raw :: c_uint = 3530 ; pub const XK_Thai_hohip : :: std :: os :: raw :: c_uint = 3531 ; pub const XK_Thai_lochula : :: std :: os :: raw :: c_uint = 3532 ; pub const XK_Thai_oang : :: std :: os :: raw :: c_uint = 3533 ; pub const XK_Thai_honokhuk : :: std :: os :: raw :: c_uint = 3534 ; pub const XK_Thai_paiyannoi : :: std :: os :: raw :: c_uint = 3535 ; pub const XK_Thai_saraa : :: std :: os :: raw :: c_uint = 3536 ; pub const XK_Thai_maihanakat : :: std :: os :: raw :: c_uint = 3537 ; pub const XK_Thai_saraaa : :: std :: os :: raw :: c_uint = 3538 ; pub const XK_Thai_saraam : :: std :: os :: raw :: c_uint = 3539 ; pub const XK_Thai_sarai : :: std :: os :: raw :: c_uint = 3540 ; pub const XK_Thai_saraii : :: std :: os :: raw :: c_uint = 3541 ; pub const XK_Thai_saraue : :: std :: os :: raw :: c_uint = 3542 ; pub const XK_Thai_sarauee : :: std :: os :: raw :: c_uint = 3543 ; pub const XK_Thai_sarau : :: std :: os :: raw :: c_uint = 3544 ; pub const XK_Thai_sarauu : :: std :: os :: raw :: c_uint = 3545 ; pub const XK_Thai_phinthu : :: std :: os :: raw :: c_uint = 3546 ; pub const XK_Thai_maihanakat_maitho : :: std :: os :: raw :: c_uint = 3550 ; pub const XK_Thai_baht : :: std :: os :: raw :: c_uint = 3551 ; pub const XK_Thai_sarae : :: std :: os :: raw :: c_uint = 3552 ; pub const XK_Thai_saraae : :: std :: os :: raw :: c_uint = 3553 ; pub const XK_Thai_sarao : :: std :: os :: raw :: c_uint = 3554 ; pub const XK_Thai_saraaimaimuan : :: std :: os :: raw :: c_uint = 3555 ; pub const XK_Thai_saraaimaimalai : :: std :: os :: raw :: c_uint = 3556 ; pub const XK_Thai_lakkhangyao : :: std :: os :: raw :: c_uint = 3557 ; pub const XK_Thai_maiyamok : :: std :: os :: raw :: c_uint = 3558 ; pub const XK_Thai_maitaikhu : :: std :: os :: raw :: c_uint = 3559 ; pub const XK_Thai_maiek : :: std :: os :: raw :: c_uint = 3560 ; pub const XK_Thai_maitho : :: std :: os :: raw :: c_uint = 3561 ; pub const XK_Thai_maitri : :: std :: os :: raw :: c_uint = 3562 ; pub const XK_Thai_maichattawa : :: std :: os :: raw :: c_uint = 3563 ; pub const XK_Thai_thanthakhat : :: std :: os :: raw :: c_uint = 3564 ; pub const XK_Thai_nikhahit : :: std :: os :: raw :: c_uint = 3565 ; pub const XK_Thai_leksun : :: std :: os :: raw :: c_uint = 3568 ; pub const XK_Thai_leknung : :: std :: os :: raw :: c_uint = 3569 ; pub const XK_Thai_leksong : :: std :: os :: raw :: c_uint = 3570 ; pub const XK_Thai_leksam : :: std :: os :: raw :: c_uint = 3571 ; pub const XK_Thai_leksi : :: std :: os :: raw :: c_uint = 3572 ; pub const XK_Thai_lekha : :: std :: os :: raw :: c_uint = 3573 ; pub const XK_Thai_lekhok : :: std :: os :: raw :: c_uint = 3574 ; pub const XK_Thai_lekchet : :: std :: os :: raw :: c_uint = 3575 ; pub const XK_Thai_lekpaet : :: std :: os :: raw :: c_uint = 3576 ; pub const XK_Thai_lekkao : :: std :: os :: raw :: c_uint = 3577 ; pub const XK_Hangul : :: std :: os :: raw :: c_uint = 65329 ; pub const XK_Hangul_Start : :: std :: os :: raw :: c_uint = 65330 ; pub const XK_Hangul_End : :: std :: os :: raw :: c_uint = 65331 ; pub const XK_Hangul_Hanja : :: std :: os :: raw :: c_uint = 65332 ; pub const XK_Hangul_Jamo : :: std :: os :: raw :: c_uint = 65333 ; pub const XK_Hangul_Romaja : :: std :: os :: raw :: c_uint = 65334 ; pub const XK_Hangul_Codeinput : :: std :: os :: raw :: c_uint = 65335 ; pub const XK_Hangul_Jeonja : :: std :: os :: raw :: c_uint = 65336 ; pub const XK_Hangul_Banja : :: std :: os :: raw :: c_uint = 65337 ; pub const XK_Hangul_PreHanja : :: std :: os :: raw :: c_uint = 65338 ; pub const XK_Hangul_PostHanja : :: std :: os :: raw :: c_uint = 65339 ; pub const XK_Hangul_SingleCandidate : :: std :: os :: raw :: c_uint = 65340 ; pub const XK_Hangul_MultipleCandidate : :: std :: os :: raw :: c_uint = 65341 ; pub const XK_Hangul_PreviousCandidate : :: std :: os :: raw :: c_uint = 65342 ; pub const XK_Hangul_Special : :: std :: os :: raw :: c_uint = 65343 ; pub const XK_Hangul_switch : :: std :: os :: raw :: c_uint = 65406 ; pub const XK_Hangul_Kiyeog : :: std :: os :: raw :: c_uint = 3745 ; pub const XK_Hangul_SsangKiyeog : :: std :: os :: raw :: c_uint = 3746 ; pub const XK_Hangul_KiyeogSios : :: std :: os :: raw :: c_uint = 3747 ; pub const XK_Hangul_Nieun : :: std :: os :: raw :: c_uint = 3748 ; pub const XK_Hangul_NieunJieuj : :: std :: os :: raw :: c_uint = 3749 ; pub const XK_Hangul_NieunHieuh : :: std :: os :: raw :: c_uint = 3750 ; pub const XK_Hangul_Dikeud : :: std :: os :: raw :: c_uint = 3751 ; pub const XK_Hangul_SsangDikeud : :: std :: os :: raw :: c_uint = 3752 ; pub const XK_Hangul_Rieul : :: std :: os :: raw :: c_uint = 3753 ; pub const XK_Hangul_RieulKiyeog : :: std :: os :: raw :: c_uint = 3754 ; pub const XK_Hangul_RieulMieum : :: std :: os :: raw :: c_uint = 3755 ; pub const XK_Hangul_RieulPieub : :: std :: os :: raw :: c_uint = 3756 ; pub const XK_Hangul_RieulSios : :: std :: os :: raw :: c_uint = 3757 ; pub const XK_Hangul_RieulTieut : :: std :: os :: raw :: c_uint = 3758 ; pub const XK_Hangul_RieulPhieuf : :: std :: os :: raw :: c_uint = 3759 ; pub const XK_Hangul_RieulHieuh : :: std :: os :: raw :: c_uint = 3760 ; pub const XK_Hangul_Mieum : :: std :: os :: raw :: c_uint = 3761 ; pub const XK_Hangul_Pieub : :: std :: os :: raw :: c_uint = 3762 ; pub const XK_Hangul_SsangPieub : :: std :: os :: raw :: c_uint = 3763 ; pub const XK_Hangul_PieubSios : :: std :: os :: raw :: c_uint = 3764 ; pub const XK_Hangul_Sios : :: std :: os :: raw :: c_uint = 3765 ; pub const XK_Hangul_SsangSios : :: std :: os :: raw :: c_uint = 3766 ; pub const XK_Hangul_Ieung : :: std :: os :: raw :: c_uint = 3767 ; pub const XK_Hangul_Jieuj : :: std :: os :: raw :: c_uint = 3768 ; pub const XK_Hangul_SsangJieuj : :: std :: os :: raw :: c_uint = 3769 ; pub const XK_Hangul_Cieuc : :: std :: os :: raw :: c_uint = 3770 ; pub const XK_Hangul_Khieuq : :: std :: os :: raw :: c_uint = 3771 ; pub const XK_Hangul_Tieut : :: std :: os :: raw :: c_uint = 3772 ; pub const XK_Hangul_Phieuf : :: std :: os :: raw :: c_uint = 3773 ; pub const XK_Hangul_Hieuh : :: std :: os :: raw :: c_uint = 3774 ; pub const XK_Hangul_A : :: std :: os :: raw :: c_uint = 3775 ; pub const XK_Hangul_AE : :: std :: os :: raw :: c_uint = 3776 ; pub const XK_Hangul_YA : :: std :: os :: raw :: c_uint = 3777 ; pub const XK_Hangul_YAE : :: std :: os :: raw :: c_uint = 3778 ; pub const XK_Hangul_EO : :: std :: os :: raw :: c_uint = 3779 ; pub const XK_Hangul_E : :: std :: os :: raw :: c_uint = 3780 ; pub const XK_Hangul_YEO : :: std :: os :: raw :: c_uint = 3781 ; pub const XK_Hangul_YE : :: std :: os :: raw :: c_uint = 3782 ; pub const XK_Hangul_O : :: std :: os :: raw :: c_uint = 3783 ; pub const XK_Hangul_WA : :: std :: os :: raw :: c_uint = 3784 ; pub const XK_Hangul_WAE : :: std :: os :: raw :: c_uint = 3785 ; pub const XK_Hangul_OE : :: std :: os :: raw :: c_uint = 3786 ; pub const XK_Hangul_YO : :: std :: os :: raw :: c_uint = 3787 ; pub const XK_Hangul_U : :: std :: os :: raw :: c_uint = 3788 ; pub const XK_Hangul_WEO : :: std :: os :: raw :: c_uint = 3789 ; pub const XK_Hangul_WE : :: std :: os :: raw :: c_uint = 3790 ; pub const XK_Hangul_WI : :: std :: os :: raw :: c_uint = 3791 ; pub const XK_Hangul_YU : :: std :: os :: raw :: c_uint = 3792 ; pub const XK_Hangul_EU : :: std :: os :: raw :: c_uint = 3793 ; pub const XK_Hangul_YI : :: std :: os :: raw :: c_uint = 3794 ; pub const XK_Hangul_I : :: std :: os :: raw :: c_uint = 3795 ; pub const XK_Hangul_J_Kiyeog : :: std :: os :: raw :: c_uint = 3796 ; pub const XK_Hangul_J_SsangKiyeog : :: std :: os :: raw :: c_uint = 3797 ; pub const XK_Hangul_J_KiyeogSios : :: std :: os :: raw :: c_uint = 3798 ; pub const XK_Hangul_J_Nieun : :: std :: os :: raw :: c_uint = 3799 ; pub const XK_Hangul_J_NieunJieuj : :: std :: os :: raw :: c_uint = 3800 ; pub const XK_Hangul_J_NieunHieuh : :: std :: os :: raw :: c_uint = 3801 ; pub const XK_Hangul_J_Dikeud : :: std :: os :: raw :: c_uint = 3802 ; pub const XK_Hangul_J_Rieul : :: std :: os :: raw :: c_uint = 3803 ; pub const XK_Hangul_J_RieulKiyeog : :: std :: os :: raw :: c_uint = 3804 ; pub const XK_Hangul_J_RieulMieum : :: std :: os :: raw :: c_uint = 3805 ; pub const XK_Hangul_J_RieulPieub : :: std :: os :: raw :: c_uint = 3806 ; pub const XK_Hangul_J_RieulSios : :: std :: os :: raw :: c_uint = 3807 ; pub const XK_Hangul_J_RieulTieut : :: std :: os :: raw :: c_uint = 3808 ; pub const XK_Hangul_J_RieulPhieuf : :: std :: os :: raw :: c_uint = 3809 ; pub const XK_Hangul_J_RieulHieuh : :: std :: os :: raw :: c_uint = 3810 ; pub const XK_Hangul_J_Mieum : :: std :: os :: raw :: c_uint = 3811 ; pub const XK_Hangul_J_Pieub : :: std :: os :: raw :: c_uint = 3812 ; pub const XK_Hangul_J_PieubSios : :: std :: os :: raw :: c_uint = 3813 ; pub const XK_Hangul_J_Sios : :: std :: os :: raw :: c_uint = 3814 ; pub const XK_Hangul_J_SsangSios : :: std :: os :: raw :: c_uint = 3815 ; pub const XK_Hangul_J_Ieung : :: std :: os :: raw :: c_uint = 3816 ; pub const XK_Hangul_J_Jieuj : :: std :: os :: raw :: c_uint = 3817 ; pub const XK_Hangul_J_Cieuc : :: std :: os :: raw :: c_uint = 3818 ; pub const XK_Hangul_J_Khieuq : :: std :: os :: raw :: c_uint = 3819 ; pub const XK_Hangul_J_Tieut : :: std :: os :: raw :: c_uint = 3820 ; pub const XK_Hangul_J_Phieuf : :: std :: os :: raw :: c_uint = 3821 ; pub const XK_Hangul_J_Hieuh : :: std :: os :: raw :: c_uint = 3822 ; pub const XK_Hangul_RieulYeorinHieuh : :: std :: os :: raw :: c_uint = 3823 ; pub const XK_Hangul_SunkyeongeumMieum : :: std :: os :: raw :: c_uint = 3824 ; pub const XK_Hangul_SunkyeongeumPieub : :: std :: os :: raw :: c_uint = 3825 ; pub const XK_Hangul_PanSios : :: std :: os :: raw :: c_uint = 3826 ; pub const XK_Hangul_KkogjiDalrinIeung : :: std :: os :: raw :: c_uint = 3827 ; pub const XK_Hangul_SunkyeongeumPhieuf : :: std :: os :: raw :: c_uint = 3828 ; pub const XK_Hangul_YeorinHieuh : :: std :: os :: raw :: c_uint = 3829 ; pub const XK_Hangul_AraeA : :: std :: os :: raw :: c_uint = 3830 ; pub const XK_Hangul_AraeAE : :: std :: os :: raw :: c_uint = 3831 ; pub const XK_Hangul_J_PanSios : :: std :: os :: raw :: c_uint = 3832 ; pub const XK_Hangul_J_KkogjiDalrinIeung : :: std :: os :: raw :: c_uint = 3833 ; pub const XK_Hangul_J_YeorinHieuh : :: std :: os :: raw :: c_uint = 3834 ; pub const XK_Korean_Won : :: std :: os :: raw :: c_uint = 3839 ; pub const XK_Armenian_ligature_ew : :: std :: os :: raw :: c_uint = 16778631 ; pub const XK_Armenian_full_stop : :: std :: os :: raw :: c_uint = 16778633 ; pub const XK_Armenian_verjaket : :: std :: os :: raw :: c_uint = 16778633 ; pub const XK_Armenian_separation_mark : :: std :: os :: raw :: c_uint = 16778589 ; pub const XK_Armenian_but : :: std :: os :: raw :: c_uint = 16778589 ; pub const XK_Armenian_hyphen : :: std :: os :: raw :: c_uint = 16778634 ; pub const XK_Armenian_yentamna : :: std :: os :: raw :: c_uint = 16778634 ; pub const XK_Armenian_exclam : :: std :: os :: raw :: c_uint = 16778588 ; pub const XK_Armenian_amanak : :: std :: os :: raw :: c_uint = 16778588 ; pub const XK_Armenian_accent : :: std :: os :: raw :: c_uint = 16778587 ; pub const XK_Armenian_shesht : :: std :: os :: raw :: c_uint = 16778587 ; pub const XK_Armenian_question : :: std :: os :: raw :: c_uint = 16778590 ; pub const XK_Armenian_paruyk : :: std :: os :: raw :: c_uint = 16778590 ; pub const XK_Armenian_AYB : :: std :: os :: raw :: c_uint = 16778545 ; pub const XK_Armenian_ayb : :: std :: os :: raw :: c_uint = 16778593 ; pub const XK_Armenian_BEN : :: std :: os :: raw :: c_uint = 16778546 ; pub const XK_Armenian_ben : :: std :: os :: raw :: c_uint = 16778594 ; pub const XK_Armenian_GIM : :: std :: os :: raw :: c_uint = 16778547 ; pub const XK_Armenian_gim : :: std :: os :: raw :: c_uint = 16778595 ; pub const XK_Armenian_DA : :: std :: os :: raw :: c_uint = 16778548 ; pub const XK_Armenian_da : :: std :: os :: raw :: c_uint = 16778596 ; pub const XK_Armenian_YECH : :: std :: os :: raw :: c_uint = 16778549 ; pub const XK_Armenian_yech : :: std :: os :: raw :: c_uint = 16778597 ; pub const XK_Armenian_ZA : :: std :: os :: raw :: c_uint = 16778550 ; pub const XK_Armenian_za : :: std :: os :: raw :: c_uint = 16778598 ; pub const XK_Armenian_E : :: std :: os :: raw :: c_uint = 16778551 ; pub const XK_Armenian_e : :: std :: os :: raw :: c_uint = 16778599 ; pub const XK_Armenian_AT : :: std :: os :: raw :: c_uint = 16778552 ; pub const XK_Armenian_at : :: std :: os :: raw :: c_uint = 16778600 ; pub const XK_Armenian_TO : :: std :: os :: raw :: c_uint = 16778553 ; pub const XK_Armenian_to : :: std :: os :: raw :: c_uint = 16778601 ; pub const XK_Armenian_ZHE : :: std :: os :: raw :: c_uint = 16778554 ; pub const XK_Armenian_zhe : :: std :: os :: raw :: c_uint = 16778602 ; pub const XK_Armenian_INI : :: std :: os :: raw :: c_uint = 16778555 ; pub const XK_Armenian_ini : :: std :: os :: raw :: c_uint = 16778603 ; pub const XK_Armenian_LYUN : :: std :: os :: raw :: c_uint = 16778556 ; pub const XK_Armenian_lyun : :: std :: os :: raw :: c_uint = 16778604 ; pub const XK_Armenian_KHE : :: std :: os :: raw :: c_uint = 16778557 ; pub const XK_Armenian_khe : :: std :: os :: raw :: c_uint = 16778605 ; pub const XK_Armenian_TSA : :: std :: os :: raw :: c_uint = 16778558 ; pub const XK_Armenian_tsa : :: std :: os :: raw :: c_uint = 16778606 ; pub const XK_Armenian_KEN : :: std :: os :: raw :: c_uint = 16778559 ; pub const XK_Armenian_ken : :: std :: os :: raw :: c_uint = 16778607 ; pub const XK_Armenian_HO : :: std :: os :: raw :: c_uint = 16778560 ; pub const XK_Armenian_ho : :: std :: os :: raw :: c_uint = 16778608 ; pub const XK_Armenian_DZA : :: std :: os :: raw :: c_uint = 16778561 ; pub const XK_Armenian_dza : :: std :: os :: raw :: c_uint = 16778609 ; pub const XK_Armenian_GHAT : :: std :: os :: raw :: c_uint = 16778562 ; pub const XK_Armenian_ghat : :: std :: os :: raw :: c_uint = 16778610 ; pub const XK_Armenian_TCHE : :: std :: os :: raw :: c_uint = 16778563 ; pub const XK_Armenian_tche : :: std :: os :: raw :: c_uint = 16778611 ; pub const XK_Armenian_MEN : :: std :: os :: raw :: c_uint = 16778564 ; pub const XK_Armenian_men : :: std :: os :: raw :: c_uint = 16778612 ; pub const XK_Armenian_HI : :: std :: os :: raw :: c_uint = 16778565 ; pub const XK_Armenian_hi : :: std :: os :: raw :: c_uint = 16778613 ; pub const XK_Armenian_NU : :: std :: os :: raw :: c_uint = 16778566 ; pub const XK_Armenian_nu : :: std :: os :: raw :: c_uint = 16778614 ; pub const XK_Armenian_SHA : :: std :: os :: raw :: c_uint = 16778567 ; pub const XK_Armenian_sha : :: std :: os :: raw :: c_uint = 16778615 ; pub const XK_Armenian_VO : :: std :: os :: raw :: c_uint = 16778568 ; pub const XK_Armenian_vo : :: std :: os :: raw :: c_uint = 16778616 ; pub const XK_Armenian_CHA : :: std :: os :: raw :: c_uint = 16778569 ; pub const XK_Armenian_cha : :: std :: os :: raw :: c_uint = 16778617 ; pub const XK_Armenian_PE : :: std :: os :: raw :: c_uint = 16778570 ; pub const XK_Armenian_pe : :: std :: os :: raw :: c_uint = 16778618 ; pub const XK_Armenian_JE : :: std :: os :: raw :: c_uint = 16778571 ; pub const XK_Armenian_je : :: std :: os :: raw :: c_uint = 16778619 ; pub const XK_Armenian_RA : :: std :: os :: raw :: c_uint = 16778572 ; pub const XK_Armenian_ra : :: std :: os :: raw :: c_uint = 16778620 ; pub const XK_Armenian_SE : :: std :: os :: raw :: c_uint = 16778573 ; pub const XK_Armenian_se : :: std :: os :: raw :: c_uint = 16778621 ; pub const XK_Armenian_VEV : :: std :: os :: raw :: c_uint = 16778574 ; pub const XK_Armenian_vev : :: std :: os :: raw :: c_uint = 16778622 ; pub const XK_Armenian_TYUN : :: std :: os :: raw :: c_uint = 16778575 ; pub const XK_Armenian_tyun : :: std :: os :: raw :: c_uint = 16778623 ; pub const XK_Armenian_RE : :: std :: os :: raw :: c_uint = 16778576 ; pub const XK_Armenian_re : :: std :: os :: raw :: c_uint = 16778624 ; pub const XK_Armenian_TSO : :: std :: os :: raw :: c_uint = 16778577 ; pub const XK_Armenian_tso : :: std :: os :: raw :: c_uint = 16778625 ; pub const XK_Armenian_VYUN : :: std :: os :: raw :: c_uint = 16778578 ; pub const XK_Armenian_vyun : :: std :: os :: raw :: c_uint = 16778626 ; pub const XK_Armenian_PYUR : :: std :: os :: raw :: c_uint = 16778579 ; pub const XK_Armenian_pyur : :: std :: os :: raw :: c_uint = 16778627 ; pub const XK_Armenian_KE : :: std :: os :: raw :: c_uint = 16778580 ; pub const XK_Armenian_ke : :: std :: os :: raw :: c_uint = 16778628 ; pub const XK_Armenian_O : :: std :: os :: raw :: c_uint = 16778581 ; pub const XK_Armenian_o : :: std :: os :: raw :: c_uint = 16778629 ; pub const XK_Armenian_FE : :: std :: os :: raw :: c_uint = 16778582 ; pub const XK_Armenian_fe : :: std :: os :: raw :: c_uint = 16778630 ; pub const XK_Armenian_apostrophe : :: std :: os :: raw :: c_uint = 16778586 ; pub const XK_Georgian_an : :: std :: os :: raw :: c_uint = 16781520 ; pub const XK_Georgian_ban : :: std :: os :: raw :: c_uint = 16781521 ; pub const XK_Georgian_gan : :: std :: os :: raw :: c_uint = 16781522 ; pub const XK_Georgian_don : :: std :: os :: raw :: c_uint = 16781523 ; pub const XK_Georgian_en : :: std :: os :: raw :: c_uint = 16781524 ; pub const XK_Georgian_vin : :: std :: os :: raw :: c_uint = 16781525 ; pub const XK_Georgian_zen : :: std :: os :: raw :: c_uint = 16781526 ; pub const XK_Georgian_tan : :: std :: os :: raw :: c_uint = 16781527 ; pub const XK_Georgian_in : :: std :: os :: raw :: c_uint = 16781528 ; pub const XK_Georgian_kan : :: std :: os :: raw :: c_uint = 16781529 ; pub const XK_Georgian_las : :: std :: os :: raw :: c_uint = 16781530 ; pub const XK_Georgian_man : :: std :: os :: raw :: c_uint = 16781531 ; pub const XK_Georgian_nar : :: std :: os :: raw :: c_uint = 16781532 ; pub const XK_Georgian_on : :: std :: os :: raw :: c_uint = 16781533 ; pub const XK_Georgian_par : :: std :: os :: raw :: c_uint = 16781534 ; pub const XK_Georgian_zhar : :: std :: os :: raw :: c_uint = 16781535 ; pub const XK_Georgian_rae : :: std :: os :: raw :: c_uint = 16781536 ; pub const XK_Georgian_san : :: std :: os :: raw :: c_uint = 16781537 ; pub const XK_Georgian_tar : :: std :: os :: raw :: c_uint = 16781538 ; pub const XK_Georgian_un : :: std :: os :: raw :: c_uint = 16781539 ; pub const XK_Georgian_phar : :: std :: os :: raw :: c_uint = 16781540 ; pub const XK_Georgian_khar : :: std :: os :: raw :: c_uint = 16781541 ; pub const XK_Georgian_ghan : :: std :: os :: raw :: c_uint = 16781542 ; pub const XK_Georgian_qar : :: std :: os :: raw :: c_uint = 16781543 ; pub const XK_Georgian_shin : :: std :: os :: raw :: c_uint = 16781544 ; pub const XK_Georgian_chin : :: std :: os :: raw :: c_uint = 16781545 ; pub const XK_Georgian_can : :: std :: os :: raw :: c_uint = 16781546 ; pub const XK_Georgian_jil : :: std :: os :: raw :: c_uint = 16781547 ; pub const XK_Georgian_cil : :: std :: os :: raw :: c_uint = 16781548 ; pub const XK_Georgian_char : :: std :: os :: raw :: c_uint = 16781549 ; pub const XK_Georgian_xan : :: std :: os :: raw :: c_uint = 16781550 ; pub const XK_Georgian_jhan : :: std :: os :: raw :: c_uint = 16781551 ; pub const XK_Georgian_hae : :: std :: os :: raw :: c_uint = 16781552 ; pub const XK_Georgian_he : :: std :: os :: raw :: c_uint = 16781553 ; pub const XK_Georgian_hie : :: std :: os :: raw :: c_uint = 16781554 ; pub const XK_Georgian_we : :: std :: os :: raw :: c_uint = 16781555 ; pub const XK_Georgian_har : :: std :: os :: raw :: c_uint = 16781556 ; pub const XK_Georgian_hoe : :: std :: os :: raw :: c_uint = 16781557 ; pub const XK_Georgian_fi : :: std :: os :: raw :: c_uint = 16781558 ; pub const XK_Xabovedot : :: std :: os :: raw :: c_uint = 16785034 ; pub const XK_Ibreve : :: std :: os :: raw :: c_uint = 16777516 ; pub const XK_Zstroke : :: std :: os :: raw :: c_uint = 16777653 ; pub const XK_Gcaron : :: std :: os :: raw :: c_uint = 16777702 ; pub const XK_Ocaron : :: std :: os :: raw :: c_uint = 16777681 ; pub const XK_Obarred : :: std :: os :: raw :: c_uint = 16777631 ; pub const XK_xabovedot : :: std :: os :: raw :: c_uint = 16785035 ; pub const XK_ibreve : :: std :: os :: raw :: c_uint = 16777517 ; pub const XK_zstroke : :: std :: os :: raw :: c_uint = 16777654 ; pub const XK_gcaron : :: std :: os :: raw :: c_uint = 16777703 ; pub const XK_ocaron : :: std :: os :: raw :: c_uint = 16777682 ; pub const XK_obarred : :: std :: os :: raw :: c_uint = 16777845 ; pub const XK_SCHWA : :: std :: os :: raw :: c_uint = 16777615 ; pub const XK_schwa : :: std :: os :: raw :: c_uint = 16777817 ; pub const XK_EZH : :: std :: os :: raw :: c_uint = 16777655 ; pub const XK_ezh : :: std :: os :: raw :: c_uint = 16777874 ; pub const XK_Lbelowdot : :: std :: os :: raw :: c_uint = 16784950 ; pub const XK_lbelowdot : :: std :: os :: raw :: c_uint = 16784951 ; pub const XK_Abelowdot : :: std :: os :: raw :: c_uint = 16785056 ; pub const XK_abelowdot : :: std :: os :: raw :: c_uint = 16785057 ; pub const XK_Ahook : :: std :: os :: raw :: c_uint = 16785058 ; pub const XK_ahook : :: std :: os :: raw :: c_uint = 16785059 ; pub const XK_Acircumflexacute : :: std :: os :: raw :: c_uint = 16785060 ; pub const XK_acircumflexacute : :: std :: os :: raw :: c_uint = 16785061 ; pub const XK_Acircumflexgrave : :: std :: os :: raw :: c_uint = 16785062 ; pub const XK_acircumflexgrave : :: std :: os :: raw :: c_uint = 16785063 ; pub const XK_Acircumflexhook : :: std :: os :: raw :: c_uint = 16785064 ; pub const XK_acircumflexhook : :: std :: os :: raw :: c_uint = 16785065 ; pub const XK_Acircumflextilde : :: std :: os :: raw :: c_uint = 16785066 ; pub const XK_acircumflextilde : :: std :: os :: raw :: c_uint = 16785067 ; pub const XK_Acircumflexbelowdot : :: std :: os :: raw :: c_uint = 16785068 ; pub const XK_acircumflexbelowdot : :: std :: os :: raw :: c_uint = 16785069 ; pub const XK_Abreveacute : :: std :: os :: raw :: c_uint = 16785070 ; pub const XK_abreveacute : :: std :: os :: raw :: c_uint = 16785071 ; pub const XK_Abrevegrave : :: std :: os :: raw :: c_uint = 16785072 ; pub const XK_abrevegrave : :: std :: os :: raw :: c_uint = 16785073 ; pub const XK_Abrevehook : :: std :: os :: raw :: c_uint = 16785074 ; pub const XK_abrevehook : :: std :: os :: raw :: c_uint = 16785075 ; pub const XK_Abrevetilde : :: std :: os :: raw :: c_uint = 16785076 ; pub const XK_abrevetilde : :: std :: os :: raw :: c_uint = 16785077 ; pub const XK_Abrevebelowdot : :: std :: os :: raw :: c_uint = 16785078 ; pub const XK_abrevebelowdot : :: std :: os :: raw :: c_uint = 16785079 ; pub const XK_Ebelowdot : :: std :: os :: raw :: c_uint = 16785080 ; pub const XK_ebelowdot : :: std :: os :: raw :: c_uint = 16785081 ; pub const XK_Ehook : :: std :: os :: raw :: c_uint = 16785082 ; pub const XK_ehook : :: std :: os :: raw :: c_uint = 16785083 ; pub const XK_Etilde : :: std :: os :: raw :: c_uint = 16785084 ; pub const XK_etilde : :: std :: os :: raw :: c_uint = 16785085 ; pub const XK_Ecircumflexacute : :: std :: os :: raw :: c_uint = 16785086 ; pub const XK_ecircumflexacute : :: std :: os :: raw :: c_uint = 16785087 ; pub const XK_Ecircumflexgrave : :: std :: os :: raw :: c_uint = 16785088 ; pub const XK_ecircumflexgrave : :: std :: os :: raw :: c_uint = 16785089 ; pub const XK_Ecircumflexhook : :: std :: os :: raw :: c_uint = 16785090 ; pub const XK_ecircumflexhook : :: std :: os :: raw :: c_uint = 16785091 ; pub const XK_Ecircumflextilde : :: std :: os :: raw :: c_uint = 16785092 ; pub const XK_ecircumflextilde : :: std :: os :: raw :: c_uint = 16785093 ; pub const XK_Ecircumflexbelowdot : :: std :: os :: raw :: c_uint = 16785094 ; pub const XK_ecircumflexbelowdot : :: std :: os :: raw :: c_uint = 16785095 ; pub const XK_Ihook : :: std :: os :: raw :: c_uint = 16785096 ; pub const XK_ihook : :: std :: os :: raw :: c_uint = 16785097 ; pub const XK_Ibelowdot : :: std :: os :: raw :: c_uint = 16785098 ; pub const XK_ibelowdot : :: std :: os :: raw :: c_uint = 16785099 ; pub const XK_Obelowdot : :: std :: os :: raw :: c_uint = 16785100 ; pub const XK_obelowdot : :: std :: os :: raw :: c_uint = 16785101 ; pub const XK_Ohook : :: std :: os :: raw :: c_uint = 16785102 ; pub const XK_ohook : :: std :: os :: raw :: c_uint = 16785103 ; pub const XK_Ocircumflexacute : :: std :: os :: raw :: c_uint = 16785104 ; pub const XK_ocircumflexacute : :: std :: os :: raw :: c_uint = 16785105 ; pub const XK_Ocircumflexgrave : :: std :: os :: raw :: c_uint = 16785106 ; pub const XK_ocircumflexgrave : :: std :: os :: raw :: c_uint = 16785107 ; pub const XK_Ocircumflexhook : :: std :: os :: raw :: c_uint = 16785108 ; pub const XK_ocircumflexhook : :: std :: os :: raw :: c_uint = 16785109 ; pub const XK_Ocircumflextilde : :: std :: os :: raw :: c_uint = 16785110 ; pub const XK_ocircumflextilde : :: std :: os :: raw :: c_uint = 16785111 ; pub const XK_Ocircumflexbelowdot : :: std :: os :: raw :: c_uint = 16785112 ; pub const XK_ocircumflexbelowdot : :: std :: os :: raw :: c_uint = 16785113 ; pub const XK_Ohornacute : :: std :: os :: raw :: c_uint = 16785114 ; pub const XK_ohornacute : :: std :: os :: raw :: c_uint = 16785115 ; pub const XK_Ohorngrave : :: std :: os :: raw :: c_uint = 16785116 ; pub const XK_ohorngrave : :: std :: os :: raw :: c_uint = 16785117 ; pub const XK_Ohornhook : :: std :: os :: raw :: c_uint = 16785118 ; pub const XK_ohornhook : :: std :: os :: raw :: c_uint = 16785119 ; pub const XK_Ohorntilde : :: std :: os :: raw :: c_uint = 16785120 ; pub const XK_ohorntilde : :: std :: os :: raw :: c_uint = 16785121 ; pub const XK_Ohornbelowdot : :: std :: os :: raw :: c_uint = 16785122 ; pub const XK_ohornbelowdot : :: std :: os :: raw :: c_uint = 16785123 ; pub const XK_Ubelowdot : :: std :: os :: raw :: c_uint = 16785124 ; pub const XK_ubelowdot : :: std :: os :: raw :: c_uint = 16785125 ; pub const XK_Uhook : :: std :: os :: raw :: c_uint = 16785126 ; pub const XK_uhook : :: std :: os :: raw :: c_uint = 16785127 ; pub const XK_Uhornacute : :: std :: os :: raw :: c_uint = 16785128 ; pub const XK_uhornacute : :: std :: os :: raw :: c_uint = 16785129 ; pub const XK_Uhorngrave : :: std :: os :: raw :: c_uint = 16785130 ; pub const XK_uhorngrave : :: std :: os :: raw :: c_uint = 16785131 ; pub const XK_Uhornhook : :: std :: os :: raw :: c_uint = 16785132 ; pub const XK_uhornhook : :: std :: os :: raw :: c_uint = 16785133 ; pub const XK_Uhorntilde : :: std :: os :: raw :: c_uint = 16785134 ; pub const XK_uhorntilde : :: std :: os :: raw :: c_uint = 16785135 ; pub const XK_Uhornbelowdot : :: std :: os :: raw :: c_uint = 16785136 ; pub const XK_uhornbelowdot : :: std :: os :: raw :: c_uint = 16785137 ; pub const XK_Ybelowdot : :: std :: os :: raw :: c_uint = 16785140 ; pub const XK_ybelowdot : :: std :: os :: raw :: c_uint = 16785141 ; pub const XK_Yhook : :: std :: os :: raw :: c_uint = 16785142 ; pub const XK_yhook : :: std :: os :: raw :: c_uint = 16785143 ; pub const XK_Ytilde : :: std :: os :: raw :: c_uint = 16785144 ; pub const XK_ytilde : :: std :: os :: raw :: c_uint = 16785145 ; pub const XK_Ohorn : :: std :: os :: raw :: c_uint = 16777632 ; pub const XK_ohorn : :: std :: os :: raw :: c_uint = 16777633 ; pub const XK_Uhorn : :: std :: os :: raw :: c_uint = 16777647 ; pub const XK_uhorn : :: std :: os :: raw :: c_uint = 16777648 ; pub const XK_EcuSign : :: std :: os :: raw :: c_uint = 16785568 ; pub const XK_ColonSign : :: std :: os :: raw :: c_uint = 16785569 ; pub const XK_CruzeiroSign : :: std :: os :: raw :: c_uint = 16785570 ; pub const XK_FFrancSign : :: std :: os :: raw :: c_uint = 16785571 ; pub const XK_LiraSign : :: std :: os :: raw :: c_uint = 16785572 ; pub const XK_MillSign : :: std :: os :: raw :: c_uint = 16785573 ; pub const XK_NairaSign : :: std :: os :: raw :: c_uint = 16785574 ; pub const XK_PesetaSign : :: std :: os :: raw :: c_uint = 16785575 ; pub const XK_RupeeSign : :: std :: os :: raw :: c_uint = 16785576 ; pub const XK_WonSign : :: std :: os :: raw :: c_uint = 16785577 ; pub const XK_NewSheqelSign : :: std :: os :: raw :: c_uint = 16785578 ; pub const XK_DongSign : :: std :: os :: raw :: c_uint = 16785579 ; pub const XK_EuroSign : :: std :: os :: raw :: c_uint = 8364 ; pub const XK_zerosuperior : :: std :: os :: raw :: c_uint = 16785520 ; pub const XK_foursuperior : :: std :: os :: raw :: c_uint = 16785524 ; pub const XK_fivesuperior : :: std :: os :: raw :: c_uint = 16785525 ; pub const XK_sixsuperior : :: std :: os :: raw :: c_uint = 16785526 ; pub const XK_sevensuperior : :: std :: os :: raw :: c_uint = 16785527 ; pub const XK_eightsuperior : :: std :: os :: raw :: c_uint = 16785528 ; pub const XK_ninesuperior : :: std :: os :: raw :: c_uint = 16785529 ; pub const XK_zerosubscript : :: std :: os :: raw :: c_uint = 16785536 ; pub const XK_onesubscript : :: std :: os :: raw :: c_uint = 16785537 ; pub const XK_twosubscript : :: std :: os :: raw :: c_uint = 16785538 ; pub const XK_threesubscript : :: std :: os :: raw :: c_uint = 16785539 ; pub const XK_foursubscript : :: std :: os :: raw :: c_uint = 16785540 ; pub const XK_fivesubscript : :: std :: os :: raw :: c_uint = 16785541 ; pub const XK_sixsubscript : :: std :: os :: raw :: c_uint = 16785542 ; pub const XK_sevensubscript : :: std :: os :: raw :: c_uint = 16785543 ; pub const XK_eightsubscript : :: std :: os :: raw :: c_uint = 16785544 ; pub const XK_ninesubscript : :: std :: os :: raw :: c_uint = 16785545 ; pub const XK_partdifferential : :: std :: os :: raw :: c_uint = 16785922 ; pub const XK_emptyset : :: std :: os :: raw :: c_uint = 16785925 ; pub const XK_elementof : :: std :: os :: raw :: c_uint = 16785928 ; pub const XK_notelementof : :: std :: os :: raw :: c_uint = 16785929 ; pub const XK_containsas : :: std :: os :: raw :: c_uint = 16785931 ; pub const XK_squareroot : :: std :: os :: raw :: c_uint = 16785946 ; pub const XK_cuberoot : :: std :: os :: raw :: c_uint = 16785947 ; pub const XK_fourthroot : :: std :: os :: raw :: c_uint = 16785948 ; pub const XK_dintegral : :: std :: os :: raw :: c_uint = 16785964 ; pub const XK_tintegral : :: std :: os :: raw :: c_uint = 16785965 ; pub const XK_because : :: std :: os :: raw :: c_uint = 16785973 ; pub const XK_approxeq : :: std :: os :: raw :: c_uint = 16785992 ; pub const XK_notapproxeq : :: std :: os :: raw :: c_uint = 16785991 ; pub const XK_notidentical : :: std :: os :: raw :: c_uint = 16786018 ; pub const XK_stricteq : :: std :: os :: raw :: c_uint = 16786019 ; pub const XK_braille_dot_1 : :: std :: os :: raw :: c_uint = 65521 ; pub const XK_braille_dot_2 : :: std :: os :: raw :: c_uint = 65522 ; pub const XK_braille_dot_3 : :: std :: os :: raw :: c_uint = 65523 ; pub const XK_braille_dot_4 : :: std :: os :: raw :: c_uint = 65524 ; pub const XK_braille_dot_5 : :: std :: os :: raw :: c_uint = 65525 ; pub const XK_braille_dot_6 : :: std :: os :: raw :: c_uint = 65526 ; pub const XK_braille_dot_7 : :: std :: os :: raw :: c_uint = 65527 ; pub const XK_braille_dot_8 : :: std :: os :: raw :: c_uint = 65528 ; pub const XK_braille_dot_9 : :: std :: os :: raw :: c_uint = 65529 ; pub const XK_braille_dot_10 : :: std :: os :: raw :: c_uint = 65530 ; pub const XK_braille_blank : :: std :: os :: raw :: c_uint = 16787456 ; pub const XK_braille_dots_1 : :: std :: os :: raw :: c_uint = 16787457 ; pub const XK_braille_dots_2 : :: std :: os :: raw :: c_uint = 16787458 ; pub const XK_braille_dots_12 : :: std :: os :: raw :: c_uint = 16787459 ; pub const XK_braille_dots_3 : :: std :: os :: raw :: c_uint = 16787460 ; pub const XK_braille_dots_13 : :: std :: os :: raw :: c_uint = 16787461 ; pub const XK_braille_dots_23 : :: std :: os :: raw :: c_uint = 16787462 ; pub const XK_braille_dots_123 : :: std :: os :: raw :: c_uint = 16787463 ; pub const XK_braille_dots_4 : :: std :: os :: raw :: c_uint = 16787464 ; pub const XK_braille_dots_14 : :: std :: os :: raw :: c_uint = 16787465 ; pub const XK_braille_dots_24 : :: std :: os :: raw :: c_uint = 16787466 ; pub const XK_braille_dots_124 : :: std :: os :: raw :: c_uint = 16787467 ; pub const XK_braille_dots_34 : :: std :: os :: raw :: c_uint = 16787468 ; pub const XK_braille_dots_134 : :: std :: os :: raw :: c_uint = 16787469 ; pub const XK_braille_dots_234 : :: std :: os :: raw :: c_uint = 16787470 ; pub const XK_braille_dots_1234 : :: std :: os :: raw :: c_uint = 16787471 ; pub const XK_braille_dots_5 : :: std :: os :: raw :: c_uint = 16787472 ; pub const XK_braille_dots_15 : :: std :: os :: raw :: c_uint = 16787473 ; pub const XK_braille_dots_25 : :: std :: os :: raw :: c_uint = 16787474 ; pub const XK_braille_dots_125 : :: std :: os :: raw :: c_uint = 16787475 ; pub const XK_braille_dots_35 : :: std :: os :: raw :: c_uint = 16787476 ; pub const XK_braille_dots_135 : :: std :: os :: raw :: c_uint = 16787477 ; pub const XK_braille_dots_235 : :: std :: os :: raw :: c_uint = 16787478 ; pub const XK_braille_dots_1235 : :: std :: os :: raw :: c_uint = 16787479 ; pub const XK_braille_dots_45 : :: std :: os :: raw :: c_uint = 16787480 ; pub const XK_braille_dots_145 : :: std :: os :: raw :: c_uint = 16787481 ; pub const XK_braille_dots_245 : :: std :: os :: raw :: c_uint = 16787482 ; pub const XK_braille_dots_1245 : :: std :: os :: raw :: c_uint = 16787483 ; pub const XK_braille_dots_345 : :: std :: os :: raw :: c_uint = 16787484 ; pub const XK_braille_dots_1345 : :: std :: os :: raw :: c_uint = 16787485 ; pub const XK_braille_dots_2345 : :: std :: os :: raw :: c_uint = 16787486 ; pub const XK_braille_dots_12345 : :: std :: os :: raw :: c_uint = 16787487 ; pub const XK_braille_dots_6 : :: std :: os :: raw :: c_uint = 16787488 ; pub const XK_braille_dots_16 : :: std :: os :: raw :: c_uint = 16787489 ; pub const XK_braille_dots_26 : :: std :: os :: raw :: c_uint = 16787490 ; pub const XK_braille_dots_126 : :: std :: os :: raw :: c_uint = 16787491 ; pub const XK_braille_dots_36 : :: std :: os :: raw :: c_uint = 16787492 ; pub const XK_braille_dots_136 : :: std :: os :: raw :: c_uint = 16787493 ; pub const XK_braille_dots_236 : :: std :: os :: raw :: c_uint = 16787494 ; pub const XK_braille_dots_1236 : :: std :: os :: raw :: c_uint = 16787495 ; pub const XK_braille_dots_46 : :: std :: os :: raw :: c_uint = 16787496 ; pub const XK_braille_dots_146 : :: std :: os :: raw :: c_uint = 16787497 ; pub const XK_braille_dots_246 : :: std :: os :: raw :: c_uint = 16787498 ; pub const XK_braille_dots_1246 : :: std :: os :: raw :: c_uint = 16787499 ; pub const XK_braille_dots_346 : :: std :: os :: raw :: c_uint = 16787500 ; pub const XK_braille_dots_1346 : :: std :: os :: raw :: c_uint = 16787501 ; pub const XK_braille_dots_2346 : :: std :: os :: raw :: c_uint = 16787502 ; pub const XK_braille_dots_12346 : :: std :: os :: raw :: c_uint = 16787503 ; pub const XK_braille_dots_56 : :: std :: os :: raw :: c_uint = 16787504 ; pub const XK_braille_dots_156 : :: std :: os :: raw :: c_uint = 16787505 ; pub const XK_braille_dots_256 : :: std :: os :: raw :: c_uint = 16787506 ; pub const XK_braille_dots_1256 : :: std :: os :: raw :: c_uint = 16787507 ; pub const XK_braille_dots_356 : :: std :: os :: raw :: c_uint = 16787508 ; pub const XK_braille_dots_1356 : :: std :: os :: raw :: c_uint = 16787509 ; pub const XK_braille_dots_2356 : :: std :: os :: raw :: c_uint = 16787510 ; pub const XK_braille_dots_12356 : :: std :: os :: raw :: c_uint = 16787511 ; pub const XK_braille_dots_456 : :: std :: os :: raw :: c_uint = 16787512 ; pub const XK_braille_dots_1456 : :: std :: os :: raw :: c_uint = 16787513 ; pub const XK_braille_dots_2456 : :: std :: os :: raw :: c_uint = 16787514 ; pub const XK_braille_dots_12456 : :: std :: os :: raw :: c_uint = 16787515 ; pub const XK_braille_dots_3456 : :: std :: os :: raw :: c_uint = 16787516 ; pub const XK_braille_dots_13456 : :: std :: os :: raw :: c_uint = 16787517 ; pub const XK_braille_dots_23456 : :: std :: os :: raw :: c_uint = 16787518 ; pub const XK_braille_dots_123456 : :: std :: os :: raw :: c_uint = 16787519 ; pub const XK_braille_dots_7 : :: std :: os :: raw :: c_uint = 16787520 ; pub const XK_braille_dots_17 : :: std :: os :: raw :: c_uint = 16787521 ; pub const XK_braille_dots_27 : :: std :: os :: raw :: c_uint = 16787522 ; pub const XK_braille_dots_127 : :: std :: os :: raw :: c_uint = 16787523 ; pub const XK_braille_dots_37 : :: std :: os :: raw :: c_uint = 16787524 ; pub const XK_braille_dots_137 : :: std :: os :: raw :: c_uint = 16787525 ; pub const XK_braille_dots_237 : :: std :: os :: raw :: c_uint = 16787526 ; pub const XK_braille_dots_1237 : :: std :: os :: raw :: c_uint = 16787527 ; pub const XK_braille_dots_47 : :: std :: os :: raw :: c_uint = 16787528 ; pub const XK_braille_dots_147 : :: std :: os :: raw :: c_uint = 16787529 ; pub const XK_braille_dots_247 : :: std :: os :: raw :: c_uint = 16787530 ; pub const XK_braille_dots_1247 : :: std :: os :: raw :: c_uint = 16787531 ; pub const XK_braille_dots_347 : :: std :: os :: raw :: c_uint = 16787532 ; pub const XK_braille_dots_1347 : :: std :: os :: raw :: c_uint = 16787533 ; pub const XK_braille_dots_2347 : :: std :: os :: raw :: c_uint = 16787534 ; pub const XK_braille_dots_12347 : :: std :: os :: raw :: c_uint = 16787535 ; pub const XK_braille_dots_57 : :: std :: os :: raw :: c_uint = 16787536 ; pub const XK_braille_dots_157 : :: std :: os :: raw :: c_uint = 16787537 ; pub const XK_braille_dots_257 : :: std :: os :: raw :: c_uint = 16787538 ; pub const XK_braille_dots_1257 : :: std :: os :: raw :: c_uint = 16787539 ; pub const XK_braille_dots_357 : :: std :: os :: raw :: c_uint = 16787540 ; pub const XK_braille_dots_1357 : :: std :: os :: raw :: c_uint = 16787541 ; pub const XK_braille_dots_2357 : :: std :: os :: raw :: c_uint = 16787542 ; pub const XK_braille_dots_12357 : :: std :: os :: raw :: c_uint = 16787543 ; pub const XK_braille_dots_457 : :: std :: os :: raw :: c_uint = 16787544 ; pub const XK_braille_dots_1457 : :: std :: os :: raw :: c_uint = 16787545 ; pub const XK_braille_dots_2457 : :: std :: os :: raw :: c_uint = 16787546 ; pub const XK_braille_dots_12457 : :: std :: os :: raw :: c_uint = 16787547 ; pub const XK_braille_dots_3457 : :: std :: os :: raw :: c_uint = 16787548 ; pub const XK_braille_dots_13457 : :: std :: os :: raw :: c_uint = 16787549 ; pub const XK_braille_dots_23457 : :: std :: os :: raw :: c_uint = 16787550 ; pub const XK_braille_dots_123457 : :: std :: os :: raw :: c_uint = 16787551 ; pub const XK_braille_dots_67 : :: std :: os :: raw :: c_uint = 16787552 ; pub const XK_braille_dots_167 : :: std :: os :: raw :: c_uint = 16787553 ; pub const XK_braille_dots_267 : :: std :: os :: raw :: c_uint = 16787554 ; pub const XK_braille_dots_1267 : :: std :: os :: raw :: c_uint = 16787555 ; pub const XK_braille_dots_367 : :: std :: os :: raw :: c_uint = 16787556 ; pub const XK_braille_dots_1367 : :: std :: os :: raw :: c_uint = 16787557 ; pub const XK_braille_dots_2367 : :: std :: os :: raw :: c_uint = 16787558 ; pub const XK_braille_dots_12367 : :: std :: os :: raw :: c_uint = 16787559 ; pub const XK_braille_dots_467 : :: std :: os :: raw :: c_uint = 16787560 ; pub const XK_braille_dots_1467 : :: std :: os :: raw :: c_uint = 16787561 ; pub const XK_braille_dots_2467 : :: std :: os :: raw :: c_uint = 16787562 ; pub const XK_braille_dots_12467 : :: std :: os :: raw :: c_uint = 16787563 ; pub const XK_braille_dots_3467 : :: std :: os :: raw :: c_uint = 16787564 ; pub const XK_braille_dots_13467 : :: std :: os :: raw :: c_uint = 16787565 ; pub const XK_braille_dots_23467 : :: std :: os :: raw :: c_uint = 16787566 ; pub const XK_braille_dots_123467 : :: std :: os :: raw :: c_uint = 16787567 ; pub const XK_braille_dots_567 : :: std :: os :: raw :: c_uint = 16787568 ; pub const XK_braille_dots_1567 : :: std :: os :: raw :: c_uint = 16787569 ; pub const XK_braille_dots_2567 : :: std :: os :: raw :: c_uint = 16787570 ; pub const XK_braille_dots_12567 : :: std :: os :: raw :: c_uint = 16787571 ; pub const XK_braille_dots_3567 : :: std :: os :: raw :: c_uint = 16787572 ; pub const XK_braille_dots_13567 : :: std :: os :: raw :: c_uint = 16787573 ; pub const XK_braille_dots_23567 : :: std :: os :: raw :: c_uint = 16787574 ; pub const XK_braille_dots_123567 : :: std :: os :: raw :: c_uint = 16787575 ; pub const XK_braille_dots_4567 : :: std :: os :: raw :: c_uint = 16787576 ; pub const XK_braille_dots_14567 : :: std :: os :: raw :: c_uint = 16787577 ; pub const XK_braille_dots_24567 : :: std :: os :: raw :: c_uint = 16787578 ; pub const XK_braille_dots_124567 : :: std :: os :: raw :: c_uint = 16787579 ; pub const XK_braille_dots_34567 : :: std :: os :: raw :: c_uint = 16787580 ; pub const XK_braille_dots_134567 : :: std :: os :: raw :: c_uint = 16787581 ; pub const XK_braille_dots_234567 : :: std :: os :: raw :: c_uint = 16787582 ; pub const XK_braille_dots_1234567 : :: std :: os :: raw :: c_uint = 16787583 ; pub const XK_braille_dots_8 : :: std :: os :: raw :: c_uint = 16787584 ; pub const XK_braille_dots_18 : :: std :: os :: raw :: c_uint = 16787585 ; pub const XK_braille_dots_28 : :: std :: os :: raw :: c_uint = 16787586 ; pub const XK_braille_dots_128 : :: std :: os :: raw :: c_uint = 16787587 ; pub const XK_braille_dots_38 : :: std :: os :: raw :: c_uint = 16787588 ; pub const XK_braille_dots_138 : :: std :: os :: raw :: c_uint = 16787589 ; pub const XK_braille_dots_238 : :: std :: os :: raw :: c_uint = 16787590 ; pub const XK_braille_dots_1238 : :: std :: os :: raw :: c_uint = 16787591 ; pub const XK_braille_dots_48 : :: std :: os :: raw :: c_uint = 16787592 ; pub const XK_braille_dots_148 : :: std :: os :: raw :: c_uint = 16787593 ; pub const XK_braille_dots_248 : :: std :: os :: raw :: c_uint = 16787594 ; pub const XK_braille_dots_1248 : :: std :: os :: raw :: c_uint = 16787595 ; pub const XK_braille_dots_348 : :: std :: os :: raw :: c_uint = 16787596 ; pub const XK_braille_dots_1348 : :: std :: os :: raw :: c_uint = 16787597 ; pub const XK_braille_dots_2348 : :: std :: os :: raw :: c_uint = 16787598 ; pub const XK_braille_dots_12348 : :: std :: os :: raw :: c_uint = 16787599 ; pub const XK_braille_dots_58 : :: std :: os :: raw :: c_uint = 16787600 ; pub const XK_braille_dots_158 : :: std :: os :: raw :: c_uint = 16787601 ; pub const XK_braille_dots_258 : :: std :: os :: raw :: c_uint = 16787602 ; pub const XK_braille_dots_1258 : :: std :: os :: raw :: c_uint = 16787603 ; pub const XK_braille_dots_358 : :: std :: os :: raw :: c_uint = 16787604 ; pub const XK_braille_dots_1358 : :: std :: os :: raw :: c_uint = 16787605 ; pub const XK_braille_dots_2358 : :: std :: os :: raw :: c_uint = 16787606 ; pub const XK_braille_dots_12358 : :: std :: os :: raw :: c_uint = 16787607 ; pub const XK_braille_dots_458 : :: std :: os :: raw :: c_uint = 16787608 ; pub const XK_braille_dots_1458 : :: std :: os :: raw :: c_uint = 16787609 ; pub const XK_braille_dots_2458 : :: std :: os :: raw :: c_uint = 16787610 ; pub const XK_braille_dots_12458 : :: std :: os :: raw :: c_uint = 16787611 ; pub const XK_braille_dots_3458 : :: std :: os :: raw :: c_uint = 16787612 ; pub const XK_braille_dots_13458 : :: std :: os :: raw :: c_uint = 16787613 ; pub const XK_braille_dots_23458 : :: std :: os :: raw :: c_uint = 16787614 ; pub const XK_braille_dots_123458 : :: std :: os :: raw :: c_uint = 16787615 ; pub const XK_braille_dots_68 : :: std :: os :: raw :: c_uint = 16787616 ; pub const XK_braille_dots_168 : :: std :: os :: raw :: c_uint = 16787617 ; pub const XK_braille_dots_268 : :: std :: os :: raw :: c_uint = 16787618 ; pub const XK_braille_dots_1268 : :: std :: os :: raw :: c_uint = 16787619 ; pub const XK_braille_dots_368 : :: std :: os :: raw :: c_uint = 16787620 ; pub const XK_braille_dots_1368 : :: std :: os :: raw :: c_uint = 16787621 ; pub const XK_braille_dots_2368 : :: std :: os :: raw :: c_uint = 16787622 ; pub const XK_braille_dots_12368 : :: std :: os :: raw :: c_uint = 16787623 ; pub const XK_braille_dots_468 : :: std :: os :: raw :: c_uint = 16787624 ; pub const XK_braille_dots_1468 : :: std :: os :: raw :: c_uint = 16787625 ; pub const XK_braille_dots_2468 : :: std :: os :: raw :: c_uint = 16787626 ; pub const XK_braille_dots_12468 : :: std :: os :: raw :: c_uint = 16787627 ; pub const XK_braille_dots_3468 : :: std :: os :: raw :: c_uint = 16787628 ; pub const XK_braille_dots_13468 : :: std :: os :: raw :: c_uint = 16787629 ; pub const XK_braille_dots_23468 : :: std :: os :: raw :: c_uint = 16787630 ; pub const XK_braille_dots_123468 : :: std :: os :: raw :: c_uint = 16787631 ; pub const XK_braille_dots_568 : :: std :: os :: raw :: c_uint = 16787632 ; pub const XK_braille_dots_1568 : :: std :: os :: raw :: c_uint = 16787633 ; pub const XK_braille_dots_2568 : :: std :: os :: raw :: c_uint = 16787634 ; pub const XK_braille_dots_12568 : :: std :: os :: raw :: c_uint = 16787635 ; pub const XK_braille_dots_3568 : :: std :: os :: raw :: c_uint = 16787636 ; pub const XK_braille_dots_13568 : :: std :: os :: raw :: c_uint = 16787637 ; pub const XK_braille_dots_23568 : :: std :: os :: raw :: c_uint = 16787638 ; pub const XK_braille_dots_123568 : :: std :: os :: raw :: c_uint = 16787639 ; pub const XK_braille_dots_4568 : :: std :: os :: raw :: c_uint = 16787640 ; pub const XK_braille_dots_14568 : :: std :: os :: raw :: c_uint = 16787641 ; pub const XK_braille_dots_24568 : :: std :: os :: raw :: c_uint = 16787642 ; pub const XK_braille_dots_124568 : :: std :: os :: raw :: c_uint = 16787643 ; pub const XK_braille_dots_34568 : :: std :: os :: raw :: c_uint = 16787644 ; pub const XK_braille_dots_134568 : :: std :: os :: raw :: c_uint = 16787645 ; pub const XK_braille_dots_234568 : :: std :: os :: raw :: c_uint = 16787646 ; pub const XK_braille_dots_1234568 : :: std :: os :: raw :: c_uint = 16787647 ; pub const XK_braille_dots_78 : :: std :: os :: raw :: c_uint = 16787648 ; pub const XK_braille_dots_178 : :: std :: os :: raw :: c_uint = 16787649 ; pub const XK_braille_dots_278 : :: std :: os :: raw :: c_uint = 16787650 ; pub const XK_braille_dots_1278 : :: std :: os :: raw :: c_uint = 16787651 ; pub const XK_braille_dots_378 : :: std :: os :: raw :: c_uint = 16787652 ; pub const XK_braille_dots_1378 : :: std :: os :: raw :: c_uint = 16787653 ; pub const XK_braille_dots_2378 : :: std :: os :: raw :: c_uint = 16787654 ; pub const XK_braille_dots_12378 : :: std :: os :: raw :: c_uint = 16787655 ; pub const XK_braille_dots_478 : :: std :: os :: raw :: c_uint = 16787656 ; pub const XK_braille_dots_1478 : :: std :: os :: raw :: c_uint = 16787657 ; pub const XK_braille_dots_2478 : :: std :: os :: raw :: c_uint = 16787658 ; pub const XK_braille_dots_12478 : :: std :: os :: raw :: c_uint = 16787659 ; pub const XK_braille_dots_3478 : :: std :: os :: raw :: c_uint = 16787660 ; pub const XK_braille_dots_13478 : :: std :: os :: raw :: c_uint = 16787661 ; pub const XK_braille_dots_23478 : :: std :: os :: raw :: c_uint = 16787662 ; pub const XK_braille_dots_123478 : :: std :: os :: raw :: c_uint = 16787663 ; pub const XK_braille_dots_578 : :: std :: os :: raw :: c_uint = 16787664 ; pub const XK_braille_dots_1578 : :: std :: os :: raw :: c_uint = 16787665 ; pub const XK_braille_dots_2578 : :: std :: os :: raw :: c_uint = 16787666 ; pub const XK_braille_dots_12578 : :: std :: os :: raw :: c_uint = 16787667 ; pub const XK_braille_dots_3578 : :: std :: os :: raw :: c_uint = 16787668 ; pub const XK_braille_dots_13578 : :: std :: os :: raw :: c_uint = 16787669 ; pub const XK_braille_dots_23578 : :: std :: os :: raw :: c_uint = 16787670 ; pub const XK_braille_dots_123578 : :: std :: os :: raw :: c_uint = 16787671 ; pub const XK_braille_dots_4578 : :: std :: os :: raw :: c_uint = 16787672 ; pub const XK_braille_dots_14578 : :: std :: os :: raw :: c_uint = 16787673 ; pub const XK_braille_dots_24578 : :: std :: os :: raw :: c_uint = 16787674 ; pub const XK_braille_dots_124578 : :: std :: os :: raw :: c_uint = 16787675 ; pub const XK_braille_dots_34578 : :: std :: os :: raw :: c_uint = 16787676 ; pub const XK_braille_dots_134578 : :: std :: os :: raw :: c_uint = 16787677 ; pub const XK_braille_dots_234578 : :: std :: os :: raw :: c_uint = 16787678 ; pub const XK_braille_dots_1234578 : :: std :: os :: raw :: c_uint = 16787679 ; pub const XK_braille_dots_678 : :: std :: os :: raw :: c_uint = 16787680 ; pub const XK_braille_dots_1678 : :: std :: os :: raw :: c_uint = 16787681 ; pub const XK_braille_dots_2678 : :: std :: os :: raw :: c_uint = 16787682 ; pub const XK_braille_dots_12678 : :: std :: os :: raw :: c_uint = 16787683 ; pub const XK_braille_dots_3678 : :: std :: os :: raw :: c_uint = 16787684 ; pub const XK_braille_dots_13678 : :: std :: os :: raw :: c_uint = 16787685 ; pub const XK_braille_dots_23678 : :: std :: os :: raw :: c_uint = 16787686 ; pub const XK_braille_dots_123678 : :: std :: os :: raw :: c_uint = 16787687 ; pub const XK_braille_dots_4678 : :: std :: os :: raw :: c_uint = 16787688 ; pub const XK_braille_dots_14678 : :: std :: os :: raw :: c_uint = 16787689 ; pub const XK_braille_dots_24678 : :: std :: os :: raw :: c_uint = 16787690 ; pub const XK_braille_dots_124678 : :: std :: os :: raw :: c_uint = 16787691 ; pub const XK_braille_dots_34678 : :: std :: os :: raw :: c_uint = 16787692 ; pub const XK_braille_dots_134678 : :: std :: os :: raw :: c_uint = 16787693 ; pub const XK_braille_dots_234678 : :: std :: os :: raw :: c_uint = 16787694 ; pub const XK_braille_dots_1234678 : :: std :: os :: raw :: c_uint = 16787695 ; pub const XK_braille_dots_5678 : :: std :: os :: raw :: c_uint = 16787696 ; pub const XK_braille_dots_15678 : :: std :: os :: raw :: c_uint = 16787697 ; pub const XK_braille_dots_25678 : :: std :: os :: raw :: c_uint = 16787698 ; pub const XK_braille_dots_125678 : :: std :: os :: raw :: c_uint = 16787699 ; pub const XK_braille_dots_35678 : :: std :: os :: raw :: c_uint = 16787700 ; pub const XK_braille_dots_135678 : :: std :: os :: raw :: c_uint = 16787701 ; pub const XK_braille_dots_235678 : :: std :: os :: raw :: c_uint = 16787702 ; pub const XK_braille_dots_1235678 : :: std :: os :: raw :: c_uint = 16787703 ; pub const XK_braille_dots_45678 : :: std :: os :: raw :: c_uint = 16787704 ; pub const XK_braille_dots_145678 : :: std :: os :: raw :: c_uint = 16787705 ; pub const XK_braille_dots_245678 : :: std :: os :: raw :: c_uint = 16787706 ; pub const XK_braille_dots_1245678 : :: std :: os :: raw :: c_uint = 16787707 ; pub const XK_braille_dots_345678 : :: std :: os :: raw :: c_uint = 16787708 ; pub const XK_braille_dots_1345678 : :: std :: os :: raw :: c_uint = 16787709 ; pub const XK_braille_dots_2345678 : :: std :: os :: raw :: c_uint = 16787710 ; pub const XK_braille_dots_12345678 : :: std :: os :: raw :: c_uint = 16787711 ; pub const XK_Sinh_ng : :: std :: os :: raw :: c_uint = 16780674 ; pub const XK_Sinh_h2 : :: std :: os :: raw :: c_uint = 16780675 ; pub const XK_Sinh_a : :: std :: os :: raw :: c_uint = 16780677 ; pub const XK_Sinh_aa : :: std :: os :: raw :: c_uint = 16780678 ; pub const XK_Sinh_ae : :: std :: os :: raw :: c_uint = 16780679 ; pub const XK_Sinh_aee : :: std :: os :: raw :: c_uint = 16780680 ; pub const XK_Sinh_i : :: std :: os :: raw :: c_uint = 16780681 ; pub const XK_Sinh_ii : :: std :: os :: raw :: c_uint = 16780682 ; pub const XK_Sinh_u : :: std :: os :: raw :: c_uint = 16780683 ; pub const XK_Sinh_uu : :: std :: os :: raw :: c_uint = 16780684 ; pub const XK_Sinh_ri : :: std :: os :: raw :: c_uint = 16780685 ; pub const XK_Sinh_rii : :: std :: os :: raw :: c_uint = 16780686 ; pub const XK_Sinh_lu : :: std :: os :: raw :: c_uint = 16780687 ; pub const XK_Sinh_luu : :: std :: os :: raw :: c_uint = 16780688 ; pub const XK_Sinh_e : :: std :: os :: raw :: c_uint = 16780689 ; pub const XK_Sinh_ee : :: std :: os :: raw :: c_uint = 16780690 ; pub const XK_Sinh_ai : :: std :: os :: raw :: c_uint = 16780691 ; pub const XK_Sinh_o : :: std :: os :: raw :: c_uint = 16780692 ; pub const XK_Sinh_oo : :: std :: os :: raw :: c_uint = 16780693 ; pub const XK_Sinh_au : :: std :: os :: raw :: c_uint = 16780694 ; pub const XK_Sinh_ka : :: std :: os :: raw :: c_uint = 16780698 ; pub const XK_Sinh_kha : :: std :: os :: raw :: c_uint = 16780699 ; pub const XK_Sinh_ga : :: std :: os :: raw :: c_uint = 16780700 ; pub const XK_Sinh_gha : :: std :: os :: raw :: c_uint = 16780701 ; pub const XK_Sinh_ng2 : :: std :: os :: raw :: c_uint = 16780702 ; pub const XK_Sinh_nga : :: std :: os :: raw :: c_uint = 16780703 ; pub const XK_Sinh_ca : :: std :: os :: raw :: c_uint = 16780704 ; pub const XK_Sinh_cha : :: std :: os :: raw :: c_uint = 16780705 ; pub const XK_Sinh_ja : :: std :: os :: raw :: c_uint = 16780706 ; pub const XK_Sinh_jha : :: std :: os :: raw :: c_uint = 16780707 ; pub const XK_Sinh_nya : :: std :: os :: raw :: c_uint = 16780708 ; pub const XK_Sinh_jnya : :: std :: os :: raw :: c_uint = 16780709 ; pub const XK_Sinh_nja : :: std :: os :: raw :: c_uint = 16780710 ; pub const XK_Sinh_tta : :: std :: os :: raw :: c_uint = 16780711 ; pub const XK_Sinh_ttha : :: std :: os :: raw :: c_uint = 16780712 ; pub const XK_Sinh_dda : :: std :: os :: raw :: c_uint = 16780713 ; pub const XK_Sinh_ddha : :: std :: os :: raw :: c_uint = 16780714 ; pub const XK_Sinh_nna : :: std :: os :: raw :: c_uint = 16780715 ; pub const XK_Sinh_ndda : :: std :: os :: raw :: c_uint = 16780716 ; pub const XK_Sinh_tha : :: std :: os :: raw :: c_uint = 16780717 ; pub const XK_Sinh_thha : :: std :: os :: raw :: c_uint = 16780718 ; pub const XK_Sinh_dha : :: std :: os :: raw :: c_uint = 16780719 ; pub const XK_Sinh_dhha : :: std :: os :: raw :: c_uint = 16780720 ; pub const XK_Sinh_na : :: std :: os :: raw :: c_uint = 16780721 ; pub const XK_Sinh_ndha : :: std :: os :: raw :: c_uint = 16780723 ; pub const XK_Sinh_pa : :: std :: os :: raw :: c_uint = 16780724 ; pub const XK_Sinh_pha : :: std :: os :: raw :: c_uint = 16780725 ; pub const XK_Sinh_ba : :: std :: os :: raw :: c_uint = 16780726 ; pub const XK_Sinh_bha : :: std :: os :: raw :: c_uint = 16780727 ; pub const XK_Sinh_ma : :: std :: os :: raw :: c_uint = 16780728 ; pub const XK_Sinh_mba : :: std :: os :: raw :: c_uint = 16780729 ; pub const XK_Sinh_ya : :: std :: os :: raw :: c_uint = 16780730 ; pub const XK_Sinh_ra : :: std :: os :: raw :: c_uint = 16780731 ; pub const XK_Sinh_la : :: std :: os :: raw :: c_uint = 16780733 ; pub const XK_Sinh_va : :: std :: os :: raw :: c_uint = 16780736 ; pub const XK_Sinh_sha : :: std :: os :: raw :: c_uint = 16780737 ; pub const XK_Sinh_ssha : :: std :: os :: raw :: c_uint = 16780738 ; pub const XK_Sinh_sa : :: std :: os :: raw :: c_uint = 16780739 ; pub const XK_Sinh_ha : :: std :: os :: raw :: c_uint = 16780740 ; pub const XK_Sinh_lla : :: std :: os :: raw :: c_uint = 16780741 ; pub const XK_Sinh_fa : :: std :: os :: raw :: c_uint = 16780742 ; pub const XK_Sinh_al : :: std :: os :: raw :: c_uint = 16780746 ; pub const XK_Sinh_aa2 : :: std :: os :: raw :: c_uint = 16780751 ; pub const XK_Sinh_ae2 : :: std :: os :: raw :: c_uint = 16780752 ; pub const XK_Sinh_aee2 : :: std :: os :: raw :: c_uint = 16780753 ; pub const XK_Sinh_i2 : :: std :: os :: raw :: c_uint = 16780754 ; pub const XK_Sinh_ii2 : :: std :: os :: raw :: c_uint = 16780755 ; pub const XK_Sinh_u2 : :: std :: os :: raw :: c_uint = 16780756 ; pub const XK_Sinh_uu2 : :: std :: os :: raw :: c_uint = 16780758 ; pub const XK_Sinh_ru2 : :: std :: os :: raw :: c_uint = 16780760 ; pub const XK_Sinh_e2 : :: std :: os :: raw :: c_uint = 16780761 ; pub const XK_Sinh_ee2 : :: std :: os :: raw :: c_uint = 16780762 ; pub const XK_Sinh_ai2 : :: std :: os :: raw :: c_uint = 16780763 ; pub const XK_Sinh_o2 : :: std :: os :: raw :: c_uint = 16780764 ; pub const XK_Sinh_oo2 : :: std :: os :: raw :: c_uint = 16780765 ; pub const XK_Sinh_au2 : :: std :: os :: raw :: c_uint = 16780766 ; pub const XK_Sinh_lu2 : :: std :: os :: raw :: c_uint = 16780767 ; pub const XK_Sinh_ruu2 : :: std :: os :: raw :: c_uint = 16780786 ; pub const XK_Sinh_luu2 : :: std :: os :: raw :: c_uint = 16780787 ; pub const XK_Sinh_kunddaliya : :: std :: os :: raw :: c_uint = 16780788 ; pub const NoValue : :: std :: os :: raw :: c_uint = 0 ; pub const XValue : :: std :: os :: raw :: c_uint = 1 ; pub const YValue : :: std :: os :: raw :: c_uint = 2 ; pub const WidthValue : :: std :: os :: raw :: c_uint = 4 ; pub const HeightValue : :: std :: os :: raw :: c_uint = 8 ; pub const AllValues : :: std :: os :: raw :: c_uint = 15 ; pub const XNegative : :: std :: os :: raw :: c_uint = 16 ; pub const YNegative : :: std :: os :: raw :: c_uint = 32 ; pub const USPosition : :: std :: os :: raw :: c_uint = 1 ; pub const USSize : :: std :: os :: raw :: c_uint = 2 ; pub const PPosition : :: std :: os :: raw :: c_uint = 4 ; pub const PSize : :: std :: os :: raw :: c_uint = 8 ; pub const PMinSize : :: std :: os :: raw :: c_uint = 16 ; pub const PMaxSize : :: std :: os :: raw :: c_uint = 32 ; pub const PResizeInc : :: std :: os :: raw :: c_uint = 64 ; pub const PAspect : :: std :: os :: raw :: c_uint = 128 ; pub const PBaseSize : :: std :: os :: raw :: c_uint = 256 ; pub const PWinGravity : :: std :: os :: raw :: c_uint = 512 ; pub const PAllHints : :: std :: os :: raw :: c_uint = 252 ; pub const InputHint : :: std :: os :: raw :: c_uint = 1 ; pub const StateHint : :: std :: os :: raw :: c_uint = 2 ; pub const IconPixmapHint : :: std :: os :: raw :: c_uint = 4 ; pub const IconWindowHint : :: std :: os :: raw :: c_uint = 8 ; pub const IconPositionHint : :: std :: os :: raw :: c_uint = 16 ; pub const IconMaskHint : :: std :: os :: raw :: c_uint = 32 ; pub const WindowGroupHint : :: std :: os :: raw :: c_uint = 64 ; pub const AllHints : :: std :: os :: raw :: c_uint = 127 ; pub const XUrgencyHint : :: std :: os :: raw :: c_uint = 256 ; pub const WithdrawnState : :: std :: os :: raw :: c_uint = 0 ; pub const NormalState : :: std :: os :: raw :: c_uint = 1 ; pub const IconicState : :: std :: os :: raw :: c_uint = 3 ; pub const DontCareState : :: std :: os :: raw :: c_uint = 0 ; pub const ZoomState : :: std :: os :: raw :: c_uint = 2 ; pub const InactiveState : :: std :: os :: raw :: c_uint = 4 ; pub const XNoMemory : :: std :: os :: raw :: c_int = -1 ; pub const XLocaleNotSupported : :: std :: os :: raw :: c_int = -2 ; pub const XConverterNotFound : :: std :: os :: raw :: c_int = -3 ; pub const RectangleOut : :: std :: os :: raw :: c_uint = 0 ; pub const RectangleIn : :: std :: os :: raw :: c_uint = 1 ; pub const RectanglePart : :: std :: os :: raw :: c_uint = 2 ; pub const VisualNoMask : :: std :: os :: raw :: c_uint = 0 ; pub const VisualIDMask : :: std :: os :: raw :: c_uint = 1 ; pub const VisualScreenMask : :: std :: os :: raw :: c_uint = 2 ; pub const VisualDepthMask : :: std :: os :: raw :: c_uint = 4 ; pub const VisualClassMask : :: std :: os :: raw :: c_uint = 8 ; pub const VisualRedMaskMask : :: std :: os :: raw :: c_uint = 16 ; pub const VisualGreenMaskMask : :: std :: os :: raw :: c_uint = 32 ; pub const VisualBlueMaskMask : :: std :: os :: raw :: c_uint = 64 ; pub const VisualColormapSizeMask : :: std :: os :: raw :: c_uint = 128 ; pub const VisualBitsPerRGBMask : :: std :: os :: raw :: c_uint = 256 ; pub const VisualAllMask : :: std :: os :: raw :: c_uint = 511 ; pub const BitmapSuccess : :: std :: os :: raw :: c_uint = 0 ; pub const BitmapOpenFailed : :: std :: os :: raw :: c_uint = 1 ; pub const BitmapFileInvalid : :: std :: os :: raw :: c_uint = 2 ; pub const BitmapNoMemory : :: std :: os :: raw :: c_uint = 3 ; pub const XCSUCCESS : :: std :: os :: raw :: c_uint = 0 ; pub const XCNOMEM : :: std :: os :: raw :: c_uint = 1 ; pub const XCNOENT : :: std :: os :: raw :: c_uint = 2 ; pub type __u_char = :: std :: os :: raw :: c_uchar ; pub type __u_short = :: std :: os :: raw :: c_ushort ; pub type __u_int = :: std :: os :: raw :: c_uint ; pub type __u_long = :: std :: os :: raw :: c_ulong ; pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_long ; pub type __uint64_t = :: std :: os :: raw :: c_ulong ; pub type __quad_t = :: std :: os :: raw :: c_long ; pub type __u_quad_t = :: std :: os :: raw :: c_ulong ; pub type __intmax_t = :: std :: os :: raw :: c_long ; pub type __uintmax_t = :: std :: os :: raw :: c_ulong ; pub type __dev_t = :: std :: os :: raw :: c_ulong ; pub type __uid_t = :: std :: os :: raw :: c_uint ; pub type __gid_t = :: std :: os :: raw :: c_uint ; pub type __ino_t = :: std :: os :: raw :: c_ulong ; pub type __ino64_t = :: std :: os :: raw :: c_ulong ; pub type __mode_t = :: std :: os :: raw :: c_uint ; pub type __nlink_t = :: std :: os :: raw :: c_ulong ; pub type __off_t = :: std :: os :: raw :: c_long ; pub type __off64_t = :: std :: os :: raw :: c_long ; pub type __pid_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct __fsid_t { pub __val : [ :: std :: os :: raw :: c_int ; 2usize ] , } # [ test ] fn bindgen_test_layout___fsid_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __fsid_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __fsid_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __fsid_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __fsid_t ) ) . __val as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __fsid_t ) , "::" , stringify ! ( __val ) ) ) ; } impl Clone for __fsid_t { fn clone ( & self ) -> Self { * self } } pub type __clock_t = :: std :: os :: raw :: c_long ; pub type __rlim_t = :: std :: os :: raw :: c_ulong ; pub type __rlim64_t = :: std :: os :: raw :: c_ulong ; pub type __id_t = :: std :: os :: raw :: c_uint ; pub type __time_t = :: std :: os :: raw :: c_long ; pub type __useconds_t = :: std :: os :: raw :: c_uint ; pub type __suseconds_t = :: std :: os :: raw :: c_long ; pub type __daddr_t = :: std :: os :: raw :: c_int ; pub type __key_t = :: std :: os :: raw :: c_int ; pub type __clockid_t = :: std :: os :: raw :: c_int ; pub type __timer_t = * mut :: std :: os :: raw :: c_void ; pub type __blksize_t = :: std :: os :: raw :: c_long ; pub type __blkcnt_t = :: std :: os :: raw :: c_long ; pub type __blkcnt64_t = :: std :: os :: raw :: c_long ; pub type __fsblkcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsblkcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt_t = :: std :: os :: raw :: c_ulong ; pub type __fsfilcnt64_t = :: std :: os :: raw :: c_ulong ; pub type __fsword_t = :: std :: os :: raw :: c_long ; pub type __ssize_t = :: std :: os :: raw :: c_long ; pub type __syscall_slong_t = :: std :: os :: raw :: c_long ; pub type __syscall_ulong_t = :: std :: os :: raw :: c_ulong ; pub type __loff_t = __off64_t ; pub type __qaddr_t = * mut __quad_t ; pub type __caddr_t = * mut :: std :: os :: raw :: c_char ; pub type __intptr_t = :: std :: os :: raw :: c_long ; pub type __socklen_t = :: std :: os :: raw :: c_uint ; pub type __sig_atomic_t = :: std :: os :: raw :: c_int ; pub type u_char = __u_char ; pub type u_short = __u_short ; pub type u_int = __u_int ; pub type u_long = __u_long ; pub type quad_t = __quad_t ; pub type u_quad_t = __u_quad_t ; pub type fsid_t = __fsid_t ; pub type loff_t = __loff_t ; pub type ino_t = __ino_t ; pub type dev_t = __dev_t ; pub type gid_t = __gid_t ; pub type mode_t = __mode_t ; pub type nlink_t = __nlink_t ; pub type uid_t = __uid_t ; pub type off_t = __off_t ; pub type pid_t = __pid_t ; pub type id_t = __id_t ; pub type daddr_t = __daddr_t ; pub type caddr_t = __caddr_t ; pub type key_t = __key_t ; pub type clock_t = __clock_t ; pub type clockid_t = __clockid_t ; pub type time_t = __time_t ; pub type timer_t = __timer_t ; pub type ulong = :: std :: os :: raw :: c_ulong ; pub type ushort = :: std :: os :: raw :: c_ushort ; pub type uint = :: std :: os :: raw :: c_uint ; pub type u_int8_t = :: std :: os :: raw :: c_uchar ; pub type u_int16_t = :: std :: os :: raw :: c_ushort ; pub type u_int32_t = :: std :: os :: raw :: c_uint ; pub type u_int64_t = :: std :: os :: raw :: c_ulong ; pub type register_t = :: std :: os :: raw :: c_long ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct __sigset_t { pub __val : [ :: std :: os :: raw :: c_ulong ; 16usize ] , } # [ test ] fn bindgen_test_layout___sigset_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __sigset_t > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( __sigset_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __sigset_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __sigset_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __sigset_t ) ) . __val as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __sigset_t ) , "::" , stringify ! ( __val ) ) ) ; } impl Clone for __sigset_t { fn clone ( & self ) -> Self { * self } } pub type sigset_t = __sigset_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct timeval { pub tv_sec : __time_t , pub tv_usec : __suseconds_t , } # [ test ] fn bindgen_test_layout_timeval ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timeval > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( timeval ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < timeval > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( timeval ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timeval ) ) . tv_sec as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( timeval ) , "::" , stringify ! ( tv_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timeval ) ) . tv_usec as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( timeval ) , "::" , stringify ! ( tv_usec ) ) ) ; } impl Clone for timeval { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct timespec { pub tv_sec : __time_t , pub tv_nsec : __syscall_slong_t , } # [ test ] fn bindgen_test_layout_timespec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timespec > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( timespec ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < timespec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( timespec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timespec ) ) . tv_sec as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( timespec ) , "::" , stringify ! ( tv_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const timespec ) ) . tv_nsec as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( timespec ) , "::" , stringify ! ( tv_nsec ) ) ) ; } impl Clone for timespec { fn clone ( & self ) -> Self { * self } } pub type suseconds_t = __suseconds_t ; pub type __fd_mask = :: std :: os :: raw :: c_long ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct fd_set { pub __fds_bits : [ __fd_mask ; 16usize ] , } # [ test ] fn bindgen_test_layout_fd_set ( ) { assert_eq ! ( :: std :: mem :: size_of :: < fd_set > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( fd_set ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < fd_set > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( fd_set ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const fd_set ) ) . __fds_bits as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( fd_set ) , "::" , stringify ! ( __fds_bits ) ) ) ; } impl Clone for fd_set { fn clone ( & self ) -> Self { * self } } pub type fd_mask = __fd_mask ; extern "C" {
 pub fn select ( __nfds : :: std :: os :: raw :: c_int , __readfds : * mut fd_set , __writefds : * mut fd_set , __exceptfds : * mut fd_set , __timeout : * mut timeval , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn pselect ( __nfds : :: std :: os :: raw :: c_int , __readfds : * mut fd_set , __writefds : * mut fd_set , __exceptfds : * mut fd_set , __timeout : * const timespec , __sigmask : * const __sigset_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn gnu_dev_major ( __dev : __dev_t , ) -> :: std :: os :: raw :: c_uint ; 
} extern "C" {
 pub fn gnu_dev_minor ( __dev : __dev_t , ) -> :: std :: os :: raw :: c_uint ; 
} extern "C" {
 pub fn gnu_dev_makedev ( __major : :: std :: os :: raw :: c_uint , __minor : :: std :: os :: raw :: c_uint , ) -> __dev_t ; 
} pub type blksize_t = __blksize_t ; pub type blkcnt_t = __blkcnt_t ; pub type fsblkcnt_t = __fsblkcnt_t ; pub type fsfilcnt_t = __fsfilcnt_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct __pthread_rwlock_arch_t { pub __readers : :: std :: os :: raw :: c_uint , pub __writers : :: std :: os :: raw :: c_uint , pub __wrphase_futex : :: std :: os :: raw :: c_uint , pub __writers_futex : :: std :: os :: raw :: c_uint , pub __pad3 : :: std :: os :: raw :: c_uint , pub __pad4 : :: std :: os :: raw :: c_uint , pub __cur_writer : :: std :: os :: raw :: c_int , pub __shared : :: std :: os :: raw :: c_int , pub __rwelision : :: std :: os :: raw :: c_schar , pub __pad1 : [ :: std :: os :: raw :: c_uchar ; 7usize ] , pub __pad2 : :: std :: os :: raw :: c_ulong , pub __flags : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout___pthread_rwlock_arch_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_rwlock_arch_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( __pthread_rwlock_arch_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_rwlock_arch_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_rwlock_arch_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __readers as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __readers ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __writers as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __writers ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __wrphase_futex as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __wrphase_futex ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __writers_futex as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __writers_futex ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __pad3 as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __pad4 as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __cur_writer as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __cur_writer ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __shared as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __shared ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __rwelision as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __rwelision ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __pad1 as * const _ as usize } , 33usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __pad2 as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __pad2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_rwlock_arch_t ) ) . __flags as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_rwlock_arch_t ) , "::" , stringify ! ( __flags ) ) ) ; } impl Clone for __pthread_rwlock_arch_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct __pthread_internal_list { pub __prev : * mut __pthread_internal_list , pub __next : * mut __pthread_internal_list , } # [ test ] fn bindgen_test_layout___pthread_internal_list ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_internal_list > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( __pthread_internal_list ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_internal_list > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_internal_list ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_internal_list ) ) . __prev as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_internal_list ) , "::" , stringify ! ( __prev ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_internal_list ) ) . __next as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_internal_list ) , "::" , stringify ! ( __next ) ) ) ; } impl Clone for __pthread_internal_list { fn clone ( & self ) -> Self { * self } } pub type __pthread_list_t = __pthread_internal_list ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct __pthread_mutex_s { pub __lock : :: std :: os :: raw :: c_int , pub __count : :: std :: os :: raw :: c_uint , pub __owner : :: std :: os :: raw :: c_int , pub __nusers : :: std :: os :: raw :: c_uint , pub __kind : :: std :: os :: raw :: c_int , pub __spins : :: std :: os :: raw :: c_short , pub __elision : :: std :: os :: raw :: c_short , pub __list : __pthread_list_t , } # [ test ] fn bindgen_test_layout___pthread_mutex_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_mutex_s > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( __pthread_mutex_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_mutex_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_mutex_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __lock as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __lock ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __count as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __count ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __owner as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __owner ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __nusers as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __nusers ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __kind as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __kind ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __spins as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __spins ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __elision as * const _ as usize } , 22usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __elision ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_mutex_s ) ) . __list as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_mutex_s ) , "::" , stringify ! ( __list ) ) ) ; } impl Clone for __pthread_mutex_s { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub struct __pthread_cond_s { pub __bindgen_anon_1 : __pthread_cond_s__bindgen_ty_1 , pub __bindgen_anon_2 : __pthread_cond_s__bindgen_ty_2 , pub __g_refs : [ :: std :: os :: raw :: c_uint ; 2usize ] , pub __g_size : [ :: std :: os :: raw :: c_uint ; 2usize ] , pub __g1_orig_size : :: std :: os :: raw :: c_uint , pub __wrefs : :: std :: os :: raw :: c_uint , pub __g_signals : [ :: std :: os :: raw :: c_uint ; 2usize ] , } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union __pthread_cond_s__bindgen_ty_1 { pub __wseq : :: std :: os :: raw :: c_ulonglong , pub __wseq32 : __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 , _bindgen_union_align : u64 , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 { pub __low : :: std :: os :: raw :: c_uint , pub __high : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) ) . __low as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( __low ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) ) . __high as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( __high ) ) ) ; } impl Clone for __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_1 ) ) . __wseq as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) , "::" , stringify ! ( __wseq ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_1 ) ) . __wseq32 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_1 ) , "::" , stringify ! ( __wseq32 ) ) ) ; } impl Clone for __pthread_cond_s__bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union __pthread_cond_s__bindgen_ty_2 { pub __g1_start : :: std :: os :: raw :: c_ulonglong , pub __g1_start32 : __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 , _bindgen_union_align : u64 , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 { pub __low : :: std :: os :: raw :: c_uint , pub __high : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) ) . __low as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) , "::" , stringify ! ( __low ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) ) . __high as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 ) , "::" , stringify ! ( __high ) ) ) ; } impl Clone for __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s__bindgen_ty_2 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s__bindgen_ty_2 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_2 ) ) . __g1_start as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) , "::" , stringify ! ( __g1_start ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s__bindgen_ty_2 ) ) . __g1_start32 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s__bindgen_ty_2 ) , "::" , stringify ! ( __g1_start32 ) ) ) ; } impl Clone for __pthread_cond_s__bindgen_ty_2 { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout___pthread_cond_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_cond_s > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( __pthread_cond_s ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __pthread_cond_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_cond_s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s ) ) . __g_refs as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g_refs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s ) ) . __g_size as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s ) ) . __g1_orig_size as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g1_orig_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s ) ) . __wrefs as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __wrefs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const __pthread_cond_s ) ) . __g_signals as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( __pthread_cond_s ) , "::" , stringify ! ( __g_signals ) ) ) ; } impl Clone for __pthread_cond_s { fn clone ( & self ) -> Self { * self } } pub type pthread_t = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_mutexattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 4usize ] , pub __align : :: std :: os :: raw :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_mutexattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_mutexattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_mutexattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_mutexattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_mutexattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutexattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutexattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_mutexattr_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_condattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 4usize ] , pub __align : :: std :: os :: raw :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_condattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_condattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_condattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_condattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_condattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_condattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_condattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_condattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_condattr_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_condattr_t { fn clone ( & self ) -> Self { * self } } pub type pthread_key_t = :: std :: os :: raw :: c_uint ; pub type pthread_once_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_attr_t { pub __size : [ :: std :: os :: raw :: c_char ; 56usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 7usize ] , } # [ test ] fn bindgen_test_layout_pthread_attr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_attr_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( pthread_attr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_attr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_attr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_attr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_attr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_attr_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_mutex_t { pub __data : __pthread_mutex_s , pub __size : [ :: std :: os :: raw :: c_char ; 40usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 5usize ] , } # [ test ] fn bindgen_test_layout_pthread_mutex_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_mutex_t > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( pthread_mutex_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_mutex_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_mutex_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_mutex_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_mutex_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_cond_t { pub __data : __pthread_cond_s , pub __size : [ :: std :: os :: raw :: c_char ; 48usize ] , pub __align : :: std :: os :: raw :: c_longlong , _bindgen_union_align : [ u64 ; 6usize ] , } # [ test ] fn bindgen_test_layout_pthread_cond_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_cond_t > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( pthread_cond_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_cond_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_cond_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_cond_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_cond_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_rwlock_t { pub __data : __pthread_rwlock_arch_t , pub __size : [ :: std :: os :: raw :: c_char ; 56usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 7usize ] , } # [ test ] fn bindgen_test_layout_pthread_rwlock_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_rwlock_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( pthread_rwlock_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_rwlock_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_rwlock_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlock_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_rwlock_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_rwlockattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 8usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_pthread_rwlockattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_rwlockattr_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( pthread_rwlockattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_rwlockattr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_rwlockattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlockattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_rwlockattr_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_rwlockattr_t { fn clone ( & self ) -> Self { * self } } pub type pthread_spinlock_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_barrier_t { pub __size : [ :: std :: os :: raw :: c_char ; 32usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ; 4usize ] , } # [ test ] fn bindgen_test_layout_pthread_barrier_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_barrier_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( pthread_barrier_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_barrier_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_barrier_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrier_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrier_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrier_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrier_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_barrier_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union pthread_barrierattr_t { pub __size : [ :: std :: os :: raw :: c_char ; 4usize ] , pub __align : :: std :: os :: raw :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_barrierattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_barrierattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_barrierattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pthread_barrierattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_barrierattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrierattr_t ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrierattr_t ) , "::" , stringify ! ( __size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const pthread_barrierattr_t ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( pthread_barrierattr_t ) , "::" , stringify ! ( __align ) ) ) ; } impl Clone for pthread_barrierattr_t { fn clone ( & self ) -> Self { * self } } pub type XID = :: std :: os :: raw :: c_ulong ; pub type Mask = :: std :: os :: raw :: c_ulong ; pub type Atom = :: std :: os :: raw :: c_ulong ; pub type VisualID = :: std :: os :: raw :: c_ulong ; pub type Time = :: std :: os :: raw :: c_ulong ; pub type Window = XID ; pub type Drawable = XID ; pub type Font = XID ; pub type Pixmap = XID ; pub type Cursor = XID ; pub type Colormap = XID ; pub type GContext = XID ; pub type KeySym = XID ; pub type KeyCode = :: std :: os :: raw :: c_uchar ; pub type wchar_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct max_align_t { pub __clang_max_align_nonce1 : :: std :: os :: raw :: c_longlong , pub __bindgen_padding_0 : u64 , pub __clang_max_align_nonce2 : f64 , } # [ test ] fn bindgen_test_layout_max_align_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < max_align_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( max_align_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const max_align_t ) ) . __clang_max_align_nonce1 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( max_align_t ) , "::" , stringify ! ( __clang_max_align_nonce1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const max_align_t ) ) . __clang_max_align_nonce2 as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( max_align_t ) , "::" , stringify ! ( __clang_max_align_nonce2 ) ) ) ; } impl Clone for max_align_t { fn clone ( & self ) -> Self { * self } } extern "C" {
 pub fn _Xmblen ( str : * mut :: std :: os :: raw :: c_char , len : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} pub type XPointer = * mut :: std :: os :: raw :: c_char ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XExtData { pub number : :: std :: os :: raw :: c_int , pub next : * mut _XExtData , pub free_private : :: std :: option :: Option < unsafe extern "C" fn ( extension : * mut _XExtData ) -> :: std :: os :: raw :: c_int > , pub private_data : XPointer , } # [ test ] fn bindgen_test_layout__XExtData ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XExtData > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _XExtData ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XExtData > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XExtData ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XExtData ) ) . number as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XExtData ) , "::" , stringify ! ( number ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XExtData ) ) . next as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XExtData ) , "::" , stringify ! ( next ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XExtData ) ) . free_private as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _XExtData ) , "::" , stringify ! ( free_private ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XExtData ) ) . private_data as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _XExtData ) , "::" , stringify ! ( private_data ) ) ) ; } impl Clone for _XExtData { fn clone ( & self ) -> Self { * self } } pub type XExtData = _XExtData ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XExtCodes { pub extension : :: std :: os :: raw :: c_int , pub major_opcode : :: std :: os :: raw :: c_int , pub first_event : :: std :: os :: raw :: c_int , pub first_error : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XExtCodes ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XExtCodes > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XExtCodes ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XExtCodes > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( XExtCodes ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExtCodes ) ) . extension as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XExtCodes ) , "::" , stringify ! ( extension ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExtCodes ) ) . major_opcode as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XExtCodes ) , "::" , stringify ! ( major_opcode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExtCodes ) ) . first_event as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XExtCodes ) , "::" , stringify ! ( first_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExtCodes ) ) . first_error as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XExtCodes ) , "::" , stringify ! ( first_error ) ) ) ; } impl Clone for XExtCodes { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XPixmapFormatValues { pub depth : :: std :: os :: raw :: c_int , pub bits_per_pixel : :: std :: os :: raw :: c_int , pub scanline_pad : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XPixmapFormatValues ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XPixmapFormatValues > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( XPixmapFormatValues ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XPixmapFormatValues > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( XPixmapFormatValues ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPixmapFormatValues ) ) . depth as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XPixmapFormatValues ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPixmapFormatValues ) ) . bits_per_pixel as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XPixmapFormatValues ) , "::" , stringify ! ( bits_per_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPixmapFormatValues ) ) . scanline_pad as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XPixmapFormatValues ) , "::" , stringify ! ( scanline_pad ) ) ) ; } impl Clone for XPixmapFormatValues { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XGCValues { pub function : :: std :: os :: raw :: c_int , pub plane_mask : :: std :: os :: raw :: c_ulong , pub foreground : :: std :: os :: raw :: c_ulong , pub background : :: std :: os :: raw :: c_ulong , pub line_width : :: std :: os :: raw :: c_int , pub line_style : :: std :: os :: raw :: c_int , pub cap_style : :: std :: os :: raw :: c_int , pub join_style : :: std :: os :: raw :: c_int , pub fill_style : :: std :: os :: raw :: c_int , pub fill_rule : :: std :: os :: raw :: c_int , pub arc_mode : :: std :: os :: raw :: c_int , pub tile : Pixmap , pub stipple : Pixmap , pub ts_x_origin : :: std :: os :: raw :: c_int , pub ts_y_origin : :: std :: os :: raw :: c_int , pub font : Font , pub subwindow_mode : :: std :: os :: raw :: c_int , pub graphics_exposures : :: std :: os :: raw :: c_int , pub clip_x_origin : :: std :: os :: raw :: c_int , pub clip_y_origin : :: std :: os :: raw :: c_int , pub clip_mask : Pixmap , pub dash_offset : :: std :: os :: raw :: c_int , pub dashes : :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_XGCValues ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XGCValues > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( XGCValues ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XGCValues > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XGCValues ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . function as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( function ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . plane_mask as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( plane_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . foreground as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( foreground ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . background as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( background ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . line_width as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( line_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . line_style as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( line_style ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . cap_style as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( cap_style ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . join_style as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( join_style ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . fill_style as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( fill_style ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . fill_rule as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( fill_rule ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . arc_mode as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( arc_mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . tile as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( tile ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . stipple as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( stipple ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . ts_x_origin as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( ts_x_origin ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . ts_y_origin as * const _ as usize } , 84usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( ts_y_origin ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . font as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( font ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . subwindow_mode as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( subwindow_mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . graphics_exposures as * const _ as usize } , 100usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( graphics_exposures ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . clip_x_origin as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( clip_x_origin ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . clip_y_origin as * const _ as usize } , 108usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( clip_y_origin ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . clip_mask as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( clip_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . dash_offset as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( dash_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGCValues ) ) . dashes as * const _ as usize } , 124usize , concat ! ( "Alignment of field: " , stringify ! ( XGCValues ) , "::" , stringify ! ( dashes ) ) ) ; } impl Clone for XGCValues { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XGC { _unused : [ u8 ; 0 ] } pub type GC = * mut _XGC ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct Visual { pub ext_data : * mut XExtData , pub visualid : VisualID , pub class : :: std :: os :: raw :: c_int , pub red_mask : :: std :: os :: raw :: c_ulong , pub green_mask : :: std :: os :: raw :: c_ulong , pub blue_mask : :: std :: os :: raw :: c_ulong , pub bits_per_rgb : :: std :: os :: raw :: c_int , pub map_entries : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_Visual ( ) { assert_eq ! ( :: std :: mem :: size_of :: < Visual > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( Visual ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < Visual > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( Visual ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . ext_data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( ext_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . visualid as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( visualid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . class as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( class ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . red_mask as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( red_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . green_mask as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( green_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . blue_mask as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( blue_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . bits_per_rgb as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( bits_per_rgb ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Visual ) ) . map_entries as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( Visual ) , "::" , stringify ! ( map_entries ) ) ) ; } impl Clone for Visual { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct Depth { pub depth : :: std :: os :: raw :: c_int , pub nvisuals : :: std :: os :: raw :: c_int , pub visuals : * mut Visual , } # [ test ] fn bindgen_test_layout_Depth ( ) { assert_eq ! ( :: std :: mem :: size_of :: < Depth > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( Depth ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < Depth > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( Depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Depth ) ) . depth as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( Depth ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Depth ) ) . nvisuals as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( Depth ) , "::" , stringify ! ( nvisuals ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Depth ) ) . visuals as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( Depth ) , "::" , stringify ! ( visuals ) ) ) ; } impl Clone for Depth { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XDisplay { _unused : [ u8 ; 0 ] } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct Screen { pub ext_data : * mut XExtData , pub display : * mut _XDisplay , pub root : Window , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub mwidth : :: std :: os :: raw :: c_int , pub mheight : :: std :: os :: raw :: c_int , pub ndepths : :: std :: os :: raw :: c_int , pub depths : * mut Depth , pub root_depth : :: std :: os :: raw :: c_int , pub root_visual : * mut Visual , pub default_gc : GC , pub cmap : Colormap , pub white_pixel : :: std :: os :: raw :: c_ulong , pub black_pixel : :: std :: os :: raw :: c_ulong , pub max_maps : :: std :: os :: raw :: c_int , pub min_maps : :: std :: os :: raw :: c_int , pub backing_store : :: std :: os :: raw :: c_int , pub save_unders : :: std :: os :: raw :: c_int , pub root_input_mask : :: std :: os :: raw :: c_long , } # [ test ] fn bindgen_test_layout_Screen ( ) { assert_eq ! ( :: std :: mem :: size_of :: < Screen > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( Screen ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < Screen > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( Screen ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . ext_data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( ext_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . display as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . root as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . width as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . height as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . mwidth as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( mwidth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . mheight as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( mheight ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . ndepths as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( ndepths ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . depths as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( depths ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . root_depth as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( root_depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . root_visual as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( root_visual ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . default_gc as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( default_gc ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . cmap as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( cmap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . white_pixel as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( white_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . black_pixel as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( black_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . max_maps as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( max_maps ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . min_maps as * const _ as usize } , 108usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( min_maps ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . backing_store as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( backing_store ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . save_unders as * const _ as usize } , 116usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( save_unders ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const Screen ) ) . root_input_mask as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( Screen ) , "::" , stringify ! ( root_input_mask ) ) ) ; } impl Clone for Screen { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct ScreenFormat { pub ext_data : * mut XExtData , pub depth : :: std :: os :: raw :: c_int , pub bits_per_pixel : :: std :: os :: raw :: c_int , pub scanline_pad : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_ScreenFormat ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ScreenFormat > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( ScreenFormat ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ScreenFormat > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ScreenFormat ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ScreenFormat ) ) . ext_data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( ScreenFormat ) , "::" , stringify ! ( ext_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ScreenFormat ) ) . depth as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( ScreenFormat ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ScreenFormat ) ) . bits_per_pixel as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( ScreenFormat ) , "::" , stringify ! ( bits_per_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const ScreenFormat ) ) . scanline_pad as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( ScreenFormat ) , "::" , stringify ! ( scanline_pad ) ) ) ; } impl Clone for ScreenFormat { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XSetWindowAttributes { pub background_pixmap : Pixmap , pub background_pixel : :: std :: os :: raw :: c_ulong , pub border_pixmap : Pixmap , pub border_pixel : :: std :: os :: raw :: c_ulong , pub bit_gravity : :: std :: os :: raw :: c_int , pub win_gravity : :: std :: os :: raw :: c_int , pub backing_store : :: std :: os :: raw :: c_int , pub backing_planes : :: std :: os :: raw :: c_ulong , pub backing_pixel : :: std :: os :: raw :: c_ulong , pub save_under : :: std :: os :: raw :: c_int , pub event_mask : :: std :: os :: raw :: c_long , pub do_not_propagate_mask : :: std :: os :: raw :: c_long , pub override_redirect : :: std :: os :: raw :: c_int , pub colormap : Colormap , pub cursor : Cursor , } # [ test ] fn bindgen_test_layout_XSetWindowAttributes ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XSetWindowAttributes > ( ) , 112usize , concat ! ( "Size of: " , stringify ! ( XSetWindowAttributes ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XSetWindowAttributes > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XSetWindowAttributes ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . background_pixmap as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( background_pixmap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . background_pixel as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( background_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . border_pixmap as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( border_pixmap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . border_pixel as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( border_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . bit_gravity as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( bit_gravity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . win_gravity as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( win_gravity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . backing_store as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( backing_store ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . backing_planes as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( backing_planes ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . backing_pixel as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( backing_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . save_under as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( save_under ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . event_mask as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( event_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . do_not_propagate_mask as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( do_not_propagate_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . override_redirect as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( override_redirect ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . colormap as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( colormap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSetWindowAttributes ) ) . cursor as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( XSetWindowAttributes ) , "::" , stringify ! ( cursor ) ) ) ; } impl Clone for XSetWindowAttributes { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XWindowAttributes { pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub border_width : :: std :: os :: raw :: c_int , pub depth : :: std :: os :: raw :: c_int , pub visual : * mut Visual , pub root : Window , pub class : :: std :: os :: raw :: c_int , pub bit_gravity : :: std :: os :: raw :: c_int , pub win_gravity : :: std :: os :: raw :: c_int , pub backing_store : :: std :: os :: raw :: c_int , pub backing_planes : :: std :: os :: raw :: c_ulong , pub backing_pixel : :: std :: os :: raw :: c_ulong , pub save_under : :: std :: os :: raw :: c_int , pub colormap : Colormap , pub map_installed : :: std :: os :: raw :: c_int , pub map_state : :: std :: os :: raw :: c_int , pub all_event_masks : :: std :: os :: raw :: c_long , pub your_event_mask : :: std :: os :: raw :: c_long , pub do_not_propagate_mask : :: std :: os :: raw :: c_long , pub override_redirect : :: std :: os :: raw :: c_int , pub screen : * mut Screen , } # [ test ] fn bindgen_test_layout_XWindowAttributes ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XWindowAttributes > ( ) , 136usize , concat ! ( "Size of: " , stringify ! ( XWindowAttributes ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XWindowAttributes > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XWindowAttributes ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . y as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . width as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . height as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . border_width as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( border_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . depth as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . visual as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( visual ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . root as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . class as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( class ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . bit_gravity as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( bit_gravity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . win_gravity as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( win_gravity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . backing_store as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( backing_store ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . backing_planes as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( backing_planes ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . backing_pixel as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( backing_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . save_under as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( save_under ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . colormap as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( colormap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . map_installed as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( map_installed ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . map_state as * const _ as usize } , 92usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( map_state ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . all_event_masks as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( all_event_masks ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . your_event_mask as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( your_event_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . do_not_propagate_mask as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( do_not_propagate_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . override_redirect as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( override_redirect ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowAttributes ) ) . screen as * const _ as usize } , 128usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowAttributes ) , "::" , stringify ! ( screen ) ) ) ; } impl Clone for XWindowAttributes { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XHostAddress { pub family : :: std :: os :: raw :: c_int , pub length : :: std :: os :: raw :: c_int , pub address : * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_XHostAddress ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XHostAddress > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XHostAddress ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XHostAddress > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XHostAddress ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XHostAddress ) ) . family as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XHostAddress ) , "::" , stringify ! ( family ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XHostAddress ) ) . length as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XHostAddress ) , "::" , stringify ! ( length ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XHostAddress ) ) . address as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XHostAddress ) , "::" , stringify ! ( address ) ) ) ; } impl Clone for XHostAddress { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XServerInterpretedAddress { pub typelength : :: std :: os :: raw :: c_int , pub valuelength : :: std :: os :: raw :: c_int , pub type_ : * mut :: std :: os :: raw :: c_char , pub value : * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_XServerInterpretedAddress ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XServerInterpretedAddress > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( XServerInterpretedAddress ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XServerInterpretedAddress > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XServerInterpretedAddress ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XServerInterpretedAddress ) ) . typelength as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XServerInterpretedAddress ) , "::" , stringify ! ( typelength ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XServerInterpretedAddress ) ) . valuelength as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XServerInterpretedAddress ) , "::" , stringify ! ( valuelength ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XServerInterpretedAddress ) ) . type_ as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XServerInterpretedAddress ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XServerInterpretedAddress ) ) . value as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XServerInterpretedAddress ) , "::" , stringify ! ( value ) ) ) ; } impl Clone for XServerInterpretedAddress { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XImage { pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub xoffset : :: std :: os :: raw :: c_int , pub format : :: std :: os :: raw :: c_int , pub data : * mut :: std :: os :: raw :: c_char , pub byte_order : :: std :: os :: raw :: c_int , pub bitmap_unit : :: std :: os :: raw :: c_int , pub bitmap_bit_order : :: std :: os :: raw :: c_int , pub bitmap_pad : :: std :: os :: raw :: c_int , pub depth : :: std :: os :: raw :: c_int , pub bytes_per_line : :: std :: os :: raw :: c_int , pub bits_per_pixel : :: std :: os :: raw :: c_int , pub red_mask : :: std :: os :: raw :: c_ulong , pub green_mask : :: std :: os :: raw :: c_ulong , pub blue_mask : :: std :: os :: raw :: c_ulong , pub obdata : XPointer , pub f : _XImage_funcs , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XImage_funcs { pub create_image : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XDisplay , arg2 : * mut Visual , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_char , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_uint , arg9 : :: std :: os :: raw :: c_int , arg10 : :: std :: os :: raw :: c_int ) -> * mut _XImage > , pub destroy_image : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XImage ) -> :: std :: os :: raw :: c_int > , pub get_pixel : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XImage , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_ulong > , pub put_pixel : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XImage , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_ulong ) -> :: std :: os :: raw :: c_int > , pub sub_image : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XImage , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint ) -> * mut _XImage > , pub add_pixel : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XImage , arg2 : :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_int > , } # [ test ] fn bindgen_test_layout__XImage_funcs ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XImage_funcs > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( _XImage_funcs ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XImage_funcs > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XImage_funcs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage_funcs ) ) . create_image as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage_funcs ) , "::" , stringify ! ( create_image ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage_funcs ) ) . destroy_image as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage_funcs ) , "::" , stringify ! ( destroy_image ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage_funcs ) ) . get_pixel as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage_funcs ) , "::" , stringify ! ( get_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage_funcs ) ) . put_pixel as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage_funcs ) , "::" , stringify ! ( put_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage_funcs ) ) . sub_image as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage_funcs ) , "::" , stringify ! ( sub_image ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage_funcs ) ) . add_pixel as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage_funcs ) , "::" , stringify ! ( add_pixel ) ) ) ; } impl Clone for _XImage_funcs { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout__XImage ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XImage > ( ) , 136usize , concat ! ( "Size of: " , stringify ! ( _XImage ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XImage > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XImage ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . width as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . height as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . xoffset as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( xoffset ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . format as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( format ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . data as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . byte_order as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( byte_order ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . bitmap_unit as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( bitmap_unit ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . bitmap_bit_order as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( bitmap_bit_order ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . bitmap_pad as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( bitmap_pad ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . depth as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . bytes_per_line as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( bytes_per_line ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . bits_per_pixel as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( bits_per_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . red_mask as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( red_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . green_mask as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( green_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . blue_mask as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( blue_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . obdata as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( obdata ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XImage ) ) . f as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( _XImage ) , "::" , stringify ! ( f ) ) ) ; } impl Clone for _XImage { fn clone ( & self ) -> Self { * self } } pub type XImage = _XImage ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XWindowChanges { pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub border_width : :: std :: os :: raw :: c_int , pub sibling : Window , pub stack_mode : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XWindowChanges ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XWindowChanges > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( XWindowChanges ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XWindowChanges > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XWindowChanges ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowChanges ) ) . x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowChanges ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowChanges ) ) . y as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowChanges ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowChanges ) ) . width as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowChanges ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowChanges ) ) . height as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowChanges ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowChanges ) ) . border_width as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowChanges ) , "::" , stringify ! ( border_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowChanges ) ) . sibling as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowChanges ) , "::" , stringify ! ( sibling ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWindowChanges ) ) . stack_mode as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XWindowChanges ) , "::" , stringify ! ( stack_mode ) ) ) ; } impl Clone for XWindowChanges { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XColor { pub pixel : :: std :: os :: raw :: c_ulong , pub red : :: std :: os :: raw :: c_ushort , pub green : :: std :: os :: raw :: c_ushort , pub blue : :: std :: os :: raw :: c_ushort , pub flags : :: std :: os :: raw :: c_char , pub pad : :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_XColor ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XColor > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XColor ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XColor > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XColor ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColor ) ) . pixel as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XColor ) , "::" , stringify ! ( pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColor ) ) . red as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XColor ) , "::" , stringify ! ( red ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColor ) ) . green as * const _ as usize } , 10usize , concat ! ( "Alignment of field: " , stringify ! ( XColor ) , "::" , stringify ! ( green ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColor ) ) . blue as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XColor ) , "::" , stringify ! ( blue ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColor ) ) . flags as * const _ as usize } , 14usize , concat ! ( "Alignment of field: " , stringify ! ( XColor ) , "::" , stringify ! ( flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColor ) ) . pad as * const _ as usize } , 15usize , concat ! ( "Alignment of field: " , stringify ! ( XColor ) , "::" , stringify ! ( pad ) ) ) ; } impl Clone for XColor { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XSegment { pub x1 : :: std :: os :: raw :: c_short , pub y1 : :: std :: os :: raw :: c_short , pub x2 : :: std :: os :: raw :: c_short , pub y2 : :: std :: os :: raw :: c_short , } # [ test ] fn bindgen_test_layout_XSegment ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XSegment > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( XSegment ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XSegment > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( XSegment ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSegment ) ) . x1 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XSegment ) , "::" , stringify ! ( x1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSegment ) ) . y1 as * const _ as usize } , 2usize , concat ! ( "Alignment of field: " , stringify ! ( XSegment ) , "::" , stringify ! ( y1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSegment ) ) . x2 as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XSegment ) , "::" , stringify ! ( x2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSegment ) ) . y2 as * const _ as usize } , 6usize , concat ! ( "Alignment of field: " , stringify ! ( XSegment ) , "::" , stringify ! ( y2 ) ) ) ; } impl Clone for XSegment { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XPoint { pub x : :: std :: os :: raw :: c_short , pub y : :: std :: os :: raw :: c_short , } # [ test ] fn bindgen_test_layout_XPoint ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XPoint > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( XPoint ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XPoint > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( XPoint ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPoint ) ) . x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XPoint ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPoint ) ) . y as * const _ as usize } , 2usize , concat ! ( "Alignment of field: " , stringify ! ( XPoint ) , "::" , stringify ! ( y ) ) ) ; } impl Clone for XPoint { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XRectangle { pub x : :: std :: os :: raw :: c_short , pub y : :: std :: os :: raw :: c_short , pub width : :: std :: os :: raw :: c_ushort , pub height : :: std :: os :: raw :: c_ushort , } # [ test ] fn bindgen_test_layout_XRectangle ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XRectangle > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( XRectangle ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XRectangle > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( XRectangle ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XRectangle ) ) . x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XRectangle ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XRectangle ) ) . y as * const _ as usize } , 2usize , concat ! ( "Alignment of field: " , stringify ! ( XRectangle ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XRectangle ) ) . width as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XRectangle ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XRectangle ) ) . height as * const _ as usize } , 6usize , concat ! ( "Alignment of field: " , stringify ! ( XRectangle ) , "::" , stringify ! ( height ) ) ) ; } impl Clone for XRectangle { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XArc { pub x : :: std :: os :: raw :: c_short , pub y : :: std :: os :: raw :: c_short , pub width : :: std :: os :: raw :: c_ushort , pub height : :: std :: os :: raw :: c_ushort , pub angle1 : :: std :: os :: raw :: c_short , pub angle2 : :: std :: os :: raw :: c_short , } # [ test ] fn bindgen_test_layout_XArc ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XArc > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( XArc ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XArc > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( XArc ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XArc ) ) . x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XArc ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XArc ) ) . y as * const _ as usize } , 2usize , concat ! ( "Alignment of field: " , stringify ! ( XArc ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XArc ) ) . width as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XArc ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XArc ) ) . height as * const _ as usize } , 6usize , concat ! ( "Alignment of field: " , stringify ! ( XArc ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XArc ) ) . angle1 as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XArc ) , "::" , stringify ! ( angle1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XArc ) ) . angle2 as * const _ as usize } , 10usize , concat ! ( "Alignment of field: " , stringify ! ( XArc ) , "::" , stringify ! ( angle2 ) ) ) ; } impl Clone for XArc { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XKeyboardControl { pub key_click_percent : :: std :: os :: raw :: c_int , pub bell_percent : :: std :: os :: raw :: c_int , pub bell_pitch : :: std :: os :: raw :: c_int , pub bell_duration : :: std :: os :: raw :: c_int , pub led : :: std :: os :: raw :: c_int , pub led_mode : :: std :: os :: raw :: c_int , pub key : :: std :: os :: raw :: c_int , pub auto_repeat_mode : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XKeyboardControl ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XKeyboardControl > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( XKeyboardControl ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XKeyboardControl > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( XKeyboardControl ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . key_click_percent as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( key_click_percent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . bell_percent as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( bell_percent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . bell_pitch as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( bell_pitch ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . bell_duration as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( bell_duration ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . led as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( led ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . led_mode as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( led_mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . key as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( key ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardControl ) ) . auto_repeat_mode as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardControl ) , "::" , stringify ! ( auto_repeat_mode ) ) ) ; } impl Clone for XKeyboardControl { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XKeyboardState { pub key_click_percent : :: std :: os :: raw :: c_int , pub bell_percent : :: std :: os :: raw :: c_int , pub bell_pitch : :: std :: os :: raw :: c_uint , pub bell_duration : :: std :: os :: raw :: c_uint , pub led_mask : :: std :: os :: raw :: c_ulong , pub global_auto_repeat : :: std :: os :: raw :: c_int , pub auto_repeats : [ :: std :: os :: raw :: c_char ; 32usize ] , } # [ test ] fn bindgen_test_layout_XKeyboardState ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XKeyboardState > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( XKeyboardState ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XKeyboardState > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XKeyboardState ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardState ) ) . key_click_percent as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardState ) , "::" , stringify ! ( key_click_percent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardState ) ) . bell_percent as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardState ) , "::" , stringify ! ( bell_percent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardState ) ) . bell_pitch as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardState ) , "::" , stringify ! ( bell_pitch ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardState ) ) . bell_duration as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardState ) , "::" , stringify ! ( bell_duration ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardState ) ) . led_mask as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardState ) , "::" , stringify ! ( led_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardState ) ) . global_auto_repeat as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardState ) , "::" , stringify ! ( global_auto_repeat ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyboardState ) ) . auto_repeats as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyboardState ) , "::" , stringify ! ( auto_repeats ) ) ) ; } impl Clone for XKeyboardState { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XTimeCoord { pub time : Time , pub x : :: std :: os :: raw :: c_short , pub y : :: std :: os :: raw :: c_short , } # [ test ] fn bindgen_test_layout_XTimeCoord ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XTimeCoord > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XTimeCoord ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XTimeCoord > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XTimeCoord ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTimeCoord ) ) . time as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XTimeCoord ) , "::" , stringify ! ( time ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTimeCoord ) ) . x as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XTimeCoord ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTimeCoord ) ) . y as * const _ as usize } , 10usize , concat ! ( "Alignment of field: " , stringify ! ( XTimeCoord ) , "::" , stringify ! ( y ) ) ) ; } impl Clone for XTimeCoord { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XModifierKeymap { pub max_keypermod : :: std :: os :: raw :: c_int , pub modifiermap : * mut KeyCode , } # [ test ] fn bindgen_test_layout_XModifierKeymap ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XModifierKeymap > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XModifierKeymap ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XModifierKeymap > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XModifierKeymap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XModifierKeymap ) ) . max_keypermod as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XModifierKeymap ) , "::" , stringify ! ( max_keypermod ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XModifierKeymap ) ) . modifiermap as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XModifierKeymap ) , "::" , stringify ! ( modifiermap ) ) ) ; } impl Clone for XModifierKeymap { fn clone ( & self ) -> Self { * self } } pub type Display = _XDisplay ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XPrivate { _unused : [ u8 ; 0 ] } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XrmHashBucketRec { _unused : [ u8 ; 0 ] } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _bindgen_ty_1 { pub ext_data : * mut XExtData , pub private1 : * mut _XPrivate , pub fd : :: std :: os :: raw :: c_int , pub private2 : :: std :: os :: raw :: c_int , pub proto_major_version : :: std :: os :: raw :: c_int , pub proto_minor_version : :: std :: os :: raw :: c_int , pub vendor : * mut :: std :: os :: raw :: c_char , pub private3 : XID , pub private4 : XID , pub private5 : XID , pub private6 : :: std :: os :: raw :: c_int , pub resource_alloc : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XDisplay ) -> XID > , pub byte_order : :: std :: os :: raw :: c_int , pub bitmap_unit : :: std :: os :: raw :: c_int , pub bitmap_pad : :: std :: os :: raw :: c_int , pub bitmap_bit_order : :: std :: os :: raw :: c_int , pub nformats : :: std :: os :: raw :: c_int , pub pixmap_format : * mut ScreenFormat , pub private8 : :: std :: os :: raw :: c_int , pub release : :: std :: os :: raw :: c_int , pub private9 : * mut _XPrivate , pub private10 : * mut _XPrivate , pub qlen : :: std :: os :: raw :: c_int , pub last_request_read : :: std :: os :: raw :: c_ulong , pub request : :: std :: os :: raw :: c_ulong , pub private11 : XPointer , pub private12 : XPointer , pub private13 : XPointer , pub private14 : XPointer , pub max_request_size : :: std :: os :: raw :: c_uint , pub db : * mut _XrmHashBucketRec , pub private15 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut _XDisplay ) -> :: std :: os :: raw :: c_int > , pub display_name : * mut :: std :: os :: raw :: c_char , pub default_screen : :: std :: os :: raw :: c_int , pub nscreens : :: std :: os :: raw :: c_int , pub screens : * mut Screen , pub motion_buffer : :: std :: os :: raw :: c_ulong , pub private16 : :: std :: os :: raw :: c_ulong , pub min_keycode : :: std :: os :: raw :: c_int , pub max_keycode : :: std :: os :: raw :: c_int , pub private17 : XPointer , pub private18 : XPointer , pub private19 : :: std :: os :: raw :: c_int , pub xdefaults : * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _bindgen_ty_1 > ( ) , 296usize , concat ! ( "Size of: " , stringify ! ( _bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . ext_data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( ext_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private1 as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . fd as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( fd ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private2 as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . proto_major_version as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( proto_major_version ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . proto_minor_version as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( proto_minor_version ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . vendor as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( vendor ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private3 as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private4 as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private5 as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private6 as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . resource_alloc as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( resource_alloc ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . byte_order as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( byte_order ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . bitmap_unit as * const _ as usize } , 84usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( bitmap_unit ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . bitmap_pad as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( bitmap_pad ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . bitmap_bit_order as * const _ as usize } , 92usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( bitmap_bit_order ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . nformats as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( nformats ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . pixmap_format as * const _ as usize } , 104usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( pixmap_format ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private8 as * const _ as usize } , 112usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . release as * const _ as usize } , 116usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( release ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private9 as * const _ as usize } , 120usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private9 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private10 as * const _ as usize } , 128usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private10 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . qlen as * const _ as usize } , 136usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( qlen ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . last_request_read as * const _ as usize } , 144usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( last_request_read ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . request as * const _ as usize } , 152usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( request ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private11 as * const _ as usize } , 160usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private11 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private12 as * const _ as usize } , 168usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private12 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private13 as * const _ as usize } , 176usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private13 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private14 as * const _ as usize } , 184usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private14 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . max_request_size as * const _ as usize } , 192usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( max_request_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . db as * const _ as usize } , 200usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( db ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private15 as * const _ as usize } , 208usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private15 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . display_name as * const _ as usize } , 216usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( display_name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . default_screen as * const _ as usize } , 224usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( default_screen ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . nscreens as * const _ as usize } , 228usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( nscreens ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . screens as * const _ as usize } , 232usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( screens ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . motion_buffer as * const _ as usize } , 240usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( motion_buffer ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private16 as * const _ as usize } , 248usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private16 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . min_keycode as * const _ as usize } , 256usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( min_keycode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . max_keycode as * const _ as usize } , 260usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( max_keycode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private17 as * const _ as usize } , 264usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private17 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private18 as * const _ as usize } , 272usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private18 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . private19 as * const _ as usize } , 280usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( private19 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _bindgen_ty_1 ) ) . xdefaults as * const _ as usize } , 288usize , concat ! ( "Alignment of field: " , stringify ! ( _bindgen_ty_1 ) , "::" , stringify ! ( xdefaults ) ) ) ; } impl Clone for _bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } pub type _XPrivDisplay = * mut _bindgen_ty_1 ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XKeyEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub root : Window , pub subwindow : Window , pub time : Time , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub x_root : :: std :: os :: raw :: c_int , pub y_root : :: std :: os :: raw :: c_int , pub state : :: std :: os :: raw :: c_uint , pub keycode : :: std :: os :: raw :: c_uint , pub same_screen : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XKeyEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XKeyEvent > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( XKeyEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XKeyEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XKeyEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . root as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . subwindow as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( subwindow ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . time as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( time ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . x as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . y as * const _ as usize } , 68usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . x_root as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( x_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . y_root as * const _ as usize } , 76usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( y_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . state as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( state ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . keycode as * const _ as usize } , 84usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( keycode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeyEvent ) ) . same_screen as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XKeyEvent ) , "::" , stringify ! ( same_screen ) ) ) ; } impl Clone for XKeyEvent { fn clone ( & self ) -> Self { * self } } pub type XKeyPressedEvent = XKeyEvent ; pub type XKeyReleasedEvent = XKeyEvent ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XButtonEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub root : Window , pub subwindow : Window , pub time : Time , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub x_root : :: std :: os :: raw :: c_int , pub y_root : :: std :: os :: raw :: c_int , pub state : :: std :: os :: raw :: c_uint , pub button : :: std :: os :: raw :: c_uint , pub same_screen : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XButtonEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XButtonEvent > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( XButtonEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XButtonEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XButtonEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . root as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . subwindow as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( subwindow ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . time as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( time ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . x as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . y as * const _ as usize } , 68usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . x_root as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( x_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . y_root as * const _ as usize } , 76usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( y_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . state as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( state ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . button as * const _ as usize } , 84usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( button ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XButtonEvent ) ) . same_screen as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XButtonEvent ) , "::" , stringify ! ( same_screen ) ) ) ; } impl Clone for XButtonEvent { fn clone ( & self ) -> Self { * self } } pub type XButtonPressedEvent = XButtonEvent ; pub type XButtonReleasedEvent = XButtonEvent ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XMotionEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub root : Window , pub subwindow : Window , pub time : Time , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub x_root : :: std :: os :: raw :: c_int , pub y_root : :: std :: os :: raw :: c_int , pub state : :: std :: os :: raw :: c_uint , pub is_hint : :: std :: os :: raw :: c_char , pub same_screen : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XMotionEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XMotionEvent > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( XMotionEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XMotionEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XMotionEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . root as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . subwindow as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( subwindow ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . time as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( time ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . x as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . y as * const _ as usize } , 68usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . x_root as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( x_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . y_root as * const _ as usize } , 76usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( y_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . state as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( state ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . is_hint as * const _ as usize } , 84usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( is_hint ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMotionEvent ) ) . same_screen as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XMotionEvent ) , "::" , stringify ! ( same_screen ) ) ) ; } impl Clone for XMotionEvent { fn clone ( & self ) -> Self { * self } } pub type XPointerMovedEvent = XMotionEvent ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XCrossingEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub root : Window , pub subwindow : Window , pub time : Time , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub x_root : :: std :: os :: raw :: c_int , pub y_root : :: std :: os :: raw :: c_int , pub mode : :: std :: os :: raw :: c_int , pub detail : :: std :: os :: raw :: c_int , pub same_screen : :: std :: os :: raw :: c_int , pub focus : :: std :: os :: raw :: c_int , pub state : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout_XCrossingEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XCrossingEvent > ( ) , 104usize , concat ! ( "Size of: " , stringify ! ( XCrossingEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XCrossingEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XCrossingEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . root as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . subwindow as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( subwindow ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . time as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( time ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . x as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . y as * const _ as usize } , 68usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . x_root as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( x_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . y_root as * const _ as usize } , 76usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( y_root ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . mode as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . detail as * const _ as usize } , 84usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( detail ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . same_screen as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( same_screen ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . focus as * const _ as usize } , 92usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( focus ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCrossingEvent ) ) . state as * const _ as usize } , 96usize , concat ! ( "Alignment of field: " , stringify ! ( XCrossingEvent ) , "::" , stringify ! ( state ) ) ) ; } impl Clone for XCrossingEvent { fn clone ( & self ) -> Self { * self } } pub type XEnterWindowEvent = XCrossingEvent ; pub type XLeaveWindowEvent = XCrossingEvent ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XFocusChangeEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub mode : :: std :: os :: raw :: c_int , pub detail : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XFocusChangeEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XFocusChangeEvent > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( XFocusChangeEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XFocusChangeEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XFocusChangeEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFocusChangeEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XFocusChangeEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFocusChangeEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XFocusChangeEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFocusChangeEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XFocusChangeEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFocusChangeEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XFocusChangeEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFocusChangeEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XFocusChangeEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFocusChangeEvent ) ) . mode as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XFocusChangeEvent ) , "::" , stringify ! ( mode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFocusChangeEvent ) ) . detail as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XFocusChangeEvent ) , "::" , stringify ! ( detail ) ) ) ; } impl Clone for XFocusChangeEvent { fn clone ( & self ) -> Self { * self } } pub type XFocusInEvent = XFocusChangeEvent ; pub type XFocusOutEvent = XFocusChangeEvent ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XKeymapEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub key_vector : [ :: std :: os :: raw :: c_char ; 32usize ] , } # [ test ] fn bindgen_test_layout_XKeymapEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XKeymapEvent > ( ) , 72usize , concat ! ( "Size of: " , stringify ! ( XKeymapEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XKeymapEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XKeymapEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeymapEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XKeymapEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeymapEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XKeymapEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeymapEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XKeymapEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeymapEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XKeymapEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeymapEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XKeymapEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XKeymapEvent ) ) . key_vector as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XKeymapEvent ) , "::" , stringify ! ( key_vector ) ) ) ; } impl Clone for XKeymapEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XExposeEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub count : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XExposeEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XExposeEvent > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( XExposeEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XExposeEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XExposeEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . x as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . y as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . width as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . height as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XExposeEvent ) ) . count as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XExposeEvent ) , "::" , stringify ! ( count ) ) ) ; } impl Clone for XExposeEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XGraphicsExposeEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub drawable : Drawable , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub count : :: std :: os :: raw :: c_int , pub major_code : :: std :: os :: raw :: c_int , pub minor_code : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XGraphicsExposeEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XGraphicsExposeEvent > ( ) , 72usize , concat ! ( "Size of: " , stringify ! ( XGraphicsExposeEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XGraphicsExposeEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XGraphicsExposeEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . drawable as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( drawable ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . x as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . y as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . width as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . height as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . count as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( count ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . major_code as * const _ as usize } , 60usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( major_code ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGraphicsExposeEvent ) ) . minor_code as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XGraphicsExposeEvent ) , "::" , stringify ! ( minor_code ) ) ) ; } impl Clone for XGraphicsExposeEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XNoExposeEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub drawable : Drawable , pub major_code : :: std :: os :: raw :: c_int , pub minor_code : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XNoExposeEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XNoExposeEvent > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( XNoExposeEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XNoExposeEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XNoExposeEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XNoExposeEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XNoExposeEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XNoExposeEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XNoExposeEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XNoExposeEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XNoExposeEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XNoExposeEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XNoExposeEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XNoExposeEvent ) ) . drawable as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XNoExposeEvent ) , "::" , stringify ! ( drawable ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XNoExposeEvent ) ) . major_code as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XNoExposeEvent ) , "::" , stringify ! ( major_code ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XNoExposeEvent ) ) . minor_code as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XNoExposeEvent ) , "::" , stringify ! ( minor_code ) ) ) ; } impl Clone for XNoExposeEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XVisibilityEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub state : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XVisibilityEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XVisibilityEvent > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( XVisibilityEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XVisibilityEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XVisibilityEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisibilityEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XVisibilityEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisibilityEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XVisibilityEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisibilityEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XVisibilityEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisibilityEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XVisibilityEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisibilityEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XVisibilityEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisibilityEvent ) ) . state as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XVisibilityEvent ) , "::" , stringify ! ( state ) ) ) ; } impl Clone for XVisibilityEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XCreateWindowEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub parent : Window , pub window : Window , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub border_width : :: std :: os :: raw :: c_int , pub override_redirect : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XCreateWindowEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XCreateWindowEvent > ( ) , 72usize , concat ! ( "Size of: " , stringify ! ( XCreateWindowEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XCreateWindowEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XCreateWindowEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . parent as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( parent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . x as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . y as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . width as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . height as * const _ as usize } , 60usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . border_width as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( border_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCreateWindowEvent ) ) . override_redirect as * const _ as usize } , 68usize , concat ! ( "Alignment of field: " , stringify ! ( XCreateWindowEvent ) , "::" , stringify ! ( override_redirect ) ) ) ; } impl Clone for XCreateWindowEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XDestroyWindowEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub event : Window , pub window : Window , } # [ test ] fn bindgen_test_layout_XDestroyWindowEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XDestroyWindowEvent > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( XDestroyWindowEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XDestroyWindowEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XDestroyWindowEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XDestroyWindowEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XDestroyWindowEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XDestroyWindowEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XDestroyWindowEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XDestroyWindowEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XDestroyWindowEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XDestroyWindowEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XDestroyWindowEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XDestroyWindowEvent ) ) . event as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XDestroyWindowEvent ) , "::" , stringify ! ( event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XDestroyWindowEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XDestroyWindowEvent ) , "::" , stringify ! ( window ) ) ) ; } impl Clone for XDestroyWindowEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XUnmapEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub event : Window , pub window : Window , pub from_configure : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XUnmapEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XUnmapEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XUnmapEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XUnmapEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XUnmapEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XUnmapEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XUnmapEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XUnmapEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XUnmapEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XUnmapEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XUnmapEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XUnmapEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XUnmapEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XUnmapEvent ) ) . event as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XUnmapEvent ) , "::" , stringify ! ( event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XUnmapEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XUnmapEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XUnmapEvent ) ) . from_configure as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XUnmapEvent ) , "::" , stringify ! ( from_configure ) ) ) ; } impl Clone for XUnmapEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XMapEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub event : Window , pub window : Window , pub override_redirect : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XMapEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XMapEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XMapEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XMapEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XMapEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XMapEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XMapEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XMapEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XMapEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapEvent ) ) . event as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XMapEvent ) , "::" , stringify ! ( event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XMapEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapEvent ) ) . override_redirect as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XMapEvent ) , "::" , stringify ! ( override_redirect ) ) ) ; } impl Clone for XMapEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XMapRequestEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub parent : Window , pub window : Window , } # [ test ] fn bindgen_test_layout_XMapRequestEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XMapRequestEvent > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( XMapRequestEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XMapRequestEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XMapRequestEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapRequestEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XMapRequestEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapRequestEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XMapRequestEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapRequestEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XMapRequestEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapRequestEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XMapRequestEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapRequestEvent ) ) . parent as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XMapRequestEvent ) , "::" , stringify ! ( parent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMapRequestEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XMapRequestEvent ) , "::" , stringify ! ( window ) ) ) ; } impl Clone for XMapRequestEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XReparentEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub event : Window , pub window : Window , pub parent : Window , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub override_redirect : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XReparentEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XReparentEvent > ( ) , 72usize , concat ! ( "Size of: " , stringify ! ( XReparentEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XReparentEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XReparentEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . event as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . parent as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( parent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . x as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . y as * const _ as usize } , 60usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XReparentEvent ) ) . override_redirect as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XReparentEvent ) , "::" , stringify ! ( override_redirect ) ) ) ; } impl Clone for XReparentEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XConfigureEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub event : Window , pub window : Window , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub border_width : :: std :: os :: raw :: c_int , pub above : Window , pub override_redirect : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XConfigureEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XConfigureEvent > ( ) , 88usize , concat ! ( "Size of: " , stringify ! ( XConfigureEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XConfigureEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XConfigureEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . event as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . x as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . y as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . width as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . height as * const _ as usize } , 60usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . border_width as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( border_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . above as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( above ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureEvent ) ) . override_redirect as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureEvent ) , "::" , stringify ! ( override_redirect ) ) ) ; } impl Clone for XConfigureEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XGravityEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub event : Window , pub window : Window , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XGravityEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XGravityEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XGravityEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XGravityEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XGravityEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . event as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . x as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGravityEvent ) ) . y as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XGravityEvent ) , "::" , stringify ! ( y ) ) ) ; } impl Clone for XGravityEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XResizeRequestEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XResizeRequestEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XResizeRequestEvent > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( XResizeRequestEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XResizeRequestEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XResizeRequestEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XResizeRequestEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XResizeRequestEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XResizeRequestEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XResizeRequestEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XResizeRequestEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XResizeRequestEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XResizeRequestEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XResizeRequestEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XResizeRequestEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XResizeRequestEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XResizeRequestEvent ) ) . width as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XResizeRequestEvent ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XResizeRequestEvent ) ) . height as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XResizeRequestEvent ) , "::" , stringify ! ( height ) ) ) ; } impl Clone for XResizeRequestEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XConfigureRequestEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub parent : Window , pub window : Window , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub border_width : :: std :: os :: raw :: c_int , pub above : Window , pub detail : :: std :: os :: raw :: c_int , pub value_mask : :: std :: os :: raw :: c_ulong , } # [ test ] fn bindgen_test_layout_XConfigureRequestEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XConfigureRequestEvent > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( XConfigureRequestEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XConfigureRequestEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XConfigureRequestEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . parent as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( parent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . x as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . y as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . width as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . height as * const _ as usize } , 60usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . border_width as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( border_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . above as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( above ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . detail as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( detail ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XConfigureRequestEvent ) ) . value_mask as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XConfigureRequestEvent ) , "::" , stringify ! ( value_mask ) ) ) ; } impl Clone for XConfigureRequestEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XCirculateEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub event : Window , pub window : Window , pub place : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XCirculateEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XCirculateEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XCirculateEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XCirculateEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XCirculateEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateEvent ) ) . event as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateEvent ) , "::" , stringify ! ( event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateEvent ) ) . place as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateEvent ) , "::" , stringify ! ( place ) ) ) ; } impl Clone for XCirculateEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XCirculateRequestEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub parent : Window , pub window : Window , pub place : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XCirculateRequestEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XCirculateRequestEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XCirculateRequestEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XCirculateRequestEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XCirculateRequestEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateRequestEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateRequestEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateRequestEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateRequestEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateRequestEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateRequestEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateRequestEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateRequestEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateRequestEvent ) ) . parent as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateRequestEvent ) , "::" , stringify ! ( parent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateRequestEvent ) ) . window as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateRequestEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCirculateRequestEvent ) ) . place as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XCirculateRequestEvent ) , "::" , stringify ! ( place ) ) ) ; } impl Clone for XCirculateRequestEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XPropertyEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub atom : Atom , pub time : Time , pub state : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XPropertyEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XPropertyEvent > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( XPropertyEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XPropertyEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XPropertyEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . atom as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( atom ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . time as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( time ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XPropertyEvent ) ) . state as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XPropertyEvent ) , "::" , stringify ! ( state ) ) ) ; } impl Clone for XPropertyEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XSelectionClearEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub selection : Atom , pub time : Time , } # [ test ] fn bindgen_test_layout_XSelectionClearEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XSelectionClearEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XSelectionClearEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XSelectionClearEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XSelectionClearEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionClearEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionClearEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionClearEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionClearEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionClearEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionClearEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionClearEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionClearEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionClearEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionClearEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionClearEvent ) ) . selection as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionClearEvent ) , "::" , stringify ! ( selection ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionClearEvent ) ) . time as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionClearEvent ) , "::" , stringify ! ( time ) ) ) ; } impl Clone for XSelectionClearEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XSelectionRequestEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub owner : Window , pub requestor : Window , pub selection : Atom , pub target : Atom , pub property : Atom , pub time : Time , } # [ test ] fn bindgen_test_layout_XSelectionRequestEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XSelectionRequestEvent > ( ) , 80usize , concat ! ( "Size of: " , stringify ! ( XSelectionRequestEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XSelectionRequestEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XSelectionRequestEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . owner as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( owner ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . requestor as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( requestor ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . selection as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( selection ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . target as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( target ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . property as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( property ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionRequestEvent ) ) . time as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionRequestEvent ) , "::" , stringify ! ( time ) ) ) ; } impl Clone for XSelectionRequestEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XSelectionEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub requestor : Window , pub selection : Atom , pub target : Atom , pub property : Atom , pub time : Time , } # [ test ] fn bindgen_test_layout_XSelectionEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XSelectionEvent > ( ) , 72usize , concat ! ( "Size of: " , stringify ! ( XSelectionEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XSelectionEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XSelectionEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . requestor as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( requestor ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . selection as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( selection ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . target as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( target ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . property as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( property ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSelectionEvent ) ) . time as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XSelectionEvent ) , "::" , stringify ! ( time ) ) ) ; } impl Clone for XSelectionEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XColormapEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub colormap : Colormap , pub new : :: std :: os :: raw :: c_int , pub state : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XColormapEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XColormapEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XColormapEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XColormapEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XColormapEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . colormap as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( colormap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . new as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( new ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XColormapEvent ) ) . state as * const _ as usize } , 52usize , concat ! ( "Alignment of field: " , stringify ! ( XColormapEvent ) , "::" , stringify ! ( state ) ) ) ; } impl Clone for XColormapEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub struct XClientMessageEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub message_type : Atom , pub format : :: std :: os :: raw :: c_int , pub data : XClientMessageEvent__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union XClientMessageEvent__bindgen_ty_1 { pub b : [ :: std :: os :: raw :: c_char ; 20usize ] , pub s : [ :: std :: os :: raw :: c_short ; 10usize ] , pub l : [ :: std :: os :: raw :: c_long ; 5usize ] , _bindgen_union_align : [ u64 ; 5usize ] , } # [ test ] fn bindgen_test_layout_XClientMessageEvent__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XClientMessageEvent__bindgen_ty_1 > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( XClientMessageEvent__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XClientMessageEvent__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XClientMessageEvent__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent__bindgen_ty_1 ) ) . b as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent__bindgen_ty_1 ) , "::" , stringify ! ( b ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent__bindgen_ty_1 ) ) . s as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent__bindgen_ty_1 ) , "::" , stringify ! ( s ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent__bindgen_ty_1 ) ) . l as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent__bindgen_ty_1 ) , "::" , stringify ! ( l ) ) ) ; } impl Clone for XClientMessageEvent__bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout_XClientMessageEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XClientMessageEvent > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( XClientMessageEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XClientMessageEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XClientMessageEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . message_type as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( message_type ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . format as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( format ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClientMessageEvent ) ) . data as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XClientMessageEvent ) , "::" , stringify ! ( data ) ) ) ; } impl Clone for XClientMessageEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XMappingEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , pub request : :: std :: os :: raw :: c_int , pub first_keycode : :: std :: os :: raw :: c_int , pub count : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XMappingEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XMappingEvent > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XMappingEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XMappingEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XMappingEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . request as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( request ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . first_keycode as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( first_keycode ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XMappingEvent ) ) . count as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XMappingEvent ) , "::" , stringify ! ( count ) ) ) ; } impl Clone for XMappingEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XErrorEvent { pub type_ : :: std :: os :: raw :: c_int , pub display : * mut Display , pub resourceid : XID , pub serial : :: std :: os :: raw :: c_ulong , pub error_code : :: std :: os :: raw :: c_uchar , pub request_code : :: std :: os :: raw :: c_uchar , pub minor_code : :: std :: os :: raw :: c_uchar , } # [ test ] fn bindgen_test_layout_XErrorEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XErrorEvent > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( XErrorEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XErrorEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XErrorEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XErrorEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XErrorEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XErrorEvent ) ) . display as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XErrorEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XErrorEvent ) ) . resourceid as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XErrorEvent ) , "::" , stringify ! ( resourceid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XErrorEvent ) ) . serial as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XErrorEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XErrorEvent ) ) . error_code as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XErrorEvent ) , "::" , stringify ! ( error_code ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XErrorEvent ) ) . request_code as * const _ as usize } , 33usize , concat ! ( "Alignment of field: " , stringify ! ( XErrorEvent ) , "::" , stringify ! ( request_code ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XErrorEvent ) ) . minor_code as * const _ as usize } , 34usize , concat ! ( "Alignment of field: " , stringify ! ( XErrorEvent ) , "::" , stringify ! ( minor_code ) ) ) ; } impl Clone for XErrorEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XAnyEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub window : Window , } # [ test ] fn bindgen_test_layout_XAnyEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XAnyEvent > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( XAnyEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XAnyEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XAnyEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XAnyEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XAnyEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XAnyEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XAnyEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XAnyEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XAnyEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XAnyEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XAnyEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XAnyEvent ) ) . window as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XAnyEvent ) , "::" , stringify ! ( window ) ) ) ; } impl Clone for XAnyEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XGenericEvent { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub extension : :: std :: os :: raw :: c_int , pub evtype : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XGenericEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XGenericEvent > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( XGenericEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XGenericEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XGenericEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEvent ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEvent ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEvent ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEvent ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEvent ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEvent ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEvent ) ) . extension as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEvent ) , "::" , stringify ! ( extension ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEvent ) ) . evtype as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEvent ) , "::" , stringify ! ( evtype ) ) ) ; } impl Clone for XGenericEvent { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XGenericEventCookie { pub type_ : :: std :: os :: raw :: c_int , pub serial : :: std :: os :: raw :: c_ulong , pub send_event : :: std :: os :: raw :: c_int , pub display : * mut Display , pub extension : :: std :: os :: raw :: c_int , pub evtype : :: std :: os :: raw :: c_int , pub cookie : :: std :: os :: raw :: c_uint , pub data : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_XGenericEventCookie ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XGenericEventCookie > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XGenericEventCookie ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XGenericEventCookie > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XGenericEventCookie ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . serial as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( serial ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . send_event as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( send_event ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . display as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . extension as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( extension ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . evtype as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( evtype ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . cookie as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( cookie ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XGenericEventCookie ) ) . data as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XGenericEventCookie ) , "::" , stringify ! ( data ) ) ) ; } impl Clone for XGenericEventCookie { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union _XEvent { pub type_ : :: std :: os :: raw :: c_int , pub xany : XAnyEvent , pub xkey : XKeyEvent , pub xbutton : XButtonEvent , pub xmotion : XMotionEvent , pub xcrossing : XCrossingEvent , pub xfocus : XFocusChangeEvent , pub xexpose : XExposeEvent , pub xgraphicsexpose : XGraphicsExposeEvent , pub xnoexpose : XNoExposeEvent , pub xvisibility : XVisibilityEvent , pub xcreatewindow : XCreateWindowEvent , pub xdestroywindow : XDestroyWindowEvent , pub xunmap : XUnmapEvent , pub xmap : XMapEvent , pub xmaprequest : XMapRequestEvent , pub xreparent : XReparentEvent , pub xconfigure : XConfigureEvent , pub xgravity : XGravityEvent , pub xresizerequest : XResizeRequestEvent , pub xconfigurerequest : XConfigureRequestEvent , pub xcirculate : XCirculateEvent , pub xcirculaterequest : XCirculateRequestEvent , pub xproperty : XPropertyEvent , pub xselectionclear : XSelectionClearEvent , pub xselectionrequest : XSelectionRequestEvent , pub xselection : XSelectionEvent , pub xcolormap : XColormapEvent , pub xclient : XClientMessageEvent , pub xmapping : XMappingEvent , pub xerror : XErrorEvent , pub xkeymap : XKeymapEvent , pub xgeneric : XGenericEvent , pub xcookie : XGenericEventCookie , pub pad : [ :: std :: os :: raw :: c_long ; 24usize ] , _bindgen_union_align : [ u64 ; 24usize ] , } # [ test ] fn bindgen_test_layout__XEvent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XEvent > ( ) , 192usize , concat ! ( "Size of: " , stringify ! ( _XEvent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XEvent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XEvent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xany as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xany ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xkey as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xkey ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xbutton as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xbutton ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xmotion as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xmotion ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xcrossing as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xcrossing ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xfocus as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xfocus ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xexpose as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xexpose ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xgraphicsexpose as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xgraphicsexpose ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xnoexpose as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xnoexpose ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xvisibility as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xvisibility ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xcreatewindow as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xcreatewindow ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xdestroywindow as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xdestroywindow ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xunmap as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xunmap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xmap as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xmap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xmaprequest as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xmaprequest ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xreparent as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xreparent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xconfigure as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xconfigure ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xgravity as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xgravity ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xresizerequest as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xresizerequest ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xconfigurerequest as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xconfigurerequest ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xcirculate as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xcirculate ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xcirculaterequest as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xcirculaterequest ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xproperty as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xproperty ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xselectionclear as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xselectionclear ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xselectionrequest as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xselectionrequest ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xselection as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xselection ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xcolormap as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xcolormap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xclient as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xclient ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xmapping as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xmapping ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xerror as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xerror ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xkeymap as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xkeymap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xgeneric as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xgeneric ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . xcookie as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( xcookie ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XEvent ) ) . pad as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XEvent ) , "::" , stringify ! ( pad ) ) ) ; } impl Clone for _XEvent { fn clone ( & self ) -> Self { * self } } pub type XEvent = _XEvent ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XCharStruct { pub lbearing : :: std :: os :: raw :: c_short , pub rbearing : :: std :: os :: raw :: c_short , pub width : :: std :: os :: raw :: c_short , pub ascent : :: std :: os :: raw :: c_short , pub descent : :: std :: os :: raw :: c_short , pub attributes : :: std :: os :: raw :: c_ushort , } # [ test ] fn bindgen_test_layout_XCharStruct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XCharStruct > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( XCharStruct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XCharStruct > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( XCharStruct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCharStruct ) ) . lbearing as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XCharStruct ) , "::" , stringify ! ( lbearing ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCharStruct ) ) . rbearing as * const _ as usize } , 2usize , concat ! ( "Alignment of field: " , stringify ! ( XCharStruct ) , "::" , stringify ! ( rbearing ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCharStruct ) ) . width as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XCharStruct ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCharStruct ) ) . ascent as * const _ as usize } , 6usize , concat ! ( "Alignment of field: " , stringify ! ( XCharStruct ) , "::" , stringify ! ( ascent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCharStruct ) ) . descent as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XCharStruct ) , "::" , stringify ! ( descent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XCharStruct ) ) . attributes as * const _ as usize } , 10usize , concat ! ( "Alignment of field: " , stringify ! ( XCharStruct ) , "::" , stringify ! ( attributes ) ) ) ; } impl Clone for XCharStruct { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XFontProp { pub name : Atom , pub card32 : :: std :: os :: raw :: c_ulong , } # [ test ] fn bindgen_test_layout_XFontProp ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XFontProp > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XFontProp ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XFontProp > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XFontProp ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontProp ) ) . name as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XFontProp ) , "::" , stringify ! ( name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontProp ) ) . card32 as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XFontProp ) , "::" , stringify ! ( card32 ) ) ) ; } impl Clone for XFontProp { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XFontStruct { pub ext_data : * mut XExtData , pub fid : Font , pub direction : :: std :: os :: raw :: c_uint , pub min_char_or_byte2 : :: std :: os :: raw :: c_uint , pub max_char_or_byte2 : :: std :: os :: raw :: c_uint , pub min_byte1 : :: std :: os :: raw :: c_uint , pub max_byte1 : :: std :: os :: raw :: c_uint , pub all_chars_exist : :: std :: os :: raw :: c_int , pub default_char : :: std :: os :: raw :: c_uint , pub n_properties : :: std :: os :: raw :: c_int , pub properties : * mut XFontProp , pub min_bounds : XCharStruct , pub max_bounds : XCharStruct , pub per_char : * mut XCharStruct , pub ascent : :: std :: os :: raw :: c_int , pub descent : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XFontStruct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XFontStruct > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( XFontStruct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XFontStruct > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XFontStruct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . ext_data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( ext_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . fid as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( fid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . direction as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( direction ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . min_char_or_byte2 as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( min_char_or_byte2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . max_char_or_byte2 as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( max_char_or_byte2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . min_byte1 as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( min_byte1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . max_byte1 as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( max_byte1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . all_chars_exist as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( all_chars_exist ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . default_char as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( default_char ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . n_properties as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( n_properties ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . properties as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( properties ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . min_bounds as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( min_bounds ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . max_bounds as * const _ as usize } , 68usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( max_bounds ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . per_char as * const _ as usize } , 80usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( per_char ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . ascent as * const _ as usize } , 88usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( ascent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontStruct ) ) . descent as * const _ as usize } , 92usize , concat ! ( "Alignment of field: " , stringify ! ( XFontStruct ) , "::" , stringify ! ( descent ) ) ) ; } impl Clone for XFontStruct { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XTextItem { pub chars : * mut :: std :: os :: raw :: c_char , pub nchars : :: std :: os :: raw :: c_int , pub delta : :: std :: os :: raw :: c_int , pub font : Font , } # [ test ] fn bindgen_test_layout_XTextItem ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XTextItem > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( XTextItem ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XTextItem > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XTextItem ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem ) ) . chars as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem ) , "::" , stringify ! ( chars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem ) ) . nchars as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem ) , "::" , stringify ! ( nchars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem ) ) . delta as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem ) , "::" , stringify ! ( delta ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem ) ) . font as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem ) , "::" , stringify ! ( font ) ) ) ; } impl Clone for XTextItem { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XChar2b { pub byte1 : :: std :: os :: raw :: c_uchar , pub byte2 : :: std :: os :: raw :: c_uchar , } # [ test ] fn bindgen_test_layout_XChar2b ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XChar2b > ( ) , 2usize , concat ! ( "Size of: " , stringify ! ( XChar2b ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XChar2b > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( XChar2b ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XChar2b ) ) . byte1 as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XChar2b ) , "::" , stringify ! ( byte1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XChar2b ) ) . byte2 as * const _ as usize } , 1usize , concat ! ( "Alignment of field: " , stringify ! ( XChar2b ) , "::" , stringify ! ( byte2 ) ) ) ; } impl Clone for XChar2b { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XTextItem16 { pub chars : * mut XChar2b , pub nchars : :: std :: os :: raw :: c_int , pub delta : :: std :: os :: raw :: c_int , pub font : Font , } # [ test ] fn bindgen_test_layout_XTextItem16 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XTextItem16 > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( XTextItem16 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XTextItem16 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XTextItem16 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem16 ) ) . chars as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem16 ) , "::" , stringify ! ( chars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem16 ) ) . nchars as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem16 ) , "::" , stringify ! ( nchars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem16 ) ) . delta as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem16 ) , "::" , stringify ! ( delta ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextItem16 ) ) . font as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XTextItem16 ) , "::" , stringify ! ( font ) ) ) ; } impl Clone for XTextItem16 { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union XEDataObject { pub display : * mut Display , pub gc : GC , pub visual : * mut Visual , pub screen : * mut Screen , pub pixmap_format : * mut ScreenFormat , pub font : * mut XFontStruct , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_XEDataObject ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XEDataObject > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( XEDataObject ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XEDataObject > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XEDataObject ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XEDataObject ) ) . display as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XEDataObject ) , "::" , stringify ! ( display ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XEDataObject ) ) . gc as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XEDataObject ) , "::" , stringify ! ( gc ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XEDataObject ) ) . visual as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XEDataObject ) , "::" , stringify ! ( visual ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XEDataObject ) ) . screen as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XEDataObject ) , "::" , stringify ! ( screen ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XEDataObject ) ) . pixmap_format as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XEDataObject ) , "::" , stringify ! ( pixmap_format ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XEDataObject ) ) . font as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XEDataObject ) , "::" , stringify ! ( font ) ) ) ; } impl Clone for XEDataObject { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XFontSetExtents { pub max_ink_extent : XRectangle , pub max_logical_extent : XRectangle , } # [ test ] fn bindgen_test_layout_XFontSetExtents ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XFontSetExtents > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XFontSetExtents ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XFontSetExtents > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( XFontSetExtents ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontSetExtents ) ) . max_ink_extent as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XFontSetExtents ) , "::" , stringify ! ( max_ink_extent ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XFontSetExtents ) ) . max_logical_extent as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XFontSetExtents ) , "::" , stringify ! ( max_logical_extent ) ) ) ; } impl Clone for XFontSetExtents { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XOM { _unused : [ u8 ; 0 ] } pub type XOM = * mut _XOM ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XOC { _unused : [ u8 ; 0 ] } pub type XOC = * mut _XOC ; pub type XFontSet = * mut _XOC ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XmbTextItem { pub chars : * mut :: std :: os :: raw :: c_char , pub nchars : :: std :: os :: raw :: c_int , pub delta : :: std :: os :: raw :: c_int , pub font_set : XFontSet , } # [ test ] fn bindgen_test_layout_XmbTextItem ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XmbTextItem > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( XmbTextItem ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XmbTextItem > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XmbTextItem ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XmbTextItem ) ) . chars as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XmbTextItem ) , "::" , stringify ! ( chars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XmbTextItem ) ) . nchars as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XmbTextItem ) , "::" , stringify ! ( nchars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XmbTextItem ) ) . delta as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XmbTextItem ) , "::" , stringify ! ( delta ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XmbTextItem ) ) . font_set as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XmbTextItem ) , "::" , stringify ! ( font_set ) ) ) ; } impl Clone for XmbTextItem { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XwcTextItem { pub chars : * mut wchar_t , pub nchars : :: std :: os :: raw :: c_int , pub delta : :: std :: os :: raw :: c_int , pub font_set : XFontSet , } # [ test ] fn bindgen_test_layout_XwcTextItem ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XwcTextItem > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( XwcTextItem ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XwcTextItem > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XwcTextItem ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XwcTextItem ) ) . chars as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XwcTextItem ) , "::" , stringify ! ( chars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XwcTextItem ) ) . nchars as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XwcTextItem ) , "::" , stringify ! ( nchars ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XwcTextItem ) ) . delta as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XwcTextItem ) , "::" , stringify ! ( delta ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XwcTextItem ) ) . font_set as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XwcTextItem ) , "::" , stringify ! ( font_set ) ) ) ; } impl Clone for XwcTextItem { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XOMCharSetList { pub charset_count : :: std :: os :: raw :: c_int , pub charset_list : * mut * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_XOMCharSetList ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XOMCharSetList > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XOMCharSetList ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XOMCharSetList > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XOMCharSetList ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XOMCharSetList ) ) . charset_count as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XOMCharSetList ) , "::" , stringify ! ( charset_count ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XOMCharSetList ) ) . charset_list as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XOMCharSetList ) , "::" , stringify ! ( charset_list ) ) ) ; } impl Clone for XOMCharSetList { fn clone ( & self ) -> Self { * self } } # [ repr ( u32 ) ] # [ derive ( Debug , Copy , Clone , PartialEq , Eq , Hash ) ] pub enum XOrientation { XOMOrientation_LTR_TTB = 0 , XOMOrientation_RTL_TTB = 1 , XOMOrientation_TTB_LTR = 2 , XOMOrientation_TTB_RTL = 3 , XOMOrientation_Context = 4 , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XOMOrientation { pub num_orientation : :: std :: os :: raw :: c_int , pub orientation : * mut XOrientation , } # [ test ] fn bindgen_test_layout_XOMOrientation ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XOMOrientation > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XOMOrientation ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XOMOrientation > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XOMOrientation ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XOMOrientation ) ) . num_orientation as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XOMOrientation ) , "::" , stringify ! ( num_orientation ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XOMOrientation ) ) . orientation as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XOMOrientation ) , "::" , stringify ! ( orientation ) ) ) ; } impl Clone for XOMOrientation { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XOMFontInfo { pub num_font : :: std :: os :: raw :: c_int , pub font_struct_list : * mut * mut XFontStruct , pub font_name_list : * mut * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_XOMFontInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XOMFontInfo > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( XOMFontInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XOMFontInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XOMFontInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XOMFontInfo ) ) . num_font as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XOMFontInfo ) , "::" , stringify ! ( num_font ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XOMFontInfo ) ) . font_struct_list as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XOMFontInfo ) , "::" , stringify ! ( font_struct_list ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XOMFontInfo ) ) . font_name_list as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XOMFontInfo ) , "::" , stringify ! ( font_name_list ) ) ) ; } impl Clone for XOMFontInfo { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XIM { _unused : [ u8 ; 0 ] } pub type XIM = * mut _XIM ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XIC { _unused : [ u8 ; 0 ] } pub type XIC = * mut _XIC ; pub type XIMProc = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : XIM , arg2 : XPointer , arg3 : XPointer ) > ; pub type XICProc = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : XIC , arg2 : XPointer , arg3 : XPointer ) -> :: std :: os :: raw :: c_int > ; pub type XIDProc = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : XPointer , arg3 : XPointer ) > ; pub type XIMStyle = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XIMStyles { pub count_styles : :: std :: os :: raw :: c_ushort , pub supported_styles : * mut XIMStyle , } # [ test ] fn bindgen_test_layout_XIMStyles ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XIMStyles > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XIMStyles ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XIMStyles > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XIMStyles ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIMStyles ) ) . count_styles as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XIMStyles ) , "::" , stringify ! ( count_styles ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIMStyles ) ) . supported_styles as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XIMStyles ) , "::" , stringify ! ( supported_styles ) ) ) ; } impl Clone for XIMStyles { fn clone ( & self ) -> Self { * self } } pub type XVaNestedList = * mut :: std :: os :: raw :: c_void ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XIMCallback { pub client_data : XPointer , pub callback : XIMProc , } # [ test ] fn bindgen_test_layout_XIMCallback ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XIMCallback > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XIMCallback ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XIMCallback > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XIMCallback ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIMCallback ) ) . client_data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XIMCallback ) , "::" , stringify ! ( client_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIMCallback ) ) . callback as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XIMCallback ) , "::" , stringify ! ( callback ) ) ) ; } impl Clone for XIMCallback { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XICCallback { pub client_data : XPointer , pub callback : XICProc , } # [ test ] fn bindgen_test_layout_XICCallback ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XICCallback > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XICCallback ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XICCallback > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XICCallback ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XICCallback ) ) . client_data as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XICCallback ) , "::" , stringify ! ( client_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XICCallback ) ) . callback as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XICCallback ) , "::" , stringify ! ( callback ) ) ) ; } impl Clone for XICCallback { fn clone ( & self ) -> Self { * self } } pub type XIMFeedback = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Copy ) ] pub struct _XIMText { pub length : :: std :: os :: raw :: c_ushort , pub feedback : * mut XIMFeedback , pub encoding_is_wchar : :: std :: os :: raw :: c_int , pub string : _XIMText__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union _XIMText__bindgen_ty_1 { pub multi_byte : * mut :: std :: os :: raw :: c_char , pub wide_char : * mut wchar_t , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout__XIMText__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMText__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _XIMText__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMText__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMText__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMText__bindgen_ty_1 ) ) . multi_byte as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMText__bindgen_ty_1 ) , "::" , stringify ! ( multi_byte ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMText__bindgen_ty_1 ) ) . wide_char as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMText__bindgen_ty_1 ) , "::" , stringify ! ( wide_char ) ) ) ; } impl Clone for _XIMText__bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout__XIMText ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMText > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _XIMText ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMText > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMText ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMText ) ) . length as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMText ) , "::" , stringify ! ( length ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMText ) ) . feedback as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMText ) , "::" , stringify ! ( feedback ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMText ) ) . encoding_is_wchar as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMText ) , "::" , stringify ! ( encoding_is_wchar ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMText ) ) . string as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMText ) , "::" , stringify ! ( string ) ) ) ; } impl Clone for _XIMText { fn clone ( & self ) -> Self { * self } } pub type XIMText = _XIMText ; pub type XIMPreeditState = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XIMPreeditStateNotifyCallbackStruct { pub state : XIMPreeditState , } # [ test ] fn bindgen_test_layout__XIMPreeditStateNotifyCallbackStruct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMPreeditStateNotifyCallbackStruct > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _XIMPreeditStateNotifyCallbackStruct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMPreeditStateNotifyCallbackStruct > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMPreeditStateNotifyCallbackStruct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditStateNotifyCallbackStruct ) ) . state as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditStateNotifyCallbackStruct ) , "::" , stringify ! ( state ) ) ) ; } impl Clone for _XIMPreeditStateNotifyCallbackStruct { fn clone ( & self ) -> Self { * self } } pub type XIMPreeditStateNotifyCallbackStruct = _XIMPreeditStateNotifyCallbackStruct ; pub type XIMResetState = :: std :: os :: raw :: c_ulong ; pub type XIMStringConversionFeedback = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Copy ) ] pub struct _XIMStringConversionText { pub length : :: std :: os :: raw :: c_ushort , pub feedback : * mut XIMStringConversionFeedback , pub encoding_is_wchar : :: std :: os :: raw :: c_int , pub string : _XIMStringConversionText__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union _XIMStringConversionText__bindgen_ty_1 { pub mbs : * mut :: std :: os :: raw :: c_char , pub wcs : * mut wchar_t , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout__XIMStringConversionText__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMStringConversionText__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _XIMStringConversionText__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMStringConversionText__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMStringConversionText__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionText__bindgen_ty_1 ) ) . mbs as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionText__bindgen_ty_1 ) , "::" , stringify ! ( mbs ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionText__bindgen_ty_1 ) ) . wcs as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionText__bindgen_ty_1 ) , "::" , stringify ! ( wcs ) ) ) ; } impl Clone for _XIMStringConversionText__bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout__XIMStringConversionText ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMStringConversionText > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( _XIMStringConversionText ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMStringConversionText > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMStringConversionText ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionText ) ) . length as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionText ) , "::" , stringify ! ( length ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionText ) ) . feedback as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionText ) , "::" , stringify ! ( feedback ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionText ) ) . encoding_is_wchar as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionText ) , "::" , stringify ! ( encoding_is_wchar ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionText ) ) . string as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionText ) , "::" , stringify ! ( string ) ) ) ; } impl Clone for _XIMStringConversionText { fn clone ( & self ) -> Self { * self } } pub type XIMStringConversionText = _XIMStringConversionText ; pub type XIMStringConversionPosition = :: std :: os :: raw :: c_ushort ; pub type XIMStringConversionType = :: std :: os :: raw :: c_ushort ; pub type XIMStringConversionOperation = :: std :: os :: raw :: c_ushort ; # [ repr ( u32 ) ] # [ derive ( Debug , Copy , Clone , PartialEq , Eq , Hash ) ] pub enum XIMCaretDirection { XIMForwardChar = 0 , XIMBackwardChar = 1 , XIMForwardWord = 2 , XIMBackwardWord = 3 , XIMCaretUp = 4 , XIMCaretDown = 5 , XIMNextLine = 6 , XIMPreviousLine = 7 , XIMLineStart = 8 , XIMLineEnd = 9 , XIMAbsolutePosition = 10 , XIMDontChange = 11 , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XIMStringConversionCallbackStruct { pub position : XIMStringConversionPosition , pub direction : XIMCaretDirection , pub operation : XIMStringConversionOperation , pub factor : :: std :: os :: raw :: c_ushort , pub text : * mut XIMStringConversionText , } # [ test ] fn bindgen_test_layout__XIMStringConversionCallbackStruct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMStringConversionCallbackStruct > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _XIMStringConversionCallbackStruct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMStringConversionCallbackStruct > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMStringConversionCallbackStruct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionCallbackStruct ) ) . position as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionCallbackStruct ) , "::" , stringify ! ( position ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionCallbackStruct ) ) . direction as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionCallbackStruct ) , "::" , stringify ! ( direction ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionCallbackStruct ) ) . operation as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionCallbackStruct ) , "::" , stringify ! ( operation ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionCallbackStruct ) ) . factor as * const _ as usize } , 10usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionCallbackStruct ) , "::" , stringify ! ( factor ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStringConversionCallbackStruct ) ) . text as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStringConversionCallbackStruct ) , "::" , stringify ! ( text ) ) ) ; } impl Clone for _XIMStringConversionCallbackStruct { fn clone ( & self ) -> Self { * self } } pub type XIMStringConversionCallbackStruct = _XIMStringConversionCallbackStruct ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XIMPreeditDrawCallbackStruct { pub caret : :: std :: os :: raw :: c_int , pub chg_first : :: std :: os :: raw :: c_int , pub chg_length : :: std :: os :: raw :: c_int , pub text : * mut XIMText , } # [ test ] fn bindgen_test_layout__XIMPreeditDrawCallbackStruct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMPreeditDrawCallbackStruct > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _XIMPreeditDrawCallbackStruct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMPreeditDrawCallbackStruct > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMPreeditDrawCallbackStruct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditDrawCallbackStruct ) ) . caret as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditDrawCallbackStruct ) , "::" , stringify ! ( caret ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditDrawCallbackStruct ) ) . chg_first as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditDrawCallbackStruct ) , "::" , stringify ! ( chg_first ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditDrawCallbackStruct ) ) . chg_length as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditDrawCallbackStruct ) , "::" , stringify ! ( chg_length ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditDrawCallbackStruct ) ) . text as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditDrawCallbackStruct ) , "::" , stringify ! ( text ) ) ) ; } impl Clone for _XIMPreeditDrawCallbackStruct { fn clone ( & self ) -> Self { * self } } pub type XIMPreeditDrawCallbackStruct = _XIMPreeditDrawCallbackStruct ; # [ repr ( u32 ) ] # [ derive ( Debug , Copy , Clone , PartialEq , Eq , Hash ) ] pub enum XIMCaretStyle { XIMIsInvisible = 0 , XIMIsPrimary = 1 , XIMIsSecondary = 2 , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XIMPreeditCaretCallbackStruct { pub position : :: std :: os :: raw :: c_int , pub direction : XIMCaretDirection , pub style : XIMCaretStyle , } # [ test ] fn bindgen_test_layout__XIMPreeditCaretCallbackStruct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMPreeditCaretCallbackStruct > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( _XIMPreeditCaretCallbackStruct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMPreeditCaretCallbackStruct > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _XIMPreeditCaretCallbackStruct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditCaretCallbackStruct ) ) . position as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditCaretCallbackStruct ) , "::" , stringify ! ( position ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditCaretCallbackStruct ) ) . direction as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditCaretCallbackStruct ) , "::" , stringify ! ( direction ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMPreeditCaretCallbackStruct ) ) . style as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMPreeditCaretCallbackStruct ) , "::" , stringify ! ( style ) ) ) ; } impl Clone for _XIMPreeditCaretCallbackStruct { fn clone ( & self ) -> Self { * self } } pub type XIMPreeditCaretCallbackStruct = _XIMPreeditCaretCallbackStruct ; # [ repr ( u32 ) ] # [ derive ( Debug , Copy , Clone , PartialEq , Eq , Hash ) ] pub enum XIMStatusDataType { XIMTextType = 0 , XIMBitmapType = 1 , } # [ repr ( C ) ] # [ derive ( Copy ) ] pub struct _XIMStatusDrawCallbackStruct { pub type_ : XIMStatusDataType , pub data : _XIMStatusDrawCallbackStruct__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy ) ] pub union _XIMStatusDrawCallbackStruct__bindgen_ty_1 { pub text : * mut XIMText , pub bitmap : Pixmap , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout__XIMStatusDrawCallbackStruct__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMStatusDrawCallbackStruct__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _XIMStatusDrawCallbackStruct__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMStatusDrawCallbackStruct__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMStatusDrawCallbackStruct__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStatusDrawCallbackStruct__bindgen_ty_1 ) ) . text as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStatusDrawCallbackStruct__bindgen_ty_1 ) , "::" , stringify ! ( text ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStatusDrawCallbackStruct__bindgen_ty_1 ) ) . bitmap as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStatusDrawCallbackStruct__bindgen_ty_1 ) , "::" , stringify ! ( bitmap ) ) ) ; } impl Clone for _XIMStatusDrawCallbackStruct__bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout__XIMStatusDrawCallbackStruct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMStatusDrawCallbackStruct > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _XIMStatusDrawCallbackStruct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMStatusDrawCallbackStruct > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMStatusDrawCallbackStruct ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStatusDrawCallbackStruct ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStatusDrawCallbackStruct ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMStatusDrawCallbackStruct ) ) . data as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMStatusDrawCallbackStruct ) , "::" , stringify ! ( data ) ) ) ; } impl Clone for _XIMStatusDrawCallbackStruct { fn clone ( & self ) -> Self { * self } } pub type XIMStatusDrawCallbackStruct = _XIMStatusDrawCallbackStruct ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XIMHotKeyTrigger { pub keysym : KeySym , pub modifier : :: std :: os :: raw :: c_int , pub modifier_mask : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__XIMHotKeyTrigger ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMHotKeyTrigger > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _XIMHotKeyTrigger ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMHotKeyTrigger > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMHotKeyTrigger ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMHotKeyTrigger ) ) . keysym as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMHotKeyTrigger ) , "::" , stringify ! ( keysym ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMHotKeyTrigger ) ) . modifier as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMHotKeyTrigger ) , "::" , stringify ! ( modifier ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMHotKeyTrigger ) ) . modifier_mask as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMHotKeyTrigger ) , "::" , stringify ! ( modifier_mask ) ) ) ; } impl Clone for _XIMHotKeyTrigger { fn clone ( & self ) -> Self { * self } } pub type XIMHotKeyTrigger = _XIMHotKeyTrigger ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XIMHotKeyTriggers { pub num_hot_key : :: std :: os :: raw :: c_int , pub key : * mut XIMHotKeyTrigger , } # [ test ] fn bindgen_test_layout__XIMHotKeyTriggers ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XIMHotKeyTriggers > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _XIMHotKeyTriggers ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XIMHotKeyTriggers > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XIMHotKeyTriggers ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMHotKeyTriggers ) ) . num_hot_key as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMHotKeyTriggers ) , "::" , stringify ! ( num_hot_key ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XIMHotKeyTriggers ) ) . key as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XIMHotKeyTriggers ) , "::" , stringify ! ( key ) ) ) ; } impl Clone for _XIMHotKeyTriggers { fn clone ( & self ) -> Self { * self } } pub type XIMHotKeyTriggers = _XIMHotKeyTriggers ; pub type XIMHotKeyState = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XIMValuesList { pub count_values : :: std :: os :: raw :: c_ushort , pub supported_values : * mut * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_XIMValuesList ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XIMValuesList > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XIMValuesList ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XIMValuesList > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XIMValuesList ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIMValuesList ) ) . count_values as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XIMValuesList ) , "::" , stringify ! ( count_values ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIMValuesList ) ) . supported_values as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XIMValuesList ) , "::" , stringify ! ( supported_values ) ) ) ; } impl Clone for XIMValuesList { fn clone ( & self ) -> Self { * self } } extern "C" {
 # [ link_name = "_Xdebug" ] 
 pub static mut  _Xdebug  :  :: std :: os :: raw :: c_int ;
} extern "C" {
 pub fn XLoadQueryFont ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , ) -> * mut XFontStruct ; 
} extern "C" {
 pub fn XQueryFont ( arg1 : * mut Display , arg2 : XID , ) -> * mut XFontStruct ; 
} extern "C" {
 pub fn XGetMotionEvents ( arg1 : * mut Display , arg2 : Window , arg3 : Time , arg4 : Time , arg5 : * mut :: std :: os :: raw :: c_int , ) -> * mut XTimeCoord ; 
} extern "C" {
 pub fn XDeleteModifiermapEntry ( arg1 : * mut XModifierKeymap , arg2 : KeyCode , arg3 : :: std :: os :: raw :: c_int , ) -> * mut XModifierKeymap ; 
} extern "C" {
 pub fn XGetModifierMapping ( arg1 : * mut Display , ) -> * mut XModifierKeymap ; 
} extern "C" {
 pub fn XInsertModifiermapEntry ( arg1 : * mut XModifierKeymap , arg2 : KeyCode , arg3 : :: std :: os :: raw :: c_int , ) -> * mut XModifierKeymap ; 
} extern "C" {
 pub fn XNewModifiermap ( arg1 : :: std :: os :: raw :: c_int , ) -> * mut XModifierKeymap ; 
} extern "C" {
 pub fn XCreateImage ( arg1 : * mut Display , arg2 : * mut Visual , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_char , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_uint , arg9 : :: std :: os :: raw :: c_int , arg10 : :: std :: os :: raw :: c_int , ) -> * mut XImage ; 
} extern "C" {
 pub fn XInitImage ( arg1 : * mut XImage , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetImage ( arg1 : * mut Display , arg2 : Drawable , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_ulong , arg8 : :: std :: os :: raw :: c_int , ) -> * mut XImage ; 
} extern "C" {
 pub fn XGetSubImage ( arg1 : * mut Display , arg2 : Drawable , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_ulong , arg8 : :: std :: os :: raw :: c_int , arg9 : * mut XImage , arg10 : :: std :: os :: raw :: c_int , arg11 : :: std :: os :: raw :: c_int , ) -> * mut XImage ; 
} extern "C" {
 pub fn XOpenDisplay ( arg1 : * const :: std :: os :: raw :: c_char , ) -> * mut Display ; 
} extern "C" {
 pub fn XrmInitialize ( ) ; 
} extern "C" {
 pub fn XFetchBytes ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XFetchBuffer ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XGetAtomName ( arg1 : * mut Display , arg2 : Atom , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XGetAtomNames ( arg1 : * mut Display , arg2 : * mut Atom , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetDefault ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XDisplayName ( arg1 : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XKeysymToString ( arg1 : KeySym , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XSynchronize ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > ; 
} extern "C" {
 pub fn XSetAfterFunction ( arg1 : * mut Display , arg2 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display ) -> :: std :: os :: raw :: c_int > , ) -> :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display ) -> :: std :: os :: raw :: c_int > ) -> :: std :: os :: raw :: c_int > ; 
} extern "C" {
 pub fn XInternAtom ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , ) -> Atom ; 
} extern "C" {
 pub fn XInternAtoms ( arg1 : * mut Display , arg2 : * mut * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut Atom , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCopyColormapAndFree ( arg1 : * mut Display , arg2 : Colormap , ) -> Colormap ; 
} extern "C" {
 pub fn XCreateColormap ( arg1 : * mut Display , arg2 : Window , arg3 : * mut Visual , arg4 : :: std :: os :: raw :: c_int , ) -> Colormap ; 
} extern "C" {
 pub fn XCreatePixmapCursor ( arg1 : * mut Display , arg2 : Pixmap , arg3 : Pixmap , arg4 : * mut XColor , arg5 : * mut XColor , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , ) -> Cursor ; 
} extern "C" {
 pub fn XCreateGlyphCursor ( arg1 : * mut Display , arg2 : Font , arg3 : Font , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint , arg6 : * const XColor , arg7 : * const XColor , ) -> Cursor ; 
} extern "C" {
 pub fn XCreateFontCursor ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_uint , ) -> Cursor ; 
} extern "C" {
 pub fn XLoadFont ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , ) -> Font ; 
} extern "C" {
 pub fn XCreateGC ( arg1 : * mut Display , arg2 : Drawable , arg3 : :: std :: os :: raw :: c_ulong , arg4 : * mut XGCValues , ) -> GC ; 
} extern "C" {
 pub fn XGContextFromGC ( arg1 : GC , ) -> GContext ; 
} extern "C" {
 pub fn XFlushGC ( arg1 : * mut Display , arg2 : GC , ) ; 
} extern "C" {
 pub fn XCreatePixmap ( arg1 : * mut Display , arg2 : Drawable , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint , ) -> Pixmap ; 
} extern "C" {
 pub fn XCreateBitmapFromData ( arg1 : * mut Display , arg2 : Drawable , arg3 : * const :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint , ) -> Pixmap ; 
} extern "C" {
 pub fn XCreatePixmapFromBitmapData ( arg1 : * mut Display , arg2 : Drawable , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_ulong , arg7 : :: std :: os :: raw :: c_ulong , arg8 : :: std :: os :: raw :: c_uint , ) -> Pixmap ; 
} extern "C" {
 pub fn XCreateSimpleWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_ulong , arg9 : :: std :: os :: raw :: c_ulong , ) -> Window ; 
} extern "C" {
 pub fn XGetSelectionOwner ( arg1 : * mut Display , arg2 : Atom , ) -> Window ; 
} extern "C" {
 pub fn XCreateWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_int , arg9 : :: std :: os :: raw :: c_uint , arg10 : * mut Visual , arg11 : :: std :: os :: raw :: c_ulong , arg12 : * mut XSetWindowAttributes , ) -> Window ; 
} extern "C" {
 pub fn XListInstalledColormaps ( arg1 : * mut Display , arg2 : Window , arg3 : * mut :: std :: os :: raw :: c_int , ) -> * mut Colormap ; 
} extern "C" {
 pub fn XListFonts ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , ) -> * mut * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XListFontsWithInfo ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , arg5 : * mut * mut XFontStruct , ) -> * mut * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XGetFontPath ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , ) -> * mut * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XListExtensions ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , ) -> * mut * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XListProperties ( arg1 : * mut Display , arg2 : Window , arg3 : * mut :: std :: os :: raw :: c_int , ) -> * mut Atom ; 
} extern "C" {
 pub fn XListHosts ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , ) -> * mut XHostAddress ; 
} extern "C" {
 pub fn XKeycodeToKeysym ( arg1 : * mut Display , arg2 : KeyCode , arg3 : :: std :: os :: raw :: c_int , ) -> KeySym ; 
} extern "C" {
 pub fn XLookupKeysym ( arg1 : * mut XKeyEvent , arg2 : :: std :: os :: raw :: c_int , ) -> KeySym ; 
} extern "C" {
 pub fn XGetKeyboardMapping ( arg1 : * mut Display , arg2 : KeyCode , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , ) -> * mut KeySym ; 
} extern "C" {
 pub fn XStringToKeysym ( arg1 : * const :: std :: os :: raw :: c_char , ) -> KeySym ; 
} extern "C" {
 pub fn XMaxRequestSize ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn XExtendedMaxRequestSize ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn XResourceManagerString ( arg1 : * mut Display , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XScreenResourceString ( arg1 : * mut Screen , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XDisplayMotionBufferSize ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XVisualIDFromVisual ( arg1 : * mut Visual , ) -> VisualID ; 
} extern "C" {
 pub fn XInitThreads ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XLockDisplay ( arg1 : * mut Display , ) ; 
} extern "C" {
 pub fn XUnlockDisplay ( arg1 : * mut Display , ) ; 
} extern "C" {
 pub fn XInitExtension ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , ) -> * mut XExtCodes ; 
} extern "C" {
 pub fn XAddExtension ( arg1 : * mut Display , ) -> * mut XExtCodes ; 
} extern "C" {
 pub fn XFindOnExtensionList ( arg1 : * mut * mut XExtData , arg2 : :: std :: os :: raw :: c_int , ) -> * mut XExtData ; 
} extern "C" {
 pub fn XEHeadOfExtensionList ( arg1 : XEDataObject , ) -> * mut * mut XExtData ; 
} extern "C" {
 pub fn XRootWindow ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> Window ; 
} extern "C" {
 pub fn XDefaultRootWindow ( arg1 : * mut Display , ) -> Window ; 
} extern "C" {
 pub fn XRootWindowOfScreen ( arg1 : * mut Screen , ) -> Window ; 
} extern "C" {
 pub fn XDefaultVisual ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> * mut Visual ; 
} extern "C" {
 pub fn XDefaultVisualOfScreen ( arg1 : * mut Screen , ) -> * mut Visual ; 
} extern "C" {
 pub fn XDefaultGC ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> GC ; 
} extern "C" {
 pub fn XDefaultGCOfScreen ( arg1 : * mut Screen , ) -> GC ; 
} extern "C" {
 pub fn XBlackPixel ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XWhitePixel ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XAllPlanes ( ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XBlackPixelOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XWhitePixelOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XNextRequest ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XLastKnownRequestProcessed ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_ulong ; 
} extern "C" {
 pub fn XServerVendor ( arg1 : * mut Display , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XDisplayString ( arg1 : * mut Display , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XDefaultColormap ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> Colormap ; 
} extern "C" {
 pub fn XDefaultColormapOfScreen ( arg1 : * mut Screen , ) -> Colormap ; 
} extern "C" {
 pub fn XDisplayOfScreen ( arg1 : * mut Screen , ) -> * mut Display ; 
} extern "C" {
 pub fn XScreenOfDisplay ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> * mut Screen ; 
} extern "C" {
 pub fn XDefaultScreenOfDisplay ( arg1 : * mut Display , ) -> * mut Screen ; 
} extern "C" {
 pub fn XEventMaskOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_long ; 
} extern "C" {
 pub fn XScreenNumberOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} pub type XErrorHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : * mut XErrorEvent ) -> :: std :: os :: raw :: c_int > ; extern "C" {
 pub fn XSetErrorHandler ( arg1 : XErrorHandler , ) -> XErrorHandler ; 
} pub type XIOErrorHandler = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display ) -> :: std :: os :: raw :: c_int > ; extern "C" {
 pub fn XSetIOErrorHandler ( arg1 : XIOErrorHandler , ) -> XIOErrorHandler ; 
} extern "C" {
 pub fn XListPixmapFormats ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , ) -> * mut XPixmapFormatValues ; 
} extern "C" {
 pub fn XListDepths ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , ) -> * mut :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XReconfigureWMWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_uint , arg5 : * mut XWindowChanges , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetWMProtocols ( arg1 : * mut Display , arg2 : Window , arg3 : * mut * mut Atom , arg4 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWMProtocols ( arg1 : * mut Display , arg2 : Window , arg3 : * mut Atom , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XIconifyWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XWithdrawWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetCommand ( arg1 : * mut Display , arg2 : Window , arg3 : * mut * mut * mut :: std :: os :: raw :: c_char , arg4 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetWMColormapWindows ( arg1 : * mut Display , arg2 : Window , arg3 : * mut * mut Window , arg4 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWMColormapWindows ( arg1 : * mut Display , arg2 : Window , arg3 : * mut Window , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeStringList ( arg1 : * mut * mut :: std :: os :: raw :: c_char , ) ; 
} extern "C" {
 pub fn XSetTransientForHint ( arg1 : * mut Display , arg2 : Window , arg3 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XActivateScreenSaver ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAddHost ( arg1 : * mut Display , arg2 : * mut XHostAddress , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAddHosts ( arg1 : * mut Display , arg2 : * mut XHostAddress , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAddToExtensionList ( arg1 : * mut * mut _XExtData , arg2 : * mut XExtData , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAddToSaveSet ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAllocColor ( arg1 : * mut Display , arg2 : Colormap , arg3 : * mut XColor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAllocColorCells ( arg1 : * mut Display , arg2 : Colormap , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_ulong , arg5 : :: std :: os :: raw :: c_uint , arg6 : * mut :: std :: os :: raw :: c_ulong , arg7 : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAllocColorPlanes ( arg1 : * mut Display , arg2 : Colormap , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_ulong , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , arg8 : :: std :: os :: raw :: c_int , arg9 : * mut :: std :: os :: raw :: c_ulong , arg10 : * mut :: std :: os :: raw :: c_ulong , arg11 : * mut :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAllocNamedColor ( arg1 : * mut Display , arg2 : Colormap , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * mut XColor , arg5 : * mut XColor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAllowEvents ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAutoRepeatOff ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XAutoRepeatOn ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XBell ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XBitmapBitOrder ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XBitmapPad ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XBitmapUnit ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCellsOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangeActivePointerGrab ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_uint , arg3 : Cursor , arg4 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangeGC ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_ulong , arg4 : * mut XGCValues , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangeKeyboardControl ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_ulong , arg3 : * mut XKeyboardControl , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangeKeyboardMapping ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut KeySym , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangePointerControl ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangeProperty ( arg1 : * mut Display , arg2 : Window , arg3 : Atom , arg4 : Atom , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_uchar , arg8 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangeSaveSet ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XChangeWindowAttributes ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_ulong , arg4 : * mut XSetWindowAttributes , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCheckIfEvent ( arg1 : * mut Display , arg2 : * mut XEvent , arg3 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : * mut XEvent , arg3 : XPointer ) -> :: std :: os :: raw :: c_int > , arg4 : XPointer , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCheckMaskEvent ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_long , arg3 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCheckTypedEvent ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCheckTypedWindowEvent ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCheckWindowEvent ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_long , arg4 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCirculateSubwindows ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCirculateSubwindowsDown ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCirculateSubwindowsUp ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XClearArea ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XClearWindow ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCloseDisplay ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XConfigureWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_uint , arg4 : * mut XWindowChanges , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XConnectionNumber ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XConvertSelection ( arg1 : * mut Display , arg2 : Atom , arg3 : Atom , arg4 : Atom , arg5 : Window , arg6 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCopyArea ( arg1 : * mut Display , arg2 : Drawable , arg3 : Drawable , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_uint , arg9 : :: std :: os :: raw :: c_int , arg10 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCopyGC ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_ulong , arg4 : GC , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCopyPlane ( arg1 : * mut Display , arg2 : Drawable , arg3 : Drawable , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_uint , arg9 : :: std :: os :: raw :: c_int , arg10 : :: std :: os :: raw :: c_int , arg11 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDefaultDepth ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDefaultDepthOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDefaultScreen ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDefineCursor ( arg1 : * mut Display , arg2 : Window , arg3 : Cursor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDeleteProperty ( arg1 : * mut Display , arg2 : Window , arg3 : Atom , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDestroyWindow ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDestroySubwindows ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDoesBackingStore ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDoesSaveUnders ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisableAccessControl ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisplayCells ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisplayHeight ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisplayHeightMM ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisplayKeycodes ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisplayPlanes ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisplayWidth ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDisplayWidthMM ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawArc ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_int , arg9 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawArcs ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XArc , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawImageString ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * const :: std :: os :: raw :: c_char , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawImageString16 ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * const XChar2b , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawLine ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawLines ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XPoint , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawPoint ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawPoints ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XPoint , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawRectangle ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawRectangles ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XRectangle , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawSegments ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XSegment , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawString ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * const :: std :: os :: raw :: c_char , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawString16 ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * const XChar2b , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawText ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut XTextItem , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDrawText16 ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut XTextItem16 , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XEnableAccessControl ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XEventsQueued ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFetchName ( arg1 : * mut Display , arg2 : Window , arg3 : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFillArc ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_int , arg9 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFillArcs ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XArc , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFillPolygon ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XPoint , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFillRectangle ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFillRectangles ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XRectangle , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFlush ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XForceScreenSaver ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFree ( arg1 : * mut :: std :: os :: raw :: c_void , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeColormap ( arg1 : * mut Display , arg2 : Colormap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeColors ( arg1 : * mut Display , arg2 : Colormap , arg3 : * mut :: std :: os :: raw :: c_ulong , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeCursor ( arg1 : * mut Display , arg2 : Cursor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeExtensionList ( arg1 : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeFont ( arg1 : * mut Display , arg2 : * mut XFontStruct , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeFontInfo ( arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : * mut XFontStruct , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeFontNames ( arg1 : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeFontPath ( arg1 : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeGC ( arg1 : * mut Display , arg2 : GC , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeModifiermap ( arg1 : * mut XModifierKeymap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreePixmap ( arg1 : * mut Display , arg2 : Pixmap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGeometry ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const :: std :: os :: raw :: c_char , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_int , arg9 : :: std :: os :: raw :: c_int , arg10 : * mut :: std :: os :: raw :: c_int , arg11 : * mut :: std :: os :: raw :: c_int , arg12 : * mut :: std :: os :: raw :: c_int , arg13 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetErrorDatabaseText ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const :: std :: os :: raw :: c_char , arg5 : * mut :: std :: os :: raw :: c_char , arg6 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetErrorText ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetFontProperty ( arg1 : * mut XFontStruct , arg2 : Atom , arg3 : * mut :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetGCValues ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_ulong , arg4 : * mut XGCValues , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetGeometry ( arg1 : * mut Display , arg2 : Drawable , arg3 : * mut Window , arg4 : * mut :: std :: os :: raw :: c_int , arg5 : * mut :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_uint , arg7 : * mut :: std :: os :: raw :: c_uint , arg8 : * mut :: std :: os :: raw :: c_uint , arg9 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetIconName ( arg1 : * mut Display , arg2 : Window , arg3 : * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetInputFocus ( arg1 : * mut Display , arg2 : * mut Window , arg3 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetKeyboardControl ( arg1 : * mut Display , arg2 : * mut XKeyboardState , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetPointerControl ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetPointerMapping ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_uchar , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetScreenSaver ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , arg5 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetTransientForHint ( arg1 : * mut Display , arg2 : Window , arg3 : * mut Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetWindowProperty ( arg1 : * mut Display , arg2 : Window , arg3 : Atom , arg4 : :: std :: os :: raw :: c_long , arg5 : :: std :: os :: raw :: c_long , arg6 : :: std :: os :: raw :: c_int , arg7 : Atom , arg8 : * mut Atom , arg9 : * mut :: std :: os :: raw :: c_int , arg10 : * mut :: std :: os :: raw :: c_ulong , arg11 : * mut :: std :: os :: raw :: c_ulong , arg12 : * mut * mut :: std :: os :: raw :: c_uchar , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetWindowAttributes ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XWindowAttributes , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGrabButton ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_uint , arg3 : :: std :: os :: raw :: c_uint , arg4 : Window , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_int , arg8 : :: std :: os :: raw :: c_int , arg9 : Window , arg10 : Cursor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGrabKey ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_uint , arg4 : Window , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGrabKeyboard ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGrabPointer ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : Window , arg8 : Cursor , arg9 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGrabServer ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XHeightMMOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XHeightOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XIfEvent ( arg1 : * mut Display , arg2 : * mut XEvent , arg3 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : * mut XEvent , arg3 : XPointer ) -> :: std :: os :: raw :: c_int > , arg4 : XPointer , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XImageByteOrder ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XInstallColormap ( arg1 : * mut Display , arg2 : Colormap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XKeysymToKeycode ( arg1 : * mut Display , arg2 : KeySym , ) -> KeyCode ; 
} extern "C" {
 pub fn XKillClient ( arg1 : * mut Display , arg2 : XID , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XLookupColor ( arg1 : * mut Display , arg2 : Colormap , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * mut XColor , arg5 : * mut XColor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XLowerWindow ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMapRaised ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMapSubwindows ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMapWindow ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMaskEvent ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_long , arg3 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMaxCmapsOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMinCmapsOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMoveResizeWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMoveWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XNextEvent ( arg1 : * mut Display , arg2 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XNoOp ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XParseColor ( arg1 : * mut Display , arg2 : Colormap , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * mut XColor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XParseGeometry ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_uint , arg5 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XPeekEvent ( arg1 : * mut Display , arg2 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XPeekIfEvent ( arg1 : * mut Display , arg2 : * mut XEvent , arg3 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : * mut XEvent , arg3 : XPointer ) -> :: std :: os :: raw :: c_int > , arg4 : XPointer , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XPending ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XPlanesOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XProtocolRevision ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XProtocolVersion ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XPutBackEvent ( arg1 : * mut Display , arg2 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XPutImage ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : * mut XImage , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , arg8 : :: std :: os :: raw :: c_int , arg9 : :: std :: os :: raw :: c_uint , arg10 : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQLength ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryBestCursor ( arg1 : * mut Display , arg2 : Drawable , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_uint , arg5 : * mut :: std :: os :: raw :: c_uint , arg6 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryBestSize ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : Drawable , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint , arg6 : * mut :: std :: os :: raw :: c_uint , arg7 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryBestStipple ( arg1 : * mut Display , arg2 : Drawable , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_uint , arg5 : * mut :: std :: os :: raw :: c_uint , arg6 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryBestTile ( arg1 : * mut Display , arg2 : Drawable , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_uint , arg5 : * mut :: std :: os :: raw :: c_uint , arg6 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryColor ( arg1 : * mut Display , arg2 : Colormap , arg3 : * mut XColor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryColors ( arg1 : * mut Display , arg2 : Colormap , arg3 : * mut XColor , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryExtension ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , arg5 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryKeymap ( arg1 : * mut Display , arg2 : * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryPointer ( arg1 : * mut Display , arg2 : Window , arg3 : * mut Window , arg4 : * mut Window , arg5 : * mut :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_int , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut :: std :: os :: raw :: c_int , arg9 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryTextExtents ( arg1 : * mut Display , arg2 : XID , arg3 : * const :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_int , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut XCharStruct , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryTextExtents16 ( arg1 : * mut Display , arg2 : XID , arg3 : * const XChar2b , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_int , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut XCharStruct , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XQueryTree ( arg1 : * mut Display , arg2 : Window , arg3 : * mut Window , arg4 : * mut Window , arg5 : * mut * mut Window , arg6 : * mut :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRaiseWindow ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XReadBitmapFile ( arg1 : * mut Display , arg2 : Drawable , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * mut :: std :: os :: raw :: c_uint , arg5 : * mut :: std :: os :: raw :: c_uint , arg6 : * mut Pixmap , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XReadBitmapFileData ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut :: std :: os :: raw :: c_uint , arg3 : * mut :: std :: os :: raw :: c_uint , arg4 : * mut * mut :: std :: os :: raw :: c_uchar , arg5 : * mut :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRebindKeysym ( arg1 : * mut Display , arg2 : KeySym , arg3 : * mut KeySym , arg4 : :: std :: os :: raw :: c_int , arg5 : * const :: std :: os :: raw :: c_uchar , arg6 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRecolorCursor ( arg1 : * mut Display , arg2 : Cursor , arg3 : * mut XColor , arg4 : * mut XColor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRefreshKeyboardMapping ( arg1 : * mut XMappingEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRemoveFromSaveSet ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRemoveHost ( arg1 : * mut Display , arg2 : * mut XHostAddress , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRemoveHosts ( arg1 : * mut Display , arg2 : * mut XHostAddress , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XReparentWindow ( arg1 : * mut Display , arg2 : Window , arg3 : Window , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XResetScreenSaver ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XResizeWindow ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRestackWindows ( arg1 : * mut Display , arg2 : * mut Window , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRotateBuffers ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRotateWindowProperties ( arg1 : * mut Display , arg2 : Window , arg3 : * mut Atom , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XScreenCount ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSelectInput ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_long , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSendEvent ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_long , arg5 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetAccessControl ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetArcMode ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetBackground ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetClipMask ( arg1 : * mut Display , arg2 : GC , arg3 : Pixmap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetClipOrigin ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetClipRectangles ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut XRectangle , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetCloseDownMode ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetCommand ( arg1 : * mut Display , arg2 : Window , arg3 : * mut * mut :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetDashes ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_char , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetFillRule ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetFillStyle ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetFont ( arg1 : * mut Display , arg2 : GC , arg3 : Font , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetFontPath ( arg1 : * mut Display , arg2 : * mut * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetForeground ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetFunction ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetGraphicsExposures ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetIconName ( arg1 : * mut Display , arg2 : Window , arg3 : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetInputFocus ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_int , arg4 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetLineAttributes ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetModifierMapping ( arg1 : * mut Display , arg2 : * mut XModifierKeymap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetPlaneMask ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetPointerMapping ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_uchar , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetScreenSaver ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetSelectionOwner ( arg1 : * mut Display , arg2 : Atom , arg3 : Window , arg4 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetState ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_ulong , arg4 : :: std :: os :: raw :: c_ulong , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetStipple ( arg1 : * mut Display , arg2 : GC , arg3 : Pixmap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetSubwindowMode ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetTSOrigin ( arg1 : * mut Display , arg2 : GC , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetTile ( arg1 : * mut Display , arg2 : GC , arg3 : Pixmap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWindowBackground ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWindowBackgroundPixmap ( arg1 : * mut Display , arg2 : Window , arg3 : Pixmap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWindowBorder ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_ulong , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWindowBorderPixmap ( arg1 : * mut Display , arg2 : Window , arg3 : Pixmap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWindowBorderWidth ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWindowColormap ( arg1 : * mut Display , arg2 : Window , arg3 : Colormap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XStoreBuffer ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XStoreBytes ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XStoreColor ( arg1 : * mut Display , arg2 : Colormap , arg3 : * mut XColor , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XStoreColors ( arg1 : * mut Display , arg2 : Colormap , arg3 : * mut XColor , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XStoreName ( arg1 : * mut Display , arg2 : Window , arg3 : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XStoreNamedColor ( arg1 : * mut Display , arg2 : Colormap , arg3 : * const :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_ulong , arg5 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSync ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XTextExtents ( arg1 : * mut XFontStruct , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , arg5 : * mut :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_int , arg7 : * mut XCharStruct , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XTextExtents16 ( arg1 : * mut XFontStruct , arg2 : * const XChar2b , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int , arg5 : * mut :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_int , arg7 : * mut XCharStruct , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XTextWidth ( arg1 : * mut XFontStruct , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XTextWidth16 ( arg1 : * mut XFontStruct , arg2 : * const XChar2b , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XTranslateCoordinates ( arg1 : * mut Display , arg2 : Window , arg3 : Window , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut :: std :: os :: raw :: c_int , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUndefineCursor ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUngrabButton ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_uint , arg3 : :: std :: os :: raw :: c_uint , arg4 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUngrabKey ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_uint , arg4 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUngrabKeyboard ( arg1 : * mut Display , arg2 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUngrabPointer ( arg1 : * mut Display , arg2 : Time , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUngrabServer ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUninstallColormap ( arg1 : * mut Display , arg2 : Colormap , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUnloadFont ( arg1 : * mut Display , arg2 : Font , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUnmapSubwindows ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUnmapWindow ( arg1 : * mut Display , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XVendorRelease ( arg1 : * mut Display , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XWarpPointer ( arg1 : * mut Display , arg2 : Window , arg3 : Window , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_uint , arg7 : :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_int , arg9 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XWidthMMOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XWidthOfScreen ( arg1 : * mut Screen , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XWindowEvent ( arg1 : * mut Display , arg2 : Window , arg3 : :: std :: os :: raw :: c_long , arg4 : * mut XEvent , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XWriteBitmapFile ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : Pixmap , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint , arg6 : :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSupportsLocale ( ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetLocaleModifiers ( arg1 : * const :: std :: os :: raw :: c_char , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XOpenOM ( arg1 : * mut Display , arg2 : * mut _XrmHashBucketRec , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const :: std :: os :: raw :: c_char , ) -> XOM ; 
} extern "C" {
 pub fn XCloseOM ( arg1 : XOM , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetOMValues ( arg1 : XOM , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XGetOMValues ( arg1 : XOM , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XDisplayOfOM ( arg1 : XOM , ) -> * mut Display ; 
} extern "C" {
 pub fn XLocaleOfOM ( arg1 : XOM , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XCreateOC ( arg1 : XOM , ... ) -> XOC ; 
} extern "C" {
 pub fn XDestroyOC ( arg1 : XOC , ) ; 
} extern "C" {
 pub fn XOMOfOC ( arg1 : XOC , ) -> XOM ; 
} extern "C" {
 pub fn XSetOCValues ( arg1 : XOC , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XGetOCValues ( arg1 : XOC , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XCreateFontSet ( arg1 : * mut Display , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut * mut * mut :: std :: os :: raw :: c_char , arg4 : * mut :: std :: os :: raw :: c_int , arg5 : * mut * mut :: std :: os :: raw :: c_char , ) -> XFontSet ; 
} extern "C" {
 pub fn XFreeFontSet ( arg1 : * mut Display , arg2 : XFontSet , ) ; 
} extern "C" {
 pub fn XFontsOfFontSet ( arg1 : XFontSet , arg2 : * mut * mut * mut XFontStruct , arg3 : * mut * mut * mut :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XBaseFontNameListOfFontSet ( arg1 : XFontSet , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XLocaleOfFontSet ( arg1 : XFontSet , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XContextDependentDrawing ( arg1 : XFontSet , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDirectionalDependentDrawing ( arg1 : XFontSet , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XContextualDrawing ( arg1 : XFontSet , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XExtentsOfFontSet ( arg1 : XFontSet , ) -> * mut XFontSetExtents ; 
} extern "C" {
 pub fn XmbTextEscapement ( arg1 : XFontSet , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XwcTextEscapement ( arg1 : XFontSet , arg2 : * const wchar_t , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn Xutf8TextEscapement ( arg1 : XFontSet , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XmbTextExtents ( arg1 : XFontSet , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut XRectangle , arg5 : * mut XRectangle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XwcTextExtents ( arg1 : XFontSet , arg2 : * const wchar_t , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut XRectangle , arg5 : * mut XRectangle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn Xutf8TextExtents ( arg1 : XFontSet , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut XRectangle , arg5 : * mut XRectangle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XmbTextPerCharExtents ( arg1 : XFontSet , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut XRectangle , arg5 : * mut XRectangle , arg6 : :: std :: os :: raw :: c_int , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut XRectangle , arg9 : * mut XRectangle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XwcTextPerCharExtents ( arg1 : XFontSet , arg2 : * const wchar_t , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut XRectangle , arg5 : * mut XRectangle , arg6 : :: std :: os :: raw :: c_int , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut XRectangle , arg9 : * mut XRectangle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn Xutf8TextPerCharExtents ( arg1 : XFontSet , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut XRectangle , arg5 : * mut XRectangle , arg6 : :: std :: os :: raw :: c_int , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut XRectangle , arg9 : * mut XRectangle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XmbDrawText ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut XmbTextItem , arg7 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn XwcDrawText ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut XwcTextItem , arg7 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn Xutf8DrawText ( arg1 : * mut Display , arg2 : Drawable , arg3 : GC , arg4 : :: std :: os :: raw :: c_int , arg5 : :: std :: os :: raw :: c_int , arg6 : * mut XmbTextItem , arg7 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn XmbDrawString ( arg1 : * mut Display , arg2 : Drawable , arg3 : XFontSet , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_char , arg8 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn XwcDrawString ( arg1 : * mut Display , arg2 : Drawable , arg3 : XFontSet , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : * const wchar_t , arg8 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn Xutf8DrawString ( arg1 : * mut Display , arg2 : Drawable , arg3 : XFontSet , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_char , arg8 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn XmbDrawImageString ( arg1 : * mut Display , arg2 : Drawable , arg3 : XFontSet , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_char , arg8 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn XwcDrawImageString ( arg1 : * mut Display , arg2 : Drawable , arg3 : XFontSet , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : * const wchar_t , arg8 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn Xutf8DrawImageString ( arg1 : * mut Display , arg2 : Drawable , arg3 : XFontSet , arg4 : GC , arg5 : :: std :: os :: raw :: c_int , arg6 : :: std :: os :: raw :: c_int , arg7 : * const :: std :: os :: raw :: c_char , arg8 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn XOpenIM ( arg1 : * mut Display , arg2 : * mut _XrmHashBucketRec , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : * mut :: std :: os :: raw :: c_char , ) -> XIM ; 
} extern "C" {
 pub fn XCloseIM ( arg1 : XIM , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetIMValues ( arg1 : XIM , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XSetIMValues ( arg1 : XIM , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XDisplayOfIM ( arg1 : XIM , ) -> * mut Display ; 
} extern "C" {
 pub fn XLocaleOfIM ( arg1 : XIM , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XCreateIC ( arg1 : XIM , ... ) -> XIC ; 
} extern "C" {
 pub fn XDestroyIC ( arg1 : XIC , ) ; 
} extern "C" {
 pub fn XSetICFocus ( arg1 : XIC , ) ; 
} extern "C" {
 pub fn XUnsetICFocus ( arg1 : XIC , ) ; 
} extern "C" {
 pub fn XwcResetIC ( arg1 : XIC , ) -> * mut wchar_t ; 
} extern "C" {
 pub fn XmbResetIC ( arg1 : XIC , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn Xutf8ResetIC ( arg1 : XIC , ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XSetICValues ( arg1 : XIC , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XGetICValues ( arg1 : XIC , ... ) -> * mut :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XIMOfIC ( arg1 : XIC , ) -> XIM ; 
} extern "C" {
 pub fn XFilterEvent ( arg1 : * mut XEvent , arg2 : Window , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XmbLookupString ( arg1 : XIC , arg2 : * mut XKeyPressedEvent , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut KeySym , arg6 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XwcLookupString ( arg1 : XIC , arg2 : * mut XKeyPressedEvent , arg3 : * mut wchar_t , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut KeySym , arg6 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn Xutf8LookupString ( arg1 : XIC , arg2 : * mut XKeyPressedEvent , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut KeySym , arg6 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XVaCreateNestedList ( arg1 : :: std :: os :: raw :: c_int , ... ) -> XVaNestedList ; 
} extern "C" {
 pub fn XRegisterIMInstantiateCallback ( arg1 : * mut Display , arg2 : * mut _XrmHashBucketRec , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : * mut :: std :: os :: raw :: c_char , arg5 : XIDProc , arg6 : XPointer , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUnregisterIMInstantiateCallback ( arg1 : * mut Display , arg2 : * mut _XrmHashBucketRec , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : * mut :: std :: os :: raw :: c_char , arg5 : XIDProc , arg6 : XPointer , ) -> :: std :: os :: raw :: c_int ; 
} pub type XConnectionWatchProc = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut Display , arg2 : XPointer , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut XPointer ) > ; extern "C" {
 pub fn XInternalConnectionNumbers ( arg1 : * mut Display , arg2 : * mut * mut :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XProcessInternalConnection ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn XAddConnectionWatch ( arg1 : * mut Display , arg2 : XConnectionWatchProc , arg3 : XPointer , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XRemoveConnectionWatch ( arg1 : * mut Display , arg2 : XConnectionWatchProc , arg3 : XPointer , ) ; 
} extern "C" {
 pub fn XSetAuthorization ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : :: std :: os :: raw :: c_int , ) ; 
} extern "C" {
 pub fn _Xmbtowc ( arg1 : * mut wchar_t , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn _Xwctomb ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : wchar_t , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetEventData ( arg1 : * mut Display , arg2 : * mut XGenericEventCookie , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFreeEventData ( arg1 : * mut Display , arg2 : * mut XGenericEventCookie , ) ; 
} # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XSizeHints { pub flags : :: std :: os :: raw :: c_long , pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , pub width : :: std :: os :: raw :: c_int , pub height : :: std :: os :: raw :: c_int , pub min_width : :: std :: os :: raw :: c_int , pub min_height : :: std :: os :: raw :: c_int , pub max_width : :: std :: os :: raw :: c_int , pub max_height : :: std :: os :: raw :: c_int , pub width_inc : :: std :: os :: raw :: c_int , pub height_inc : :: std :: os :: raw :: c_int , pub min_aspect : XSizeHints__bindgen_ty_1 , pub max_aspect : XSizeHints__bindgen_ty_1 , pub base_width : :: std :: os :: raw :: c_int , pub base_height : :: std :: os :: raw :: c_int , pub win_gravity : :: std :: os :: raw :: c_int , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XSizeHints__bindgen_ty_1 { pub x : :: std :: os :: raw :: c_int , pub y : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XSizeHints__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XSizeHints__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( XSizeHints__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XSizeHints__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( XSizeHints__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints__bindgen_ty_1 ) ) . x as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints__bindgen_ty_1 ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints__bindgen_ty_1 ) ) . y as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints__bindgen_ty_1 ) , "::" , stringify ! ( y ) ) ) ; } impl Clone for XSizeHints__bindgen_ty_1 { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout_XSizeHints ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XSizeHints > ( ) , 80usize , concat ! ( "Size of: " , stringify ! ( XSizeHints ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XSizeHints > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XSizeHints ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . flags as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . x as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . y as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . width as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . height as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . min_width as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( min_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . min_height as * const _ as usize } , 28usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( min_height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . max_width as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( max_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . max_height as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( max_height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . width_inc as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( width_inc ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . height_inc as * const _ as usize } , 44usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( height_inc ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . min_aspect as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( min_aspect ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . max_aspect as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( max_aspect ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . base_width as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( base_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . base_height as * const _ as usize } , 68usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( base_height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XSizeHints ) ) . win_gravity as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XSizeHints ) , "::" , stringify ! ( win_gravity ) ) ) ; } impl Clone for XSizeHints { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XWMHints { pub flags : :: std :: os :: raw :: c_long , pub input : :: std :: os :: raw :: c_int , pub initial_state : :: std :: os :: raw :: c_int , pub icon_pixmap : Pixmap , pub icon_window : Window , pub icon_x : :: std :: os :: raw :: c_int , pub icon_y : :: std :: os :: raw :: c_int , pub icon_mask : Pixmap , pub window_group : XID , } # [ test ] fn bindgen_test_layout_XWMHints ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XWMHints > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( XWMHints ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XWMHints > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XWMHints ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWMHints ) ) . flags as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XWMHints ) , "::" , stringify ! ( flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWMHints ) ) . input as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XWMHints ) , "::" , stringify ! ( input ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWMHints ) ) . initial_state as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XWMHints ) , "::" , stringify ! ( initial_state ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWMHints ) ) . icon_pixmap as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XWMHints ) , "::" , stringify ! ( icon_pixmap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWMHints ) ) . icon_window as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XWMHints ) , "::" , stringify ! ( icon_window ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWMHints ) ) . icon_x as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XWMHints ) , "::" , stringify ! ( icon_x ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWMHints ) ) . icon_y as * const _ as usize } , 36usize , concat ! ( "Alignment of field: " , stringify ! ( XWMHints ) , "::" , stringify ! ( icon_y ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWMHints ) ) . icon_mask as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XWMHints ) , "::" , stringify ! ( icon_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XWMHints ) ) . window_group as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XWMHints ) , "::" , stringify ! ( window_group ) ) ) ; } impl Clone for XWMHints { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XTextProperty { pub value : * mut :: std :: os :: raw :: c_uchar , pub encoding : Atom , pub format : :: std :: os :: raw :: c_int , pub nitems : :: std :: os :: raw :: c_ulong , } # [ test ] fn bindgen_test_layout_XTextProperty ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XTextProperty > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( XTextProperty ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XTextProperty > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XTextProperty ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextProperty ) ) . value as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XTextProperty ) , "::" , stringify ! ( value ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextProperty ) ) . encoding as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XTextProperty ) , "::" , stringify ! ( encoding ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextProperty ) ) . format as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XTextProperty ) , "::" , stringify ! ( format ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XTextProperty ) ) . nitems as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XTextProperty ) , "::" , stringify ! ( nitems ) ) ) ; } impl Clone for XTextProperty { fn clone ( & self ) -> Self { * self } } # [ repr ( u32 ) ] # [ derive ( Debug , Copy , Clone , PartialEq , Eq , Hash ) ] pub enum XICCEncodingStyle { XStringStyle = 0 , XCompoundTextStyle = 1 , XTextStyle = 2 , XStdICCTextStyle = 3 , XUTF8StringStyle = 4 , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XIconSize { pub min_width : :: std :: os :: raw :: c_int , pub min_height : :: std :: os :: raw :: c_int , pub max_width : :: std :: os :: raw :: c_int , pub max_height : :: std :: os :: raw :: c_int , pub width_inc : :: std :: os :: raw :: c_int , pub height_inc : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XIconSize ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XIconSize > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( XIconSize ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XIconSize > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( XIconSize ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIconSize ) ) . min_width as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XIconSize ) , "::" , stringify ! ( min_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIconSize ) ) . min_height as * const _ as usize } , 4usize , concat ! ( "Alignment of field: " , stringify ! ( XIconSize ) , "::" , stringify ! ( min_height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIconSize ) ) . max_width as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XIconSize ) , "::" , stringify ! ( max_width ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIconSize ) ) . max_height as * const _ as usize } , 12usize , concat ! ( "Alignment of field: " , stringify ! ( XIconSize ) , "::" , stringify ! ( max_height ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIconSize ) ) . width_inc as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XIconSize ) , "::" , stringify ! ( width_inc ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XIconSize ) ) . height_inc as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( XIconSize ) , "::" , stringify ! ( height_inc ) ) ) ; } impl Clone for XIconSize { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XClassHint { pub res_name : * mut :: std :: os :: raw :: c_char , pub res_class : * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_XClassHint ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XClassHint > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( XClassHint ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XClassHint > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XClassHint ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClassHint ) ) . res_name as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XClassHint ) , "::" , stringify ! ( res_name ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XClassHint ) ) . res_class as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XClassHint ) , "::" , stringify ! ( res_class ) ) ) ; } impl Clone for XClassHint { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct _XComposeStatus { pub compose_ptr : XPointer , pub chars_matched : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout__XComposeStatus ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _XComposeStatus > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _XComposeStatus ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _XComposeStatus > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _XComposeStatus ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XComposeStatus ) ) . compose_ptr as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( _XComposeStatus ) , "::" , stringify ! ( compose_ptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const _XComposeStatus ) ) . chars_matched as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( _XComposeStatus ) , "::" , stringify ! ( chars_matched ) ) ) ; } impl Clone for _XComposeStatus { fn clone ( & self ) -> Self { * self } } pub type XComposeStatus = _XComposeStatus ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _XRegion { _unused : [ u8 ; 0 ] } pub type Region = * mut _XRegion ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XVisualInfo { pub visual : * mut Visual , pub visualid : VisualID , pub screen : :: std :: os :: raw :: c_int , pub depth : :: std :: os :: raw :: c_int , pub class : :: std :: os :: raw :: c_int , pub red_mask : :: std :: os :: raw :: c_ulong , pub green_mask : :: std :: os :: raw :: c_ulong , pub blue_mask : :: std :: os :: raw :: c_ulong , pub colormap_size : :: std :: os :: raw :: c_int , pub bits_per_rgb : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_XVisualInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XVisualInfo > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( XVisualInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XVisualInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XVisualInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisualInfo ) ) . visual as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XVisualInfo ) , "::" , stringify ! ( visual ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisualInfo ) ) . visualid as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XVisualInfo ) , "::" , stringify ! ( visualid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisualInfo ) ) . screen as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XVisualInfo ) , "::" , stringify ! ( screen ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisualInfo ) ) . depth as * const _ as usize } , 20usize , concat ! ( "Alignment of field: " , stringify ! ( XVisualInfo ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisualInfo ) ) . class as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XVisualInfo ) , "::" , stringify ! ( class ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisualInfo ) ) . red_mask as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XVisualInfo ) , "::" , stringify ! ( red_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisualInfo ) ) . green_mask as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XVisualInfo ) , "::" , stringify ! ( green_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisualInfo ) ) . blue_mask as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XVisualInfo ) , "::" , stringify ! ( blue_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisualInfo ) ) . colormap_size as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XVisualInfo ) , "::" , stringify ! ( colormap_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XVisualInfo ) ) . bits_per_rgb as * const _ as usize } , 60usize , concat ! ( "Alignment of field: " , stringify ! ( XVisualInfo ) , "::" , stringify ! ( bits_per_rgb ) ) ) ; } impl Clone for XVisualInfo { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct XStandardColormap { pub colormap : Colormap , pub red_max : :: std :: os :: raw :: c_ulong , pub red_mult : :: std :: os :: raw :: c_ulong , pub green_max : :: std :: os :: raw :: c_ulong , pub green_mult : :: std :: os :: raw :: c_ulong , pub blue_max : :: std :: os :: raw :: c_ulong , pub blue_mult : :: std :: os :: raw :: c_ulong , pub base_pixel : :: std :: os :: raw :: c_ulong , pub visualid : VisualID , pub killid : XID , } # [ test ] fn bindgen_test_layout_XStandardColormap ( ) { assert_eq ! ( :: std :: mem :: size_of :: < XStandardColormap > ( ) , 80usize , concat ! ( "Size of: " , stringify ! ( XStandardColormap ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < XStandardColormap > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( XStandardColormap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XStandardColormap ) ) . colormap as * const _ as usize } , 0usize , concat ! ( "Alignment of field: " , stringify ! ( XStandardColormap ) , "::" , stringify ! ( colormap ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XStandardColormap ) ) . red_max as * const _ as usize } , 8usize , concat ! ( "Alignment of field: " , stringify ! ( XStandardColormap ) , "::" , stringify ! ( red_max ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XStandardColormap ) ) . red_mult as * const _ as usize } , 16usize , concat ! ( "Alignment of field: " , stringify ! ( XStandardColormap ) , "::" , stringify ! ( red_mult ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XStandardColormap ) ) . green_max as * const _ as usize } , 24usize , concat ! ( "Alignment of field: " , stringify ! ( XStandardColormap ) , "::" , stringify ! ( green_max ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XStandardColormap ) ) . green_mult as * const _ as usize } , 32usize , concat ! ( "Alignment of field: " , stringify ! ( XStandardColormap ) , "::" , stringify ! ( green_mult ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XStandardColormap ) ) . blue_max as * const _ as usize } , 40usize , concat ! ( "Alignment of field: " , stringify ! ( XStandardColormap ) , "::" , stringify ! ( blue_max ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XStandardColormap ) ) . blue_mult as * const _ as usize } , 48usize , concat ! ( "Alignment of field: " , stringify ! ( XStandardColormap ) , "::" , stringify ! ( blue_mult ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XStandardColormap ) ) . base_pixel as * const _ as usize } , 56usize , concat ! ( "Alignment of field: " , stringify ! ( XStandardColormap ) , "::" , stringify ! ( base_pixel ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XStandardColormap ) ) . visualid as * const _ as usize } , 64usize , concat ! ( "Alignment of field: " , stringify ! ( XStandardColormap ) , "::" , stringify ! ( visualid ) ) ) ; assert_eq ! ( unsafe { & ( * ( 0 as * const XStandardColormap ) ) . killid as * const _ as usize } , 72usize , concat ! ( "Alignment of field: " , stringify ! ( XStandardColormap ) , "::" , stringify ! ( killid ) ) ) ; } impl Clone for XStandardColormap { fn clone ( & self ) -> Self { * self } } pub type XContext = :: std :: os :: raw :: c_int ; extern "C" {
 pub fn XAllocClassHint ( ) -> * mut XClassHint ; 
} extern "C" {
 pub fn XAllocIconSize ( ) -> * mut XIconSize ; 
} extern "C" {
 pub fn XAllocSizeHints ( ) -> * mut XSizeHints ; 
} extern "C" {
 pub fn XAllocStandardColormap ( ) -> * mut XStandardColormap ; 
} extern "C" {
 pub fn XAllocWMHints ( ) -> * mut XWMHints ; 
} extern "C" {
 pub fn XClipBox ( arg1 : Region , arg2 : * mut XRectangle , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XCreateRegion ( ) -> Region ; 
} extern "C" {
 pub fn XDefaultString ( ) -> * const :: std :: os :: raw :: c_char ; 
} extern "C" {
 pub fn XDeleteContext ( arg1 : * mut Display , arg2 : XID , arg3 : XContext , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XDestroyRegion ( arg1 : Region , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XEmptyRegion ( arg1 : Region , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XEqualRegion ( arg1 : Region , arg2 : Region , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XFindContext ( arg1 : * mut Display , arg2 : XID , arg3 : XContext , arg4 : * mut XPointer , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetClassHint ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XClassHint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetIconSizes ( arg1 : * mut Display , arg2 : Window , arg3 : * mut * mut XIconSize , arg4 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetNormalHints ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XSizeHints , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetRGBColormaps ( arg1 : * mut Display , arg2 : Window , arg3 : * mut * mut XStandardColormap , arg4 : * mut :: std :: os :: raw :: c_int , arg5 : Atom , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetSizeHints ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XSizeHints , arg4 : Atom , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetStandardColormap ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XStandardColormap , arg4 : Atom , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetTextProperty ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XTextProperty , arg4 : Atom , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetVisualInfo ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_long , arg3 : * mut XVisualInfo , arg4 : * mut :: std :: os :: raw :: c_int , ) -> * mut XVisualInfo ; 
} extern "C" {
 pub fn XGetWMClientMachine ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XTextProperty , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetWMHints ( arg1 : * mut Display , arg2 : Window , ) -> * mut XWMHints ; 
} extern "C" {
 pub fn XGetWMIconName ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XTextProperty , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetWMName ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XTextProperty , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetWMNormalHints ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XSizeHints , arg4 : * mut :: std :: os :: raw :: c_long , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetWMSizeHints ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XSizeHints , arg4 : * mut :: std :: os :: raw :: c_long , arg5 : Atom , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XGetZoomHints ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XSizeHints , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XIntersectRegion ( arg1 : Region , arg2 : Region , arg3 : Region , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XConvertCase ( arg1 : KeySym , arg2 : * mut KeySym , arg3 : * mut KeySym , ) ; 
} extern "C" {
 pub fn XLookupString ( arg1 : * mut XKeyEvent , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut KeySym , arg5 : * mut XComposeStatus , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XMatchVisualInfo ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut XVisualInfo , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XOffsetRegion ( arg1 : Region , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XPointInRegion ( arg1 : Region , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XPolygonRegion ( arg1 : * mut XPoint , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , ) -> Region ; 
} extern "C" {
 pub fn XRectInRegion ( arg1 : Region , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSaveContext ( arg1 : * mut Display , arg2 : XID , arg3 : XContext , arg4 : * const :: std :: os :: raw :: c_char , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetClassHint ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XClassHint , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetIconSizes ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XIconSize , arg4 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetNormalHints ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XSizeHints , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetRGBColormaps ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XStandardColormap , arg4 : :: std :: os :: raw :: c_int , arg5 : Atom , ) ; 
} extern "C" {
 pub fn XSetSizeHints ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XSizeHints , arg4 : Atom , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetStandardProperties ( arg1 : * mut Display , arg2 : Window , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const :: std :: os :: raw :: c_char , arg5 : Pixmap , arg6 : * mut * mut :: std :: os :: raw :: c_char , arg7 : :: std :: os :: raw :: c_int , arg8 : * mut XSizeHints , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetTextProperty ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XTextProperty , arg4 : Atom , ) ; 
} extern "C" {
 pub fn XSetWMClientMachine ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XTextProperty , ) ; 
} extern "C" {
 pub fn XSetWMHints ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XWMHints , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetWMIconName ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XTextProperty , ) ; 
} extern "C" {
 pub fn XSetWMName ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XTextProperty , ) ; 
} extern "C" {
 pub fn XSetWMNormalHints ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XSizeHints , ) ; 
} extern "C" {
 pub fn XSetWMProperties ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XTextProperty , arg4 : * mut XTextProperty , arg5 : * mut * mut :: std :: os :: raw :: c_char , arg6 : :: std :: os :: raw :: c_int , arg7 : * mut XSizeHints , arg8 : * mut XWMHints , arg9 : * mut XClassHint , ) ; 
} extern "C" {
 pub fn XmbSetWMProperties ( arg1 : * mut Display , arg2 : Window , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const :: std :: os :: raw :: c_char , arg5 : * mut * mut :: std :: os :: raw :: c_char , arg6 : :: std :: os :: raw :: c_int , arg7 : * mut XSizeHints , arg8 : * mut XWMHints , arg9 : * mut XClassHint , ) ; 
} extern "C" {
 pub fn Xutf8SetWMProperties ( arg1 : * mut Display , arg2 : Window , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const :: std :: os :: raw :: c_char , arg5 : * mut * mut :: std :: os :: raw :: c_char , arg6 : :: std :: os :: raw :: c_int , arg7 : * mut XSizeHints , arg8 : * mut XWMHints , arg9 : * mut XClassHint , ) ; 
} extern "C" {
 pub fn XSetWMSizeHints ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XSizeHints , arg4 : Atom , ) ; 
} extern "C" {
 pub fn XSetRegion ( arg1 : * mut Display , arg2 : GC , arg3 : Region , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSetStandardColormap ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XStandardColormap , arg4 : Atom , ) ; 
} extern "C" {
 pub fn XSetZoomHints ( arg1 : * mut Display , arg2 : Window , arg3 : * mut XSizeHints , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XShrinkRegion ( arg1 : Region , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XStringListToTextProperty ( arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut XTextProperty , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XSubtractRegion ( arg1 : Region , arg2 : Region , arg3 : Region , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XmbTextListToTextProperty ( display : * mut Display , list : * mut * mut :: std :: os :: raw :: c_char , count : :: std :: os :: raw :: c_int , style : XICCEncodingStyle , text_prop_return : * mut XTextProperty , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XwcTextListToTextProperty ( display : * mut Display , list : * mut * mut wchar_t , count : :: std :: os :: raw :: c_int , style : XICCEncodingStyle , text_prop_return : * mut XTextProperty , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn Xutf8TextListToTextProperty ( display : * mut Display , list : * mut * mut :: std :: os :: raw :: c_char , count : :: std :: os :: raw :: c_int , style : XICCEncodingStyle , text_prop_return : * mut XTextProperty , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XwcFreeStringList ( list : * mut * mut wchar_t , ) ; 
} extern "C" {
 pub fn XTextPropertyToStringList ( arg1 : * mut XTextProperty , arg2 : * mut * mut * mut :: std :: os :: raw :: c_char , arg3 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XmbTextPropertyToTextList ( display : * mut Display , text_prop : * const XTextProperty , list_return : * mut * mut * mut :: std :: os :: raw :: c_char , count_return : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XwcTextPropertyToTextList ( display : * mut Display , text_prop : * const XTextProperty , list_return : * mut * mut * mut wchar_t , count_return : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn Xutf8TextPropertyToTextList ( display : * mut Display , text_prop : * const XTextProperty , list_return : * mut * mut * mut :: std :: os :: raw :: c_char , count_return : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUnionRectWithRegion ( arg1 : * mut XRectangle , arg2 : Region , arg3 : Region , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XUnionRegion ( arg1 : Region , arg2 : Region , arg3 : Region , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XWMGeometry ( arg1 : * mut Display , arg2 : :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const :: std :: os :: raw :: c_char , arg5 : :: std :: os :: raw :: c_uint , arg6 : * mut XSizeHints , arg7 : * mut :: std :: os :: raw :: c_int , arg8 : * mut :: std :: os :: raw :: c_int , arg9 : * mut :: std :: os :: raw :: c_int , arg10 : * mut :: std :: os :: raw :: c_int , arg11 : * mut :: std :: os :: raw :: c_int , ) -> :: std :: os :: raw :: c_int ; 
} extern "C" {
 pub fn XXorRegion ( arg1 : Region , arg2 : Region , arg3 : Region , ) -> :: std :: os :: raw :: c_int ; 
}